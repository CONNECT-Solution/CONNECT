<?xml version="1.0" encoding="UTF-8"?>
<project name="NHINC" default="ci" basedir=".">

    <import file="build/build.targets.xml"/>
    <import file="dist.targets.xml"/>

    <condition property="progress-filepath" value="${temp.directory.path}/ant-progress.txt">
        <not>
            <isset property="progress-filepath" />
        </not>
    </condition>

    <target name="ci" depends="clean, static.analysis, dist, unittest.run"/>
    <target name="dev.ci" depends="quick.clean, static.analysis, quick.package.create, unittest.run"/>
    <target name="dev" depends="quick.clean, quick.package.create"/>
    <target name="dev.test" depends="quick.clean, quick.package.create, unittest.run"/>

    <target name="coverage.bless" description="Will take all existing coverage failures and enter them as exceptions in each project's coverage.thresholds.xml file.">
        <var name="do-to-target" value="coverage.bless" />
        <antcall target="do-to-projects" />
    </target>

    <target name="source.compile" description="Compile all projects: run ant help for more info...">
        <var name="do-to-target" value="just.source.compile" />
        <antcall target="do-to-projects" />
    </target>

    <target name="quick.source.compile">
        <var name="do-to-target" value="just.quick.source.compile" />
        <antcall target="do-to-projects" />
    </target>

    <target name="package.create" description="Create the jar|war|ear for all projects: run ant help for more info..." depends="check.project.count">
        <var name="do-to-target" value="just.package.create" />
        <antcall target="do-to-projects" />
    </target>

    <target name="quick.package.create">
        <var name="do-to-target" value="just.quick.package.create" />
        <antcall target="do-to-projects" />
    </target>

    <target name="clean" description="Clean all projects: run ant help for more info..." depends="clean.ivy.cache, quick.clean">
        <call target="junit.clean" />
        <call target="coverage.clean" />
        <call target="checkstyle.clean" />
        <var name="do-to-target" value="just.clean" />
        <antcall target="do-to-projects" />
    </target>

    <target name="quick.clean">
        <property name="skip.ivy.clean" value="true"/>
        <call target="junit.clean" />
        <call target="coverage.clean" />
        <call target="checkstyle.clean" />
        <var name="do-to-target" value="just.quick.clean" />
        <antcall target="do-to-projects" />
    </target>

    <target name="clean.ivy.cache" unless="skip.ivy.clean">
        <call target="ivy.clean.project.cache" />
    </target>

    <target name="just.clean"  description="please call clean, at the Product level clean now works like just.clean worked...">
        <fail message="please call clean, at the Product level clean now works like just.clean worked..."/>
    </target>

    <target name="just.source.compile"  description="please call source.compile, at the Product level source.compile now works like just.source.compile worked...">
        <fail message="please call source.compile, at the Product level source.compile now works like just.source.compile worked..."/>
    </target>

    <target name="just.unittest.run" description="please call unittest.run, at the Product level unittest.run now works like just.unittest.run worked...">
        <fail message="please call unittest.run, at the Product level unittest.run now works like just.unittest.run worked..."/>
    </target>

    <target name="unittest.write.report" description="write html unit test reports in each projects' directory unit-test-reports...">
        <junitreportplus reportfile="${basedir}/unit-test-reports/UnitTests.xml" testtype="unit">
            <xmlreports>
                <fileset dir="${basedir}">
                    <include name="**/unit-test-reports/TEST-*.xml" />
                </fileset>
            </xmlreports>
        </junitreportplus>
    </target>

    <target name="just.integrationtest.run" description="please call integrationtest.run, at the Product level integrationtest.run now works like just.integrationtest.run worked...">
        <fail message="please call integrationtest.run, at the Product level integrationtest.run now works like just.integrationtest.run worked..."/>
    </target>

    <target name="just.webtest.run" description="please call webtest.run, at the Product level webtest.run now works like just.webtest.run worked...">
        <fail message="please call webtest.run, at the Product level webtest.run now works like just.webtest.run worked..."/>
    </target>

    <target name="just.package.create" description="please call package.create, at the Product level package.create now works like just.package.create worked...">
        <fail message="please call package.create, at the Product level package.create now works like just.package.create worked..."/>
    </target>

    <target name="deploy" depends="copy.deployable.artifacts" description="Deploy all projects: run ant help for more info...">
        <call target="deploy.to.production"/>
    </target>

    <target name="copy.deployable.artifacts">
        <delete dir="${deployment.binaries.dir}"/>
        <mkdir dir="${deployment.binaries.dir}"/>
        <delete dir="${deployment.dir}/ValidationSuite"/>
        <mkdir dir="${deployment.dir}/ValidationSuite"/>
        <runtarget target="create.deploy.list.xml"/>

        <copy todir="${deployment.dir}/${deployment.environment.configuration.dir.name}" verbose="true" overwrite="true">
            <fileset dir="${root.project.directory.path}/Production/Common/Properties/${deployment.environment.configuration.dir.name}"/>
        </copy>

        <copy todir="${deployment.interfaces.dir}" verbose="true" overwrite="true">
            <fileset dir="${root.project.directory.path}/Production/Common/Interfaces/src"/>
        </copy>

        <copy todir="${deployment.dir}/ValidationSuite" verbose="true" overwrite="true">
            <fileset dir="${root.project.directory.path}/SoapUI_Test/ValidationSuite" />
        </copy>

        <var name="do-to-target" value="copy.deployable.artifacts"/>
        <antcall target="do-to-projects"/>
    </target>

    <target name="just.deploy"  description="please call deploy, at the Product level deploy now works like just.deploy worked...">
        <fail message="please call deploy, at the Product level deploy now works like just.deploy worked..."/>
    </target>

    <target name="redeploy" depends="undeploy,deploy"/>

    <target name="undeploy"  description="Undeploy all projects: run ant help for more info...">
        <runtarget target="undeploy.from.production"/>
    </target>

    <target name="coverage.write.report" description="write html coverage reports in each projects' directory coverage-reports...">
        <delete dir="${basedir}/coverage-reports" />
        <mkdir dir="${basedir}/coverage-reports" />
        <cobertura-merge datafile="${basedir}/coverage-reports/coverage.ser">
            <fileset dir="${basedir}">
                <include name="**/*.ser" />
            </fileset>
        </cobertura-merge>
        <property name="coverage.temp.source" value="${temp.directory.path}/coverage-source"/>
        <delete dir="${coverage.temp.source}"/>
        <mkdir dir="${coverage.temp.source}"/>

        <for param="source.dir">
            <path>
                <dirset dir="${basedir}">
                    <include name="Production/**/src/main/java"/>
                </dirset>
            </path>
            <sequential>
                <copy todir="${coverage.temp.source}">
                    <fileset dir="@{source.dir}">
                        <include name="**/*.java"/>
                    </fileset>
                </copy>
            </sequential>
        </for>

        <cobertura-report
            format="xml"
            datafile="${basedir}/coverage-reports/coverage.ser"
            destdir="${basedir}/coverage-reports"
            srcdir="${coverage.temp.source}"
        />
        <cobertura-report
            format="html"
            datafile="${basedir}/coverage-reports/coverage.ser"
            destdir="${basedir}/coverage-reports"
            srcdir="${coverage.temp.source}"
        />
    </target>

    <target name="soapui.run" description="Run the SoapUI tests for the projects: run ant help for more info...">
        <var name="do-to-target" value="soapui.run" />
        <antcall target="do-to-projects" />

        <junitreportplus reportfile="${basedir}/soapui-test-reports/SoapUITests.xml" testtype="soapui">
            <xmlreports>
                <fileset dir="${basedir}">
                    <include name="**/soapui-test-reports/**/TEST-*.xml" />
                </fileset>
            </xmlreports>
        </junitreportplus>
    </target>

    <target name="webtest.run" description="Run the Selenium JUnit tests for the projects: run ant help for more info...">
        <var name="do-to-target" value="just.webtest.run" />
        <antcall target="do-to-projects" />

        <junitreportplus reportfile="${basedir}/web-test-reports/WebTests.xml" testtype="web">
            <xmlreports>
                <fileset dir="${basedir}">
                    <include name="**/web-test-reports/TEST-*.xml" />
                </fileset>
            </xmlreports>
        </junitreportplus>
    </target>

    <target name="integrationtest.run" description="Run the JUnit Integration tests for the projects: run ant help for more info...">
        <call target="-coverage.product.prep"/>
        <var name="do-to-target" value="just.integrationtest.run" />
        <antcall target="do-to-projects" />

        <junitreportplus reportfile="${basedir}/integration-test-reports/IntegrationTests.xml" testtype="integration">
            <xmlreports>
                <fileset dir="${basedir}">
                    <include name="**/integration-test-reports/TEST-*.xml" />
                </fileset>
            </xmlreports>
        </junitreportplus>
        <call target="-coverage.product.check"/>
    </target>

    <target name="unittest.run" description="Run the JUnit tests for the projects: run ant help for more info...">
    	
    	<property name="unittest.properties.dir" value="${basedir}/Production/Common/Properties" />
    	   	
    	<call target="-coverage.product.prep"/>
        <call target="-unittest.product.prep"/>
        <var name="do-to-target" value="just.unittest.run" />
        <antcall target="do-to-projects" />
        <call target="unittest.write.master.html.report"/>
        <call target="-unittest.product.check"/>
        <call target="coverage.write.report"/>
        <call target="-coverage.product.check"/>
    </target>

    <target name="unittest.write.master.html.report">
        <delete dir="${basedir}/unit-test-reports"/>
        <mkdir dir="${basedir}/unit-test-reports"/>
        <junitreportplus reportfile="${basedir}/unit-test-reports/UnitTests.xml" testtype="unit">
            <xmlreports>
                <fileset dir="${basedir}">
                    <include name="**/TEST-*.xml" />
                </fileset>
            </xmlreports>
        </junitreportplus>
    </target>

    <target name="copyright.add" description="Clean all projects: run ant help for more info...">
        <var name="do-to-target" value="copyright.add" />
        <antcall target="do-to-projects" />
    </target>

    <target name="help">
        <echo taskname="help">
      run ant -p for the short help (ignore the target that start with: 'build.targets.')

      This project will iterate over all the projects listed in ${basedir}/projects.xml
      and execute all targets specificed.

      Targets available in this project:

      clean - deletes all transient directories and files for each project.

      source.compile - if out-of-date compiles all projects listed in the projects.xml.

      package.create - if out-of-date creates jar/war/ear files for all projects listed in the projects.xml.

      unittest.run - executes all the unit tests in projects that have unit tests and are marked as having unit tests.
      Checks that both line and branch coverage rates are meet for all classes.
      The default minimum rates, percents required are ${coverage.threshold.linerate}% line coverage
      and ${coverage.threshold.branchrate}% branch coverage.  Exceptions to the default rates are maintained
      in the file ${coverage.thresholds.file}.

      unittest.write.report - Writes an html report for each project to [project directory]/unit-test-reports/index.html.

      coverage.write.report - Writes an html report for each project to [project directory]/coverage-reports/index.html.

      coverage.bless - Will take all existing coverage failures and enter them as exceptions in each project's coverage.thresholds.xml file.

      integrationtest.run - executes all integration tests in projects that have integration tests and are marked as having integration tests.
      Writes an html report for each project to [project directory]/coverage-reports/index.html.
      Checks that both line and branch coverage rates are meet for all classes.
      The default minimum rates, percents required are ${coverage.threshold.linerate}% line coverage
      and ${coverage.threshold.branchrate}% branch coverage.  Exceptions to the default rates are maintained
      in the file ${coverage.thresholds.file}.

      webtest.run - executes all web tests in projects that have web tests and are marked as having web tests.

      just.webtest.run - does what webtest.run does minus the compilation.

      soapui.run - executes all soapui project files found in all projects that have the property soapui.hasTests set to true.  A soapui
      project file has the format of *-soapui-project.xml.

      coverage.write.report - merges all coverage information and writes a single html report to ${basedir}/coverage-reports/index.html.

      deploy - calls package.create then deploys the project's package if the property deploy.isDeployable is set to true.

      undeploy - undeploys the project's package if the property deploy.isDeployable is set to true.

      redeploy - calls undeploy the deploy.
    </echo>
    </target>

    <target name="check.project.count">
        <var name="project.count" value="0" />
        <var name="to.build.count" value="0" />
        <xmltask source="${basedir}/projects.xml">
            <call path="/projects/project">
                <param name="should.build" path="should.build/text()" />
                <actions>
                    <if>
                        <istrue value="@{should.build}"/>
                        <then>
                            <math result="to.build.count" operand1="${to.build.count}" operation="+" operand2="1" datatype="int" />
                        </then>
                    </if>
                    <math result="project.count" operand1="${project.count}" operation="+" operand2="1" datatype="int" />
                </actions>
            </call>
        </xmltask>
        <script language="javascript">
            <![CDATA[
        var projectcount = parseInt(project.getProperty('project.count'));
        var tobuildcount = parseInt(project.getProperty('to.build.count'));
        project.setProperty('project.count.greater.than.zero', projectcount > 1);
        project.setProperty('to.build.count.greater.than.zero', tobuildcount > 0);
      ]]>
    </script>
        <echo message="project.count =${project.count}=."/>
        <echo message="to.build.count =${to.build.count}=."/>
        <if>
            <and>
                <istrue value="${project.count.greater.than.zero}"/>
                <istrue value="${to.build.count.greater.than.zero}"/>
            </and>
            <then>
                <echo message="project.count =${project.count}=."/>
                <echo message="to.build.count =${to.build.count}=."/>
            </then>
            <else>
                <fail message="No projects to build."/>
            </else>
        </if>
    </target>

    <target name="do-to-projects" depends="check.project.count" description="calls the target specified in the property do-to-target on all the projects.">
        <property name="current.project.count" value="0" />
        <xmltask source="${basedir}/projects.xml">
            <call path="/projects/project">
                <param name="project.name" path="name/text()" />
                <param name="project.directory" path="directory/text()" />
                <param name="should.build" path="should.build/text()" />
                <actions>
                    <if>
                        <istrue value="@{should.build}"/>
                        <then>
                            <math result="current.project.count" operand1="${current.project.count}" operation="+" operand2="1" datatype="int" />
                            <echo message=" ******************** Start @{project.name} ${do-to-target} project ${current.project.count} of ${to.build.count} *************************" file="${progress-filepath}" level="info"/>
                            <echo message=" ******************** Start @{project.name} ${do-to-target} project ${current.project.count} of ${to.build.count} *************************" level="info"/>
                            <project name="@{project.name}" dir="${basedir}/@{project.directory}" file="build.xml" target="${do-to-target}" order="${current.project.count}"/>
                            <echo message=" ******************** End @{project.name} ${do-to-target} project ${current.project.count} of ${to.build.count} *************************" file="${progress-filepath}" level="info"/>
                            <echo message=" ******************** End @{project.name} ${do-to-target} project ${current.project.count} of ${to.build.count} *************************" level="info"/>
                        </then>
                    </if>
                </actions>
            </call>
        </xmltask>
    </target>
	

</project>
