<?xml version="1.0" encoding="UTF-8"?>
<project name="NHINC" basedir=".">

    <import file="build/build.targets.xml"/>
    <import file="dist.targets.xml"/>

    <condition property="progress-filepath" value="${temp.directory.path}/ant-progress.txt">
        <not>
            <isset property="progress-filepath" />
        </not>
    </condition>

    <target name="package.create" description="Create the jar|war|ear for all projects: run ant help for more info...">
        <var name="do-to-target" value="just.package.create" />
        <antcall target="do-to-projects" />
    </target>

    <target name="quick.package.create">
        <var name="do-to-target" value="just.quick.package.create" />
        <antcall target="do-to-projects" />
    </target>

    <target name="deploy" depends="copy.deployable.artifacts" description="Deploy all projects: run ant help for more info...">
        <call target="deploy.to.production"/>
    </target>

    <target name="copy.deployable.artifacts">
        <delete dir="${deployment.binaries.dir}"/>
        <mkdir dir="${deployment.binaries.dir}"/>
        <delete dir="${deployment.dir}/ValidationSuite"/>
        <mkdir dir="${deployment.dir}/ValidationSuite"/>
        <runtarget target="create.deploy.list.xml"/>

        <copy todir="${deployment.dir}/${deployment.environment.configuration.dir.name}" verbose="true" overwrite="true">
            <fileset dir="${root.project.directory.path}/Production/Common/Properties/${deployment.environment.configuration.dir.name}"/>
        </copy>

        <copy todir="${deployment.interfaces.dir}" verbose="true" overwrite="true">
            <fileset dir="${root.project.directory.path}/Production/Common/Interfaces/src"/>
        </copy>

        <copy todir="${deployment.dir}/ValidationSuite" verbose="true" overwrite="true">
            <fileset dir="${root.project.directory.path}/SoapUI_Test/ValidationSuite" />
        </copy>

        <var name="do-to-target" value="copy.deployable.artifacts"/>
        <antcall target="do-to-projects"/>
    </target>

    <target name="just.deploy"  description="please call deploy, at the Product level deploy now works like just.deploy worked...">
        <fail message="please call deploy, at the Product level deploy now works like just.deploy worked..."/>
    </target>

    <target name="redeploy" depends="undeploy,deploy"/>

    <target name="undeploy"  description="Undeploy all projects: run ant help for more info...">
        <runtarget target="undeploy.from.production"/>
    </target>

    <target name="do-to-projects" unless="skip.do-to-projects" description="calls the target specified in the property do-to-target on all the projects.">
        <property name="current.project.count" value="0" />
        <xmltask source="${basedir}/projects.xml">
            <call path="/projects/project">
                <param name="project.name" path="name/text()" />
                <param name="project.directory" path="directory/text()" />
                <param name="should.build" path="should.build/text()" />
                <actions>
                    <if>
                        <istrue value="@{should.build}"/>
                        <then>
                            <math result="current.project.count" operand1="${current.project.count}" operation="+" operand2="1" datatype="int" />
                            <echo message=" ******************** Start @{project.name} ${do-to-target} project ${current.project.count} of ${to.build.count} *************************" file="${progress-filepath}" level="info"/>
                            <echo message=" ******************** Start @{project.name} ${do-to-target} project ${current.project.count} of ${to.build.count} *************************" level="info"/>
                            <project name="@{project.name}" dir="${basedir}/@{project.directory}" file="build.xml" target="${do-to-target}" order="${current.project.count}"/>
                            <echo message=" ******************** End @{project.name} ${do-to-target} project ${current.project.count} of ${to.build.count} *************************" file="${progress-filepath}" level="info"/>
                            <echo message=" ******************** End @{project.name} ${do-to-target} project ${current.project.count} of ${to.build.count} *************************" level="info"/>
                        </then>
                    </if>
                </actions>
            </call>
        </xmltask>
    </target>

    <target name="ear.create" description="creates a classpath for all required jar|war files and packages them in ear">
        <!-- clear deployment directory -->
        <if>
            <available file=".ant-deploy-staging" type="dir" />
            <then>
                <delete dir=".ant-deploy-staging"/>
            </then>
        </if>
        <!-- delete old ear file -->
        <if>
            <available file=".ant-deploy-ear/CONNECT.ear" />
            <then>
                <delete file=".ant-deploy-ear/CONNECT.ear"/>
            </then>
        </if>


        <copy tofile=".ant-deploy-staging/META-INF/application.xml" file="application.template.xml"/>

        <property name="thirdparty.home" location="../ThirdParty" />
        <property name="common.home" location="Production/Common" />

        <property name="cxf.home" location="${thirdparty.home}/CXF" />
        <property name="spring.home" location="${thirdparty.home}/SpringFramework" />
        <property name="aspcectj.home" locaiton="${thirdparty.home}/AspectJ" />
        <property name="core.lib" location="${common.home}/CONNECTCoreLib/dist/debug" />
        <property name="common.lib" location="${common.home}/CONNECTCommonTypesLib/dist/debug" />
        <property name="opensaml.home" location="${thirdparty.home}/openSAML" />
        <property name="hibernate.home" location="${thirdparty.home}/HibernateLibraries" />
        <property name="mysql.home" location="${thirdparty.home}/MySQLDB" />
        <property name="xstream.home" location="${thirdparty.home}/XStream" />

        <path id="ear.libs">
            <fileset dir="${cxf.home}">
                <include name="aopalliance-1.0.jar" />
                <include name="commons-collections-3.2.1.jar" />
                <include name="commons-lang-2.6.jar" />
                <include name="commons-logging-1.1.1.jar" />
                <include name="cxf-2.6.0.jar" />
                <include name="ehcache-core-2.5.1.jar" />
                <include name="jaxb-xjc-2.2.5.jar" />
                <include name="jaxb-api-2.2.6.jar" />
                <include name="jaxb-impl-2.2.5.jar" />
                <include name="joda-time-1.6.2.jar" />
                <include name="neethi-3.0.2.jar" />
                <include name="opensaml-2.5.1-1.jar" />
                <include name="openws-1.4.2-1.jar" />
                <include name="saaj-impl-1.3.18.jar" />
                <include name="saaj-api-1.3.4.jar" />
                <include name="slf4j-jdk14-1.6.2.jar" />
                <include name="spring-aop-3.0.7.RELEASE.jar" />
                <include name="spring-asm-3.0.7.RELEASE.jar" />
                <include name="spring-beans-3.0.7.RELEASE.jar" />
                <include name="spring-context-3.0.7.RELEASE.jar" />
                <include name="spring-core-3.0.7.RELEASE.jar" />
                <include name="spring-expression-3.0.7.RELEASE.jar" />
                <include name="velocity-1.7.jar" />
                <include name="woodstox-core-asl-4.1.2.jar" />
                <include name="wsdl4j-1.6.2.jar" />
                <include name="wss4j-1.6.5.jar" />
                <include name="xml-resolver-1.2.jar" />
                <include name="xmlschema-core-2.0.2.jar" />
                <include name="xmlbeans-2.5.0.jar" />
                <include name="xmlsec-1.5.1.jar" />
                <include name="xmltooling-1.3.2-1.jar" />
            </fileset>
            <filelist dir="${opensaml.home}">
                <file name="slf4j-api-1.6.4.jar" />
                <file name="esapi-2.0.1.jar" />
            </filelist>
            <fileset dir="${hibernate.home}">
                <include name="jdbc2_0-stdext.jar" />
                <include name="asm-attrs.jar" />
                <include name="dom4j-1.6.1.jar" />
                <include name="jta.jar" />
                <include name="cglib-2.1.3.jar" />
                <include name="hibernate3.jar" />
                <include name="asm.jar" />
            </fileset>

            <fileset dir="${mysql.home}">
                <include name="mysql-connector-java-5.1.8-bin.jar" />
            </fileset>

            <fileset dir="${xstream.home}">
                <include name="commons-lang-license.txt" />
                <include name="glib-license.txt" />
                <include name="jdom-license.txt" />
                <include name="jdom-1.0.jar" />
                <include name="jettison-1.0-RC2.jar" />
                <include name="jettison-license.txt" />
                <include name="xom-license.txt" />
                <include name="xstream-benchmark-1.3.jar" />
                <include name="wstx-asl-3.2.3.jar" />
                <include name="xpp3-license.txt" />
                <include name="xml-writer-0.2.jar" />
                <include name="xpp3_min-1.1.4c.jar" />
                <include name="xom-1.1.jar" />
                <include name="xstream-1.3.jar" />
            </fileset>
            <filelist dir="${opensaml.home}">
                <file name="esapi-2.0.1.jar" />
            </filelist>
            <filelist dir="${spring.home}">
                <file name="spring.jar" />
            </filelist>
            <filelist dir="${aspectj.home}">
                <file name="aspectjrt.jar" />
                <file name="aspectjweaver.jar" />
            </filelist>
            <filelist dir="${core.lib}">
                <file name="CONNECTCoreLib.jar" />
            </filelist>
            <filelist dir="${common.lib}">
                <file name="CONNECTCommonTypesLib.jar" />
            </filelist>
        </path>

        <copy todir=".ant-deploy-staging" flatten="true" overwrite="true">
            <path refid="ear.libs" />
        </copy>

        <xmltask source="${basedir}/projects.xml">
            <call path="/projects/project">
                <param name="project.name" path="name/text()" />
                <param name="project.directory" path="directory/text()" />
                <param name="should.deploy" path="should.deploy/text()" />
                <param name="context.root" path="context.root/text()" />
                <param name="dist.type" path="dist.type/text()" />
                <actions>
                    <if>
                        <istrue value="@{should.deploy}"/>
                        <then>
                            <var name="project.war" value="${basedir}/@{project.directory}" />
                            <antcall target="-ear.copy.war" />

                            <replace file=".ant-deploy-staging/META-INF/application.xml">
                                <replacetoken>
                                    <![CDATA[</application>]]></replacetoken>
                                <replacevalue>
                                    <![CDATA[    <module>
                                    <web>
                                        <web-uri>@{project.name}.war</web-uri>
                                        <context-root>@{context.root}</context-root>
                                    </web>
                                </module>
                            </application>]]></replacevalue>
                    </replace>
                </then>
            </if>
        </actions>
    </call>
</xmltask>

<!-- create ear file -->
<mkdir dir=".ant-deploy-ear"/>

<var name="dist.type" value="ear" />
<var name="dist.file" value="CONNECT.ear" />
<antcall target="-package.recreate" />
</target>

</project>
