<?xml version="1.0" encoding="UTF-8"?>
<project name="package.targets">

    <dirname property="package.targets.basedir" file="${ant.file.package.targets}" />

    <import file="package.properties.xml"/>

    <import file="${package.targets.basedir}/../../Install/ear.libs.properties.xml" />

    <target name="package.help" />

    <target name="package.clean">
        <delete dir="${dist.root.dir}" failonerror="true" />
    </target>

    <target name="-package.create">
        <mkdir dir="${dist.dir}" />

        <echo message="check if out of date ${dist.file}" level="info"/>

        <if>
            <exists path="${dist.file}" />
            <then>
                <property name="force.package" value="false" />
            </then>
            <else>
                <echo message="The package will be forced, the dist file does not exist: ${dist.file}." level="info"/>
                <property name="force.package" value="true" />
            </else>
        </if>

        <outofdate verbose="true" force="${force.package}">
            <sourcefiles>
                <path refid="war.libs" />
                <path refid="war.files" />
                <path refid="ear.libs" />
                <path refid="ear.files" />
                <path refid="wsdl.list" />
                <fileset dir="${build.dist.root}">
                    <include name="**/*" />
                </fileset>
            </sourcefiles>
            <targetfiles>
                <filelist dir="${dist.dir}">
                    <file name="${dist.file}" />
                </filelist>
            </targetfiles>
            <sequential>
                <call target="-package.recreate" />
            </sequential>
        </outofdate>
    </target>

    <target name="-package.recreate">
        <echo message="Creating package ${dist.file}..." level="info"/>
        <delete file="${dist.file}" />
        <mkdir dir="${build.dist.meta-inf.dir}" />

        <manifest file="${build.dist.manifest.file}" mode="update">
            <attribute name="Implementation-Vendor" value="connectopensource.org" />
            <attribute name="Implementation-Title" value="NHIN CONNECT" />
            <attribute name="Implementation-Version" value="${ProductVersion}" />
            <attribute name="Specification-Version" value="${ProductVersion}" />
        </manifest>

        <switch value="${dist.type}">
            <case value="jar">
                <mkdir dir="${build.jar.lib.dir}" />
                <for param="jar.lib">
                    <path refid="jar.libs" />
                    <sequential>
                        <copy file="@{jar.lib}" todir="${build.jar.lib.dir}" />
                    </sequential>
                </for>
                <jar destfile="${dist.file}" compress="true" basedir="${build.dist.root}" manifest="${build.dist.manifest.file}" excludes="**/*.flag"/>
            </case>
            <case value="war">
                <!-- Create a flat list of required jar files -->
                <pathconvert property="libs.project" pathsep=" ">
                    <mapper>
                      <chainedmapper>
                        <!-- remove absolute path -->
                        <flattenmapper />
                        <!-- add lib/ prefix -->
                        <globmapper from="*" to="lib/*" />
                      </chainedmapper>
                    </mapper>
                    <path refid="ear.libs" />
                    <fileset dir="${build.dist.root}">
                        <include name="**/CONNECTCoreLib.jar" />
                        <include name="**/CONNECTCommonTypesLib.jar" />
                    </fileset>
                </pathconvert>
                <property name="all.dependencies" value="${libs.project} lib/CONNECTCoreLib.jar lib/CONNECTCommonTypesLib.jar" />
                <manifest file="${build.dist.manifest.file}" mode="update">
                    <attribute name="Class-Path" value="${all.dependencies}" />
                </manifest>
                <mkdir dir="${build.war.lib.dir}" />
                <for param="war.lib">
                    <path refid="war.libs" />
                    <sequential>
                        <copy file="@{war.lib}" todir="${build.war.lib.dir}" />
                    </sequential>
                </for>

                <echo>This is build.dist.manifest.file: ${build.dist.manifest.file}</echo>

                <for param="wsdl.item">
                    <path refid="wsdl.list" />
                    <sequential>
                        <copy file="@{wsdl.item}" todir="${build.war.wsdl.dir}" />
                    </sequential>
                </for>

                <if>
                    <istrue value="${copy.schemas.to.webinf}"/>
                    <then>
                        <copy todir="${build.war.schema.dir}">
                            <fileset dir="${schema.dir}" />
                        </copy>
                    </then>
                </if>

                <war compress="true" destfile="${dist.file}" manifest="${build.dist.manifest.file}">
                    <path refid="war.files" />
                    <fileset dir="${build.dist.root}">
                        <exclude name="**/*.flag"/>
                    </fileset>
                </war>
            </case>
            <case value="ear">
                <mkdir dir=".ant-deploy-staging/lib" />
                <copy todir=".ant-deploy-staging/lib" flatten="true" overwrite="true">
                    <path refid="ear.libs" />
                </copy>
                <echo>This is build.dist.meta-inf.dir: ${build.dist.meta-inf.dir}</echo>
                <echo>This is build.dist.root: ${build.dist.root}</echo>

                <ear compress="true" destfile=".ant-deploy-ear/CONNECT.ear" manifest="${build.dist.manifest.file}" appxml=".ant-deploy-staging/META-INF/application.xml">
                    <path refid="ear.files" />
                    <fileset dir=".ant-deploy-staging">
                        <exclude name="META-INF/application.xml"/>
                    </fileset>
                </ear>
            </case>
            <default>
                <fail message="Tag you're it! Packaging ${dist.type}s has not yet been implemented, you can write it..."/>
            </default>
        </switch>
    </target>

    <target name="-ear.add.jar">
        <basename property="temp.filename" file="${file.name}"/>
        <var name="temp.filename.var" value="${temp.filename}"/>
        <echo>=${temp.filename.var}=</echo>
        <replace file=".ant-deploy-staging/META-INF/application.xml"
            token="&lt;/application&gt;"
            value="&lt;module&gt;&lt;java&gt;lib/${temp.filename.var}&lt;/java&gt;&lt;/module&gt;${line.separator}
              &lt;/application&gt;">
        </replace>
    </target>

</project>
