<?xml version="1.0" encoding="UTF-8"?>

<project name="CONNECT.Validation.Driver" default="install-and-test" basedir=".">

    <property name="info.log" value="${basedir}/validation_driver.info.log" />
    <property name="debug.log" value="${basedir}/validation_driver.debug.log" />

    <record name="${debug.log}" append="false" loglevel="debug" />
    <record name="${info.log}" append="false" loglevel="info" />

    <echo message="CONNECT testing validation logs can be found here: ${debug.log} (debug-level) and ${info.log} (info-level)." />

    <property name="glassfish.install.dir.name" value="glassfish3" />
    <property name="glassfish.home" value="${basedir}/${glassfish.install.dir.name}/glassfish" />
    <available file="${glassfish.home}/bin" type="dir" property="glassfish.bin.is.present" />
    <property name="test.results.basedir" value="${basedir}/soapui_output" />
    <property name="validation.test.results.basedir" value="${test.results.basedir}/validation_suite" />
    <property name="regression.test.results.basedir" value="${test.results.basedir}/regression_suite" />
    <property name="soapui.settings.file" value="${basedir}/soapui-settings.xml" />
    <property name="mysql.executable" value="mysql" />
    <property name="should.run.regression.suite" value="false" />
    <condition property="asadmin.executable" value="${glassfish.home}/bin/asadmin">
        <os family="Unix" />
    </condition>
    <condition property="asadmin.executable" value="${glassfish.home}/bin/asadmin.bat">
        <os family="Windows" />
    </condition>

    <target name="install-and-test">
        <antcall target="install" />
        <antcall target="test" />
    </target>

    <target name="generate-installation-properties">
        <propertyfile file="${basedir}/local.install.properties">
            <entry key="glassfish.install.dir.name" value="${glassfish.install.dir.name}" />
            <entry key="glassfish.install.dir.root" value="${basedir}" />
            <entry key="mysql.system.password" value="${mysql.system.password}" />
            <entry key="cert.key.algorithm" value="RSA" />
            <entry key="cert.key.size" value="1024" />
            <entry key="cert.validity.length" value="365" />
            <entry key="cert.cn" value="localhost" />
            <entry key="cert.keystore.name" value="gateway" />
            <entry key="cert.keypass" value="changeit" />
            <entry key="cert.storepass" value="changeit" />
            <entry key="cert.store.name" value="cacerts" />
            <entry key="skip.backup" value="true" />
        </propertyfile>
    </target>

    <target name="install">
        <antcall target="generate-installation-properties" />
        <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask">
            <classpath>
                <fileset dir="${basedir}/ThirdParty/AntExtraLibs">
                    <include name="xmltask-*.jar" />
                </fileset>
            </classpath>
        </taskdef>
        <xmltask source="${basedir}/deploy.application.list.xml" dest="${basedir}/deploy.application.list.xml">
            <replace path="//should.deploy/text()[../preceding-sibling::name/text()[contains(., 'GUI')]]" withText="false" />
        </xmltask>
        <ant antfile="${basedir}/build.xml" dir="${basedir}">
            <property name="mysql.executable" value="${mysql.executable}" />
        </ant>
    </target>

    <target name="test" depends="clean.test.results, run.validation.tests, run.regression.tests">
        <taskdef resource="net/sf/antcontrib/antlib.xml">
            <classpath>
                <fileset dir="${basedir}/ThirdParty/AntExtraLibs">
                    <include name="ant-contrib-*.jar" />
                </fileset>
            </classpath>
        </taskdef>
        <if>
            <and>
                <equals arg1="${validation.failures.detected}" arg2="true" />
                <equals arg1="${regression.failures.detected}" arg2="true" />
            </and>
            <then>
                <fail message="both validatation and regression test soapui failures/errors detected!" />
            </then>
        </if>
        <fail if="validation.failures.detected" message="validatation test soapui failures/errors detected!" />
        <fail if="regression.failures.detected" message="regression test soapui failures/errors detected!" />
    </target>

    <target name="clean.test.results">
        <delete dir="${test.results.basedir}" />
    </target>

    <target name="run.validation.tests">
        <antcall target="stop.glassfish" />
        <antcall target="start.glassfish" />
        <delete>
            <fileset dir="${basedir}" includes="soapui*.log" />
        </delete>
        <delete dir="${validation.test.results.basedir}" />
        <copy todir="${soapui.bin}/ext" overwrite="true">
            <fileset dir="${basedir}/ThirdParty/MySQLDB">
                <include name="mysql-connector-java-*-bin.jar" />
            </fileset>
        </copy>
        <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.MsgProxyValidation">
            <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
            <arg line="-j -a -f ${validation.test.results.basedir} -t ${soapui.settings.file} -r ${basedir}/ValidationSuite/MsgProxyValidation-soapui-project.xml" />
        </exec>
        <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.EntityValidation">
            <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
            <arg line="-j -a -f ${validation.test.results.basedir} -t ${soapui.settings.file} -r ${basedir}/ValidationSuite/EntityValidation-soapui-project.xml" />
        </exec>
        <antcall target="stop.glassfish" />
        <condition property="validation.failures.detected">
            <or>
                <not>
                    <equals arg1="${soapui.result.MsgProxyValidation}" arg2="0" />
                </not>
                <not>
                    <equals arg1="${soapui.result.EntityValidation}" arg2="0" />
                </not>
            </or>
        </condition>
    </target>

    <target name="run.regression.tests">
        <taskdef resource="net/sf/antcontrib/antlib.xml">
            <classpath>
                <fileset dir="${basedir}/ThirdParty/AntExtraLibs">
                    <include name="ant-contrib-*.jar" />
                </fileset>
            </classpath>
        </taskdef>
        <if>
            <equals arg1="${should.run.regression.suite}" arg2="true" />
            <then>
                <copy todir="${soapui.bin}/ext" overwrite="true">
                    <fileset dir="${basedir}/ThirdParty/MySQLDB">
                        <include name="mysql-connector-java-*-bin.jar" />
                    </fileset>
                    <fileset dir="${basedir}/RegressionSuite">
                        <include name="FileUtils.jar" />
                    </fileset>
                </copy>
                <antcall target="stop.glassfish" />
                <antcall target="start.glassfish" />
                <delete>
                    <fileset dir="${basedir}" includes="soapui*.log" />
                </delete>
                <delete dir="${regression.test.results.basedir}" />
                <mkdir dir="${regression.test.results.basedir}/AdapterPatientDiscoveryAsyncReq" />
                <mkdir dir="${regression.test.results.basedir}/AdapterPatientDiscoveryAsyncReqError" />
                <mkdir dir="${regression.test.results.basedir}/AdapterPatientDiscoveryAsyncResp" />
                <mkdir dir="${regression.test.results.basedir}/Admin-Distribution" />
                <mkdir dir="${regression.test.results.basedir}/AuditLogsforDocQandDocR" />
                <mkdir dir="${regression.test.results.basedir}/DocQueryAdditionalStoredQueries" />
                <mkdir dir="${regression.test.results.basedir}/DocQueryFanoutTestTarget" />
                <mkdir dir="${regression.test.results.basedir}/DocQueryOnDemand" />
                <mkdir dir="${regression.test.results.basedir}/DocQueryRetrieveSelfTest" />
                <mkdir dir="${regression.test.results.basedir}/DocQuerytestsforUDDI" />
                <mkdir dir="${regression.test.results.basedir}/DocQueryXDSErrors" />
                <mkdir dir="${regression.test.results.basedir}/DocRegistryAndRepository" />
                <mkdir dir="${regression.test.results.basedir}/DocumentRetrieveXDSErrorValidation" />
                <mkdir dir="${regression.test.results.basedir}/EntityDocQuery" />
                <mkdir dir="${regression.test.results.basedir}/EntityDocRetrieve" />
                <mkdir dir="${regression.test.results.basedir}/EntityPolicyEngineTest" />
                <mkdir dir="${regression.test.results.basedir}/EntitySendingXDRAsyncReqTests" />
                <mkdir dir="${regression.test.results.basedir}/EntitySendingXDRAsyncResponseTests" />
                <mkdir dir="${regression.test.results.basedir}/EntityXDRTests" />
                <mkdir dir="${regression.test.results.basedir}/Fanout-Test" />
                <mkdir dir="${regression.test.results.basedir}/HIEMPatientCentricUDDItests" />
                <mkdir dir="${regression.test.results.basedir}/HIEMTestsforUDDI" />
                <mkdir dir="${regression.test.results.basedir}/NHINCPatientDiscoveryMAA" />
                <mkdir dir="${regression.test.results.basedir}/NhincPolicyEngineTest" />
                <mkdir dir="${regression.test.results.basedir}/NHINCReceivingXDRAsyncRequestTests" />
                <mkdir dir="${regression.test.results.basedir}/PatientCorrelation" />
                <mkdir dir="${regression.test.results.basedir}/PolicyEngineInteractions" />
                <mkdir dir="${regression.test.results.basedir}/QueryByState" />
                <mkdir dir="${regression.test.results.basedir}/XDRAdapterTests" />
                <mkdir dir="${regression.test.results.basedir}/XDRAsyncRequestInbound-Tests" />
                <mkdir dir="${regression.test.results.basedir}/XDRAsyncRequestOutbound-Tests" />
                <copy todir="${soapui.bin}/ext" overwrite="false">
                    <fileset dir="${basedir}/ThirdParty/MySQLDB">
                        <include name="mysql-connector-java-*-bin.jar" />
                    </fileset>
                </copy>
                <copy todir="${soapui.bin}/ext" overwrite="false">
                    <fileset dir="${basedir}/ThirdParty/Scripts">
                        <include name="FileUtils.jar" />
                    </fileset>
                </copy>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.AdapterPatientDiscoveryAsyncReq">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/AdapterPatientDiscoveryAsyncReq-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.AdapterPatientDiscoveryAsyncReqError">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/AdapterPatientDiscoveryAsyncReqError-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.AdapterPatientDiscoveryAsyncResp">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/AdapterPatientDiscoveryAsyncResp-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.Admin-Distribution">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/Admin-Distribution-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.AuditLogsforDocQandDocR">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/AuditLogsforDocQandDocR-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.DocQueryAdditionalStoredQueries">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/DocQueryAdditionalStoredQueries-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.DocQueryFanoutTestTarget">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/DocQueryFanoutTestTarget-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.DocQueryOnDemand">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/DocQueryOnDemand-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.DocQueryRetrieveSelfTest">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/DocQueryRetrieveSelfTest-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.DocQuerytestsforUDDI">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/DocQuerytestsforUDDI-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.DocQueryXDSErrors">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/DocQueryXDSErrors-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.DocRegistryAndRepository">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/DocRegistryAndRepository-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.DocumentRetrieveXDSErrorRegression">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/DocumentRetrieveXDSErrorRegression-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.EntityDocQuery">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/EntityDocQuery-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.EntityDocRetrieve">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/EntityDocRetrieve-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.EntityPolicyEngineTest">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/EntityPolicyEngineTest-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.EntitySendingXDRAsyncReqTests">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/EntitySendingXDRAsyncReqTests-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.EntitySendingXDRAsyncResponseTests">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/EntitySendingXDRAsyncResponseTests-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.EntityXDRTests">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/EntityXDRTests-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.Fanout-Test">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/Fanout-Test-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.HIEMPatientCentricUDDItests">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/HIEMPatientCentricUDDItests-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.HIEMTestsforUDDI">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/HIEMTestsforUDDI-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.NHINCPatientDiscoveryMAA">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/NHINCPatientDiscoveryMAA-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.NhincPolicyEngineTest">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/NhincPolicyEngineTest-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.NHINCReceivingXDRAsyncRequestTests">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/NHINCReceivingXDRAsyncRequestTests-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.PatientCorrelation">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/PatientCorrelation-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.PolicyEngineInteractions">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/PolicyEngineInteractions-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.QueryByState">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/QueryByState-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.XDRAdapterTests">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/XDRAdapterTests-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.XDRAsyncRequestInbound-Tests">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/XDRAsyncRequestInbound-Tests-soapui-project.xml" />
                </exec>
                <exec executable="${soapui.bin}/${soapui.executable}" vmlauncher="false" failonerror="false" failifexecutionfails="true" resultproperty="soapui.result.XDRAsyncRequestOutbound-Tests">
                    <env key="NHINC_PROPERTIES_DIR" value="${glassfish.home}/domains/domain1/config/nhin" />
                    <arg line="-j -a -f ${regression.test.results.basedir}/g0 -t ${soapui.settings.file} -r ${basedir}/RegressionSuite/XDRAsyncRequestOutbound-Tests-soapui-project.xml" />
                </exec>
                <antcall target="stop.glassfish" />
                <condition property="regression.failures.detected">
                    <or>
                        <not>
                            <equals arg1="${soapui.result.AdapterPatientDiscoveryAsyncReq-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.AdapterPatientDiscoveryAsyncReqError-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.AdapterPatientDiscoveryAsyncResp-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.Admin-Distribution-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.AuditLogsforDocQandDocR-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.DocQueryAdditionalStoredQueries-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.DocQueryFanoutTestTarget-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.DocQueryOnDemand-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.DocQueryRetrieveSelfTest-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.DocQuerytestsforUDDI-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.DocQueryXDSErrors-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.DocRegistryAndRepository-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.DocumentRetrieveXDSErrorValidation-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.EntityDocQuery-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.EntityDocRetrieve-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.EntityPolicyEngineTest-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.EntitySendingXDRAsyncReqTests-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.EntitySendingXDRAsyncResponseTests-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.EntityXDRTests-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.Fanout-Test-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.HIEMPatientCentricUDDItests-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.HIEMTestsforUDDI-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.NHINCPatientDiscoveryMAA-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.NhincPolicyEngineTest-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.NHINCReceivingXDRAsyncRequestTests-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.NHINCRespGWReceiveDocRetrieveDefReqAtJavaImplAdapTest-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.NHINCRespGWReceiveDocRetrieveDefReqAtSecuredAdapTest-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.NHINCRespGWReceiveDocRetrieveDefReqAtUnsecuredAdapTest-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.NHINCRespGWReceiveDocRetrieveDefReqTest-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.PatientCorrelation-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.PD-Sync-entity-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.PolicyEngineInteractions-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.QueryByState-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.XDRAdapterTests-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.XDRAsyncRequestInbound-Tests-soapui-project.xml}" arg2="0" />
                        </not>
                        <not>
                            <equals arg1="${soapui.result.XDRAsyncRequestOutbound-Tests-soapui-project.xml}" arg2="0" />
                        </not>
                    </or>
                </condition>
            </then>
        </if>
    </target>

    <target name="stop.glassfish.if.is.present" if="glassfish.bin.is.present">
        <antcall target="stop.glassfish" />
    </target>

    <target name="stop.glassfish">
        <exec executable="${asadmin.executable}">
            <arg line="stop-domain domain1" />
        </exec>
    </target>

    <target name="start.glassfish">
        <ant antfile="${basedir}/deploy.xml" target="deploy.glassfish.start.server" dir="${basedir}">
            <property name="glassfish.home" value="${glassfish.home}" />
        </ant>
    </target>

</project>