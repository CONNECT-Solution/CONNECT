<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="nhinc.deployment" default="deploy">

    <dirname property="nhinc.deployment.basedir" file="${ant.file.nhinc.deployment}" />
    <property name="nhinc.deployment.thirdparty.dir" location="${nhinc.deployment.basedir}/../../ThirdParty" />
    <property name="nhinc.deployment.properties.dir"
        value="${nhinc.deployment.basedir}/../Production/Common/Properties/Dev" />
    <property name="deployment.config.home" value="${glassfish.home}/domains/domain1/config/nhin" />

    <import
        file="${nhinc.deployment.basedir}/../build/package/package.targets.xml" />

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <fileset dir="${nhinc.deployment.thirdparty.dir}/AntExtraLibs">
                <include name="ant-contrib-*.jar" />
            </fileset>
        </classpath>
    </taskdef>

    <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask">
        <classpath>
            <fileset dir="${nhinc.deployment.thirdparty.dir}/AntExtraLibs">
                <include name="xmltask-*.jar" />
            </fileset>
        </classpath>
    </taskdef>

    <import file="settings.xml" />

    <target name="-deploy.setup.init" description="Set up the OS version">
        <tstamp>
            <format property="start.time" pattern="MM/dd/yyyy hh:mm aa" />
        </tstamp>
        <condition property="windows">
            <os family="windows" />
        </condition>
        <condition property="unix">
            <os family="unix" />
        </condition>
    </target>

    <target name="-deploy.set.env" depends="-deploy.setup.init" />

    <!-- These properties should be defined in project build.xml files: <property
        name="deploy.type" value="ejb" description="options:['war', 'ejb', 'shared']"
        /> -->

    <target name="-deploy.create.glassfish.password.file" unless="deploy.glassfish.password.file.path">
        <tempfile prefix="glassfish" property="deploy.glassfish.password.file.path"
            destdir="${java.io.tmpdir}" deleteonexit="true" />
        <echo
            message="AS_ADMIN_PASSWORD=${deployment.glassfish.server.admin.password}"
            file="${deploy.glassfish.password.file.path}" />
        <echo
            message="deploy.glassfish.password.file.path: ${deploy.glassfish.password.file.path}" />
    </target>

    <target name="deploy">
        <antcall target="deploy.to.production" />
    </target>

    <target name="undeploy">
        <antcall target="undeploy.from.production" />
    </target>

    <target name="deploy.to.production">
        <runtarget target="deploy.glassfish.stop.server" />
        <if>
            <not>
                <isset property="just.deploy" />
            </not>
            <then>
                <runtarget target="deploy.nhinc.configuration.to.glassfish" />
                <runtarget target="deploy.nhinc.interfaces.to.glassfish" />
            </then>
        </if>
        <runtarget target="delete.common.jars" />
        <runtarget target="deploy.thirdparty.libs" />
        <runtarget target="deploy.shared.libs.to.glassfish" />
        <runtarget target="deploy.glassfish.start.server" />

        <runtarget target="deploy.ears.to.glassfish" />

        <!-- runtarget target="deploy.wars.to.glassfish" / -->
        <runtarget target="deploy.ejbs.to.glassfish" />
        <run-validationsuite-mod jarfile="SetValidationSuiteWsdlPath.jar" />
        <if>
            <isset property="stop.glassfish.after.deploy" />
            <then>
                <runtarget target="deploy.glassfish.stop.server" />
            </then>
        </if>
    </target>

    <target name="deploy.thirdparty.libs">
        <copy todir="${glassfish.home}/domains/domain1/lib" overwrite="true"
            flatten="true">
            <fileset dir="${nhinc.deployment.thirdparty.dir}">
                <include name="C3PO/*.jar" />
                <include name="log4j/*.jar" />
                <include name="HibernateLibraries/*.jar" />
                <include name="MySQLDB/*.jar" />
                <include name="XStream/*.jar" />
                <include name="XStream/*.txt" />
                <include name="SpringFramework/*.jar" />
                <include name="Xerces/*.jar" />
                <include name="OpenSSO/*.jar" />
                <include name="CXF/*.jar" />
            </fileset>
        </copy>
        <delete file="${glassfish.home}/domains/domain1/lib/asm-3.3.1.jar" />
    </target>

    <target name="deploy.shared.libs.to.glassfish">
        <var name="target" value="deploy.shared.lib.to.glassfish" />
        <runtarget target="target.to.call.on.shared.libs" />
    </target>

    <target name="undeploy.shared.libs.from.glassfish">
        <var name="target" value="undeploy.shared.lib.from.glassfish" />
        <runtarget target="target.to.call.on.shared.libs" />
    </target>

    <target name="delete.common.jars">
        <if>
            <available
                file="${glassfish.home}/domains/domain1/lib/CONNECTCommonTypesLib.jar"
                type="file" />
            <then>
                <delete>
                    <fileset dir="${glassfish.home}/domains/domain1/lib"
                        includes="CONNECT*.jar" />
                </delete>
            </then>
        </if>
        <if>
            <available
                file="${glassfish.home}/domains/domain1/lib/NhincCommonTypesLib.jar"
                type="file" />
            <then>
                <delete>
                    <fileset dir="${glassfish.home}/domains/domain1/lib"
                        includes="Nhinc*.jar" />
                </delete>
            </then>
        </if>
    </target>

    <target name="undeploy.from.production">
        <runtarget target="deploy.glassfish.start.server" />

        <runtarget target="undeploy.ears.from.glassfish" />
        <!-- runtarget target="undeploy.wars.from.glassfish" / -->
        <runtarget target="undeploy.ejbs.from.glassfish" />

        <runtarget target="deploy.glassfish.stop.server" />
        <runtarget target="undeploy.shared.libs.from.glassfish" />
    </target>

    <target name="-deploy.init">
        <condition property="win">
            <and>
                <os family="Windows" />
            </and>
        </condition>
    </target>

    <target name="-deploy.glassfish.asadmin" depends="-deploy.create.glassfish.password.file">
        <condition property="ASADMIN" value="${glassfish.home}/bin/asadmin">
            <os family="Unix" />
        </condition>
        <condition property="ASADMIN" value="${glassfish.home}/bin/asadmin.bat">
            <os family="Windows" />
        </condition>
        <property name="deploy.glassfish.password.file.path"
            value="${glassfish.home}/domains/${deployment.glassfish.domain.name}/config/domain-passwords" />
    </target>

    <target name="deploy.glassfish.start.server"
        depends="-deploy.init,-deploy.glassfish.start.server.win,-deploy.glassfish.start.server.notwin">
        <echo message="Appserver is starting up ... please wait" />
    </target>

    <target name="-deploy.glassfish.start.server.win" depends="-deploy.glassfish.asadmin"
        if="win">
        <exec dir="${glassfish.home}/bin" executable="cmd.exe" spawn="false"
            os="${os.name}" failonerror="true">
            <arg
                line="/c asadmin.bat --user ${deployment.glassfish.server.username} --passwordfile ${deploy.glassfish.password.file.path} start-domain ${deployment.glassfish.domain.name}" />
        </exec>
        <sleep minutes="1" />
    </target>

    <target name="-deploy.glassfish.start.server.notwin" depends="-deploy.glassfish.asadmin"
        unless="win">
        <exec executable="${ASADMIN}">
            <arg
                line="--user ${deployment.glassfish.server.username} --passwordfile ${deploy.glassfish.password.file.path} start-domain ${deployment.glassfish.domain.name}" />
        </exec>
    </target>

    <target name="deploy.glassfish.stop.server" depends="-deploy.glassfish.asadmin">
        <exec executable="${ASADMIN}">
            <arg
                line="--user ${deployment.glassfish.server.username} --passwordfile ${deploy.glassfish.password.file.path} stop-domain ${deployment.glassfish.domain.name}" />
        </exec>
    </target>

    <target name="deploy.ejbs.to.glassfish">
        <var name="target" value="deploy.ejb.to.glassfish" />
        <runtarget target="target.to.call.on.ejbs" />
    </target>

    <target name="undeploy.ejbs.from.glassfish">
        <var name="target" value="undeploy.ejb.from.glassfish" />
        <runtarget target="target.to.call.on.ejbs" />
    </target>

    <target name="target.to.call.on.ejbs">
        <xmltask source="${deploy.application.list.file.path}">
            <call path="/applications/ejbs/ejb">
                <param name="ejb.name" path="name/text()" />
                <param name="should.deploy" path="should.deploy/text()" />
                <actions>
                    <if>
                        <istrue value="@{should.deploy}" />
                        <then>
                            <if>
                                <not>
                                    <isset property="deploy.exclude.ejb.@{ejb.name}" />
                                </not>
                                <then>
                                    <echo message="ejb '@{ejb.name}' will be deployed." />
                                    <var name="deployment.glassfish.ejb.file.path" value="${deployment.binaries.dir}/@{ejb.name}.jar" />
                                    <var name="deployment.glassfish.ejb.name" value="@{ejb.name}" />
                                    <runtarget target="${target}" />
                                </then>
                                <else>
                                    <echo message="ejb '@{ejb.name}' will not be deployed." />
                                </else>
                            </if>
                        </then>
                        <else>
                            <echo message="ejb '@{ejb.name}' will not be deployed." />
                        </else>
                    </if>
                </actions>
            </call>
        </xmltask>
    </target>

    <target name="deploy.ears.to.glassfish"
        description="creates a classpath for all required jar|war files and packages them in ear">
        <!-- clear deployment directory -->
        <if>
            <available file=".ant-deploy-staging" type="dir" />
            <then>
                <delete dir=".ant-deploy-staging" />
            </then>
        </if>
        <!-- delete old ear file -->
        <if>
            <available file=".ant-deploy-ear/CONNECT.ear" />
            <then>
                <delete file=".ant-deploy-ear/CONNECT.ear" />
            </then>
        </if>


        <mkdir dir=".ant-deploy-staging" />
        <!-- copy blank application.xml to deployment dir/META-INF -->
        <mkdir dir=".ant-deploy-staging/META-INF" />
        <copy tofile=".ant-deploy-staging/META-INF/application.xml" file="application.template.xml" />
        <property name="cxf.home" location="${nhinc.deployment.thirdparty.dir}/CXF" />
        <property name="spring.home"
            location="${nhinc.deployment.thirdparty.dir}/SpringFramework" />
        <property name="opensaml.home" location="${nhinc.deployment.thirdparty.dir}/openSAML" />
        <path id="ear.libs">
            <fileset dir="${cxf.home}">
                <include name="cxf-2.6.0.jar" />
                <include name="commons-logging-1.1.1.jar" />
                <include name="neethi-3.0.2.jar" />
                <include name="xmlschema-core-2.0.2.jar" />
                <include name="wsdl4j-1.6.2.jar" />
                <include name="asm-3.3.1.jar" />
                <include name="aopalliance-1.0.jar" />
                <include name="spring-beans-3.0.7.RELEASE.jar" />
                <include name="spring-context-3.0.7.RELEASE.jar" />
                <include name="spring-core-3.0.7.RELEASE.jar" />
                <include name="FastInfoset-1.2.9.jar" />
                <include name="xalan-2.7.1.jar" />
                <include name="serializer-2.7.1.jar" />
                <include name="wss4j-1.6.5.jar" />
                <include name="xmlsec-1.5.1.jar" />
                <include name="ehcache-core-2.5.1.jar" />
                <include name="joda-time-1.6.2.jar" />
                <include name="opensaml-2.5.1-1.jar" />
                <include name="openws-1.4.2-1.jar" />
                <include name="xmltooling-1.3.2-1.jar" />
                <include name="spring-expression-3.0.7.RELEASE.jar" />
                <include name="slf4j-jdk14-1.6.2.jar" />
                <include name="velocity-1.7.jar" />
                <include name="commons-lang-2.6.jar" />
                <include name="commons-collections-3.2.1.jar" />
            </fileset>
            <filelist dir="${opensaml.home}">
                <file name="slf4j-api-1.6.4.jar" />
                <file name="esapi-2.0.1.jar" />
            </filelist>
            <filelist dir="${spring.home}">
                <file name="spring.jar" />
            </filelist>
            <filelist dir="${deployment.binaries.dir}">
                <file name="CONNECTCoreLib.jar" />
                <file name="CONNECTCommonTypesLib.jar" />
            </filelist>
        </path>

        <copy todir=".ant-deploy-staging" flatten="true" overwrite="true">
            <path refid="ear.libs" />
        </copy>

        <!-- Update application.xml with web modules -->
        <xmltask source="${basedir}/projects.xml">
            <call path="/projects/project">
                <param name="project.name" path="name/text()" />
                <param name="project.directory" path="directory/text()" />
                <param name="should.deploy" path="should.deploy/text()" />
                <param name="context.root" path="context.root/text()" />
                <param name="dist.type" path="dist.type/text()" />
                <actions>
                    <if>
                        <istrue value="@{should.deploy}" />
                        <then>
                            <var name="project.war" value="@{project.name}.war" />
                            <echo>**** copy: ${project.war} </echo>
                            <mkdir dir=".ant-deploy-staging" />
                            <copy todir=".ant-deploy-staging" flatten="true" overwrite="true">
                                <fileset dir="${deployment.binaries.dir}">
                                    <include name="${project.war}" />
                                </fileset>
                            </copy>

                            <replace file=".ant-deploy-staging/META-INF/application.xml">
                                <replacetoken><![CDATA[</application>]]></replacetoken>
                                <replacevalue><![CDATA[    <module><web><web-uri>@{project.name}.war</web-uri>
                                  <context-root>@{context.root}</context-root></web></module>
</application>]]></replacevalue>
                            </replace>
                        </then>
                    </if>
                </actions>
            </call>
        </xmltask>

        <!-- create ear file -->
        <mkdir dir=".ant-deploy-ear" />

        <var name="dist.type" value="ear" />
        <var name="dist.file" value="CONNECT.ear" />
        <if>
            <not>
                <isset property="build.dist.meta-inf.dir" />
            </not>
            <then>
                <property name="build.dist.meta-inf.dir" value="META-INF" />
            </then>
        </if>
        <if>
            <not>
                <isset property="build.dist.manifest.file" />
            </not>
            <then>
                <property name="build.dist.manifest.file" value="${build.dist.meta-inf.dir}/MANIFEST.MF" />
            </then>
        </if>
        <antcall target="-package.recreate" />

        <!-- Call deploy to glassfish target -->
        <var name="deployment.glassfish.ear.file.path" value=".ant-deploy-ear/CONNECT.ear" />
        <antcall target="deploy.ear.to.glassfish" />

    </target>

    <target name="deploy.ear.to.glassfish"
        depends="-deploy.create.glassfish.password.file, -deploy.glassfish.asadmin">
        <echo>--passwordfile ${deploy.glassfish.password.file.path} --port
            ${deployment.glassfish.admin.port} --host
            ${deployment.glassfish.server} --user
            ${deployment.glassfish.server.username} deploy --force
            ${deployment.glassfish.ear.file.path}</echo>
        <exec executable="${ASADMIN}" failonerror="true">
            <env key="AS_ADMIN_READTIMEOUT" value="1200000" />
            <arg
                line="--passwordfile ${deploy.glassfish.password.file.path} deploy --force ${deployment.glassfish.ear.file.path}" />
        </exec>
    </target>

    <target name="deploy.wars.to.glassfish">
        <var name="target" value="deploy.war.to.glassfish" />
        <runtarget target="target.to.call.on.wars" />
    </target>

    <target name="undeploy.wars.from.glassfish">
        <var name="target" value="undeploy.war.from.glassfish" />
        <runtarget target="target.to.call.on.wars" />
    </target>

    <target name="target.to.call.on.wars">
        <xmltask source="${deploy.application.list.file.path}">
            <call path="/applications/wars/war">
                <param name="war.name" path="name/text()" />
                <param name="should.deploy" path="should.deploy/text()" />
                <actions>
                    <if>
                        <istrue value="@{should.deploy}" />
                        <then>
                            <if>
                                <not>
                                    <isset property="deploy.exclude.war.@{war.name}" />
                                </not>
                                <then>
                                    <echo message="war '@{war.name}' will be deployed." />
                                    <if>
                                        <istrue value="${source.install}" />
                                        <then>
                                            <propertycopy override="true"
                                                name="deployment.glassfish.war.file.path" from="project.@{war.name}.dist.file" />
                                        </then>
                                        <else>
                                            <var name="deployment.glassfish.war.file.path" value="${deployment.binaries.dir}/@{war.name}.war" />
                                        </else>
                                    </if>
                                    <var name="deployment.glassfish.war.name" value="@{war.name}" />
                                    <runtarget target="${target}" />
                                </then>
                                <else>
                                    <echo message="war '@{war.name}' will not be deployed." />
                                </else>
                            </if>
                        </then>
                        <else>
                            <echo message="war '@{war.name}' will not be deployed." />
                        </else>
                    </if>
                </actions>
            </call>
        </xmltask>
    </target>

    <target name="target.to.call.on.shared.libs">
        <xmltask source="${deploy.application.list.file.path}">
            <call path="/applications/shared/lib">
                <param name="shared.name" path="name/text()" />
                <param name="should.deploy" path="should.deploy/text()" />
                <actions>
                    <if>
                        <istrue value="@{should.deploy}" />
                        <then>
                            <if>
                                <not>
                                    <isset property="deploy.exclude.lib.@{shared.name}" />
                                </not>
                                <then>
                                    <echo message="shared lib '@{shared.name}' will be deployed." />
                                    <if>
                                        <istrue value="${source.install}" />
                                        <then>
                                            <propertycopy override="true"
                                                name="deployment.glassfish.shared.lib.file.path" from="project.@{shared.name}.dist.file" />
                                        </then>
                                        <else>
                                            <var name="deployment.glassfish.shared.lib.file.path"
                                                value="${deployment.binaries.dir}/@{shared.name}.jar" />
                                        </else>
                                    </if>
                                    <runtarget target="${target}" />
                                </then>
                                <else>
                                    <echo message="shared lib '@{shared.name}' will not be deployed." />
                                </else>
                            </if>
                        </then>
                        <else>
                            <echo message="shared lib '@{shared.name}' will not be deployed." />
                        </else>
                    </if>
                </actions>
            </call>
        </xmltask>
    </target>

    <target name="deploy.executables">
        <var name="target" value="deploy.executable" />
        <runtarget target="target.to.call.on.executables" />
    </target>

    <target name="target.to.call.on.executables">
        <xmltask source="${deploy.application.list.file.path}">
            <call path="/applications/execs/executable">
                <param name="shared.name" path="name/text()" />
                <param name="should.deploy" path="should.deploy/text()" />
                <actions>
                    <if>
                        <istrue value="@{should.deploy}" />
                        <then>
                            <if>
                                <not>
                                    <isset property="deploy.exclude.lib.@{shared.name}" />
                                </not>
                                <then>
                                    <echo message="executable '@{shared.name}' will be deployed." />
                                    <var name="deployment.executable.file.path" value="${deployment.binaries.dir}/@{shared.name}.jar" />
                                    <runtarget target="${target}" />
                                </then>
                                <else>
                                    <echo message="executable '@{shared.name}' will not be deployed." />
                                </else>
                            </if>
                        </then>
                        <else>
                            <echo message="executable '@{shared.name}' will not be deployed." />
                        </else>
                    </if>
                </actions>
            </call>
        </xmltask>
    </target>

    <target name="copy.artifacts.to.development">
        <mkdir dir="${deployment.binaries.dir}" />
        <copy todir="${deployment.binaries.dir}" file="${dist.file}"
            overwrite="true" />
    </target>

    <target name="deploy.ejb.to.glassfish"
        depends="-deploy.create.glassfish.password.file, -deploy.glassfish.asadmin">
        <exec executable="${ASADMIN}" failonerror="true">
            <arg
                line="--passwordfile ${deploy.glassfish.password.file.path} --port ${deployment.glassfish.admin.port} --host ${deployment.glassfish.server} --user ${deployment.glassfish.server.username} deploy --force ${deployment.glassfish.ejb.file.path}" />
        </exec>
    </target>

    <target name="undeploy.ejb.from.glassfish"
        depends="-deploy.create.glassfish.password.file, -deploy.glassfish.asadmin">
        <exec executable="${ASADMIN}" failonerror="true">
            <arg
                line="--passwordfile ${deploy.glassfish.password.file.path} --port ${deployment.glassfish.admin.port} --host ${deployment.glassfish.server} --user ${deployment.glassfish.server.username} undeploy ${deployment.glassfish.ejb.name}" />
        </exec>
    </target>

    <target name="deploy.war.to.glassfish"
        depends="-deploy.create.glassfish.password.file, -deploy.glassfish.asadmin">
        <exec executable="${ASADMIN}" failonerror="true">
            <env key="AS_ADMIN_READTIMEOUT" value="1200000" />
            <arg
                line="--passwordfile ${deploy.glassfish.password.file.path} --port ${deployment.glassfish.admin.port} --host ${deployment.glassfish.server} --user ${deployment.glassfish.server.username} deploy --force ${deployment.glassfish.war.file.path}" />
        </exec>
    </target>

    <target name="undeploy.war.from.glassfish"
        depends="-deploy.create.glassfish.password.file, -deploy.glassfish.asadmin">
        <exec executable="${ASADMIN}" failonerror="true">
            <arg
                line="--passwordfile ${deploy.glassfish.password.file.path} --port ${deployment.glassfish.admin.port} --host ${deployment.glassfish.server} --user ${deployment.glassfish.server.username} undeploy ${deployment.glassfish.war.name}" />
        </exec>
    </target>

    <target name="deploy.shared.lib.to.glassfish">
        <copy file="${deployment.glassfish.shared.lib.file.path}" todir="${glassfish.home}/domains/domain1/lib"
            overwrite="true" />
    </target>

    <target name="undeploy.shared.lib.from.glassfish">
        <basename property="deployment.glassfish.shared.lib.file.name"
            file="${deployment.glassfish.shared.lib.file.path}" />
        <delete
            file="${glassfish.home}/domains/domain1/lib/${deployment.glassfish.shared.lib.file.name}" />
    </target>

    <target name="deploy.executable">
        <mkdir dir="${deployment.executables.home}" />
        <copy file="${deployment.executable.file.path}" todir="deployment.executables.home"
            overwrite="true" />
    </target>

    <target name="-delete.glassfish.domain" depends="-deploy.glassfish.asadmin"
        unless="win">
        <if>
            <available file="${deployment.glassfish.domain.home}" type="dir" />
            <then>
                <runtarget target="deploy.glassfish.stop.server" />
                <exec executable="${ASADMIN}">
                    <arg line="delete-domain ${deployment.glassfish.domain.name}" />
                </exec>
            </then>
        </if>
    </target>

    <target name="-create.glassfish.domain"
        depends="-deploy.set.env,-deploy.create.glassfish.password.file, -deploy.glassfish.asadmin">
        <propertyregex property="deploy.glassfish.domain.template"
            input="${deployment.domain.template.file.path}" regexp="\\" replace="/"
            defaultValue="${deployment.domain.template.file.path}" />
        <property name="deploy.glassfish.domain.template.path"
            location="${deploy.glassfish.domain.template}" />
        <exec executable="${ASADMIN}" failonerror="true">
            <arg
               line="--echo --passwordfile '${deploy.glassfish.password.file.path}' --user ${deployment.glassfish.server.username} create-domain --template '${deploy.glassfish.domain.template.path}' --adminport ${deployment.glassfish.admin.port} --savemasterpassword=true ${deployment.glassfish.domain.name}" />
        </exec>
    </target>

    <target name="-backup.glassfish.domain.configuration">
        <if>
            <istrue value="${deployment.restore.configuration}" />
            <then>
                <copy todir="${deployment.dir}/backup" verbose="true"
                    overwrite="true" failonerror="false">
                    <filelist dir="${deployment.glassfish.domain.config.home}">
                        <file name="log4j.properties" />
                        <file name="mpi.xml" />
                    </filelist>
                </copy>
            </then>
        </if>
    </target>

    <target name="-backup.glassfish.domain.certificates">
        <copy todir="${deployment.certificate.home}" verbose="true"
            overwrite="true">
            <fileset dir="${deployment.glassfish.domain.config.home}"
                erroronmissingdir="false">
                <include name="*.jks" />
                <include name="*.db" />
                <include name="*.cfg" />
            </fileset>
        </copy>
    </target>

    <target name="-configure.glassfish.domain">
        <copy todir="${deployment.glassfish.domain.config.home}" verbose="true"
            overwrite="false">
            <filelist dir="${nhinc.deployment.properties.dir}">
                <file name="log4j.properties" />
                <file name="mpi.xml" />
            </filelist>
        </copy>

        <if>
            <istrue value="${deployment.restore.configuration}" />
            <then>
                <runtarget target="-restore.glassfish.domain.configuration" />
            </then>
        </if>
    </target>

    <target name="-restore.glassfish.domain.configuration">
        <copy todir="${deployment.glassfish.domain.config.home}" verbose="true"
            overwrite="true">
            <filelist dir="${deployment.dir}/backup">
                <file name="log4j.properties" />
                <file name="mpi.xml" />
            </filelist>
        </copy>
    </target>

    <target name="deploy.nhinc.configuration.to.glassfish">
        <copy todir="${deployment.config.home}" verbose="true" overwrite="true">
            <fileset dir="${nhinc.deployment.properties.dir}" />
        </copy>
    </target>

    <target name="deploy.nhinc.interfaces.to.glassfish">
        <copy todir="${deployment.glassfish.domain.config.home}/nhin"
            verbose="true" overwrite="true">
            <fileset dir="${deployment.interfaces.dir}" />
        </copy>
    </target>

    <target name="-restore.glassfish.domain.certificates">
        <if>
            <available file="${deployment.certificate.home}/gateway.jks"
                type="file" />
            <then>
                <copy todir="${deployment.glassfish.domain.config.home}"
                    overwrite="true" verbose="true">
                    <fileset dir="${deployment.certificate.home}">
                        <include name="*.jks" />
                        <include name="*.db" />
                        <include name="*.cfg" />
                    </fileset>
                </copy>
            </then>
        </if>
    </target>

    <target name="-uncomment.domain.config">
        <if>
            <available file="${deployment.glassfish.domain.config.home}/domain.xml"
                type="file" />
            <then>
                <xmltask source="${deployment.glassfish.domain.config.home}/domain.xml"
                    dest="${deployment.glassfish.domain.config.home}/domain.xml"
                    preserveType="true">
                    <xmlcatalog id="dtds">
                        <dtd
                            publicId="-//Sun Microsystems Inc.//DTD Application Server 9.1 Domain//EN"
                            location="${glassfish.home}/domains/domain1/lib/dtds/sun-domain_1_3.dtd" />
                    </xmlcatalog>
                    <uncomment path="/domain/configs/config/java-config/comment()[1]" />
                </xmltask>
            </then>
        </if>
    </target>

    <target name="add.profiler.domain.config">
        <xmltask source="${deployment.glassfish.domain.config.home}/domain.xml"
            dest="${deployment.glassfish.domain.config.home}/domain.xml"
            preserveType="true" outputter="simple:3">
            <xmlcatalog id="dtds">
                <dtd
                    publicId="-//Sun Microsystems Inc.//DTD Application Server 9.1 Domain//EN"
                    location="${glassfish.home}/domains/domain1/lib/dtds/sun-domain_1_3.dtd" />
            </xmlcatalog>
            <insert path="/domain/configs/config/java-config/child::node()[1]"
                position="before">
                <![CDATA[
<profiler name="YourKit Java Profiler 9.0.2" enabled="true">
                <jvm-options>-agentpath:${profiler.executables.home}\bin\win32\yjpagent.dll=disablestacktelemetry,disableexceptiontelemetry,builtinprobes=none,delay=10000,sessionname=SunServer</jvm-options>
                <jvm-options>-Dcom.sun.enterprise.server.ss.ASQuickStartup=false</jvm-options>
            </profiler>
]]>
            </insert>
        </xmltask>
    </target>

    <target name="-verify.win.sw" if="windows">
        <if>
            <available file="${glassfish.home}/bin/asadmin.bat" type="file" />
            <then />
            <else>
                <fail
                    message="AS_HOME environment variable is not set.
            Please create AS_HOME environment variable  pointing to GlassFish Installation folder." />
            </else>
        </if>
    </target>

    <target name="-verify.nonwin.sw" if="unix">
        <if>
            <available file="${glassfish.home}/bin/asadmin.sh" type="file" />
            <then />
            <else>
                <fail
                    message="AS_HOME environment variable is not set.
              Please create AS_HOME environment variable  pointing to GlassFish Installation folder." />
            </else>
        </if>
    </target>

    <target name="verify.pre.req.software"
        depends="-deploy.setup.init,-verify.nonwin.sw, -verify.win.sw">
        <if>
            <available file="${env.JAVA_HOME}/bin/java.exe" type="file" />
            <then />
            <else>
                <fail
                    message="JAVA_HOME environment variable is not set.
            Please create JAVA_HOME environment variable pointing to JRE1.6.0.16" />
            </else>
        </if>
        <if>
            <available
                file="${glassfish.home}/domains/domain1/lib/webservices-rt_l10n.jar"
                type="file" />
            <then />
            <else>
                <fail
                    message="Metro is not installed.
            Please install Metro and try again." />
            </else>
        </if>
        <if>
            <available file="${glassfish.home}/domains/domain1/lib/c3p0-0.9.1.2.jar"
                type="file" />
            <then />
            <else>
                <fail
                    message="C3PO Jar file are missing. Please copy $NHINC_THIRDPARTY_DIR\C3PO\*.jar to AS_HOME\lib\." />
            </else>
        </if>
        <if>
            <available file="${glassfish.home}/domains/domain1/lib/log4j-1.2.15.jar"
                type="file" />
            <then />
            <else>
                <fail
                    message="log4j Jar files are missing. Please copy $NHINC_THIRDPARTY_DIR\log4j\*.jar to AS_HOME\lib\." />
            </else>
        </if>
        <if>
            <available file="${glassfish.home}/domains/domain1/lib/hibernate3.jar"
                type="file" />
            <then />
            <else>
                <fail
                    message="Hibernate Jar files are missing. Please copy $NHINC_THIRDPARTY_DIR\HibernateLibraries\*.jar to AS_HOME\lib\." />
            </else>
        </if>
        <if>
            <available
                file="${glassfish.home}/domains/domain1/lib/mysql-connector-java-5.1.8-bin.jar"
                type="file" />
            <then />
            <else>
                <fail
                    message="MYSQLDB Jar files are missing. Please copy $NHINC_THIRDPARTY_DIR\MYSQLDB\*.jar to AS_HOME\lib\." />
            </else>
        </if>
        <if>
            <available file="${glassfish.home}/domains/domain1/lib/xstream-1.3.jar"
                type="file" />
            <then />
            <else>
                <fail
                    message="XStream Jar files are missing. Please copy $NHINC_THIRDPARTY_DIR\XStream\*.jar to AS_HOME\lib\." />
            </else>
        </if>
        <if>
            <available file="${glassfish.home}/domains/domain1/lib/spring.jar"
                type="file" />
            <then />
            <else>
                <fail
                    message="SpringFramework Jar files are missing. Please copy $NHINC_THIRDPARTY_DIR\SpringFramework\*.jar to AS_HOME\lib\." />
            </else>
        </if>
        <if>
            <available file="${glassfish.home}/domains/domain1/lib/xercesImpl.jar"
                type="file" />
            <then />
            <else>
                <fail
                    message="Xerces Jar files are missing. Please copy $NHINC_THIRDPARTY_DIR\Xerces\*.jar to AS_HOME\lib\." />
            </else>
        </if>
    </target>

    <target name="recreate.glassfish.domain">
        <runtarget target="-backup.glassfish.domain.configuration" />
        <runtarget target="-backup.glassfish.domain.certificates" />
        <runtarget target="-delete.glassfish.domain" />
        <runtarget target="-create.glassfish.domain" />
        <runtarget target="-configure.glassfish.domain" />
        <runtarget target="-restore.glassfish.domain.certificates" />
        <runtarget target="-uncomment.domain.config" />


    </target>

    <macrodef name="run-validationsuite-mod">
        <attribute name="jarfile" />
        <sequential>
            <mkdir dir="${deployment.config.home}/master" />
            <copy todir="${deployment.config.home}/master" verbose="true"
                overwrite="true">
                <filelist dir="${nhinc.deployment.properties.dir}">
                    <file name="gateway.properties" />
                    <file name="adapter.properties" />
                    <file name="PCConfiguration.xml" />
                    <file name="internalConnectionInfo.xml" />
                    <file name="hiemTopicConfiguration.xml" />
                    <file name="XDSUniqueIds.properties" />
                </filelist>
            </copy>
            <java jar="${deployment.dir}/ValidationSuite/@{jarfile}" fork="true"
                dir="${deployment.dir}/ValidationSuite">
                <sysproperty key="AS_HOME" value="${glassfish.home}" />
            </java>
        </sequential>
    </macrodef>

</project>
