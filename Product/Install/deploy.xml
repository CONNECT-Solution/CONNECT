<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="nhinc.deployment" default="deploy">

    <dirname property="nhinc.deployment.basedir" file="${ant.file.nhinc.deployment}" />
    <property name="nhinc.deployment.thirdparty.dir" location="${nhinc.deployment.basedir}/../../ThirdParty/ant" />
    <property name="nhinc.deployment.properties.dir"
        value="${nhinc.deployment.basedir}/../Production/Common/Properties/src/main/resources" />
    <property name="deployment.config.home" value="${glassfish.home}/domains/domain1/config/nhin" />

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <fileset dir="${nhinc.deployment.thirdparty.dir}/AntExtraLibs">
                <include name="ant-contrib-*.jar" />
            </fileset>
        </classpath>
    </taskdef>

    <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask">
        <classpath>
            <fileset dir="${nhinc.deployment.thirdparty.dir}/AntExtraLibs">
                <include name="xmltask-*.jar" />
            </fileset>
        </classpath>
    </taskdef>

    <import file="settings.xml" />

    <target name="-deploy.setup.init">
        <tstamp>
            <format property="start.time" pattern="MM/dd/yyyy hh:mm aa" />
        </tstamp>
        <condition property="windows">
            <os family="windows" />
        </condition>
        <condition property="unix">
            <os family="unix" />
        </condition>
    </target>

    <target name="-deploy.set.env" depends="-deploy.setup.init" />

    <!-- These properties should be defined in project build.xml files: <property
        name="deploy.type" value="ejb" description="options:['war', 'ejb', 'shared']"
        /> -->

    <target name="-deploy.create.glassfish.password.file" unless="deploy.glassfish.password.file.path">
        <tempfile prefix="glassfish" property="deploy.glassfish.password.file.path"
            destdir="${java.io.tmpdir}" deleteonexit="true" />
        <echo
            message="AS_ADMIN_PASSWORD=${deployment.glassfish.server.admin.password}"
            file="${deploy.glassfish.password.file.path}" />
        <echo
            message="deploy.glassfish.password.file.path: ${deploy.glassfish.password.file.path}" />
    </target>

    <target name="deploy">
        <antcall target="deploy.to.production" />
    </target>

    <target name="deploy.to.production">
        <runtarget target="deploy.glassfish.stop.server" />
        <if>
            <not>
                <isset property="just.deploy" />
            </not>
            <then>
                <runtarget target="deploy.nhinc.configuration.to.glassfish" />
                <runtarget target="deploy.nhinc.interfaces.to.glassfish" />
            </then>
        </if>
        <runtarget target="delete.common.jars" />
        <runtarget target="deploy.glassfish.start.server" />
        <runtarget target="deploy.ears.to.glassfish" />
        <if>
            <isset property="stop.glassfish.after.deploy" />
            <then>
                <runtarget target="deploy.glassfish.stop.server" />
            </then>
        </if>
    </target>

    <target name="delete.common.jars">
        <if>
            <available
                file="${glassfish.home}/domains/domain1/lib/CONNECTCommonTypesLib.jar"
                type="file" />
            <then>
                <delete>
                    <fileset dir="${glassfish.home}/domains/domain1/lib"
                        includes="CONNECT*.jar" />
                </delete>
            </then>
        </if>
        <if>
            <available
                file="${glassfish.home}/domains/domain1/lib/NhincCommonTypesLib.jar"
                type="file" />
            <then>
                <delete>
                    <fileset dir="${glassfish.home}/domains/domain1/lib"
                        includes="Nhinc*.jar" />
                </delete>
            </then>
        </if>
    </target>

    <target name="-deploy.init">
        <condition property="win">
            <and>
                <os family="Windows" />
            </and>
        </condition>
    </target>

    <target name="-deploy.glassfish.asadmin" depends="-deploy.create.glassfish.password.file">
        <condition property="ASADMIN" value="${glassfish.home}/bin/asadmin">
            <os family="Unix" />
        </condition>
        <condition property="ASADMIN" value="${glassfish.home}/bin/asadmin.bat">
            <os family="Windows" />
        </condition>
        <property name="deploy.glassfish.password.file.path"
            value="${glassfish.home}/domains/${deployment.glassfish.domain.name}/config/domain-passwords" />
    </target>

    <target name="deploy.glassfish.start.server"
        depends="-deploy.init,-deploy.glassfish.start.server.win,-deploy.glassfish.start.server.notwin">
        <echo message="Appserver is starting up ... please wait" />
    </target>

    <target name="-deploy.glassfish.start.server.win" depends="-deploy.glassfish.asadmin"
        if="win">
        <exec dir="${glassfish.home}/bin" executable="cmd.exe" spawn="false"
            os="${os.name}" failonerror="true">
            <arg
                line="/c asadmin.bat --user ${deployment.glassfish.server.username} --passwordfile ${deploy.glassfish.password.file.path} start-domain ${deployment.glassfish.domain.name}" />
        </exec>
        <sleep minutes="1" />
    </target>

    <target name="-deploy.glassfish.start.server.notwin" depends="-deploy.glassfish.asadmin"
        unless="win">
        <exec executable="${ASADMIN}">
            <arg
                line="--user ${deployment.glassfish.server.username} --passwordfile ${deploy.glassfish.password.file.path} start-domain ${deployment.glassfish.domain.name}" />
        </exec>
    </target>

    <target name="deploy.glassfish.stop.server" depends="-deploy.glassfish.asadmin">
        <exec executable="${ASADMIN}">
            <arg
                line="--user ${deployment.glassfish.server.username} --passwordfile ${deploy.glassfish.password.file.path} stop-domain ${deployment.glassfish.domain.name}" />
        </exec>
    </target>

    <target name="deploy.ears.to.glassfish"
        description="creates a classpath for all required jar|war files and packages them in ear">
        <!-- Call deploy to glassfish target -->
        <var name="deployment.glassfish.ear.file.path" value="${deployment.ear.file.path}" />
        <antcall target="deploy.ear.to.glassfish" />

    </target>

    <target name="deploy.ear.to.glassfish"
        depends="-deploy.create.glassfish.password.file, -deploy.glassfish.asadmin">
        <echo>--passwordfile ${deploy.glassfish.password.file.path} --port
            ${deployment.glassfish.admin.port} --host
            ${deployment.glassfish.server} --user
            ${deployment.glassfish.server.username} deploy --force
            ${deployment.glassfish.ear.file.path}</echo>
        <exec executable="${ASADMIN}" failonerror="true">
            <env key="AS_ADMIN_READTIMEOUT" value="1200000" />
            <arg
                line="--passwordfile ${deploy.glassfish.password.file.path} deploy --force ${deployment.glassfish.ear.file.path}" />
        </exec>
    </target>

    <target name="copy.artifacts.to.development">
        <mkdir dir="${deployment.binaries.dir}" />
        <copy todir="${deployment.binaries.dir}" file="${dist.file}"
            overwrite="true" />
    </target>

    <target name="-delete.glassfish.domain" depends="-deploy.glassfish.asadmin"
        unless="win">
        <if>
            <available file="${deployment.glassfish.domain.home}" type="dir" />
            <then>
                <runtarget target="deploy.glassfish.stop.server" />
                <exec executable="${ASADMIN}">
                    <arg line="delete-domain ${deployment.glassfish.domain.name}" />
                </exec>
            </then>
        </if>
    </target>

    <target name="-create.glassfish.domain"
        depends="-deploy.set.env,-deploy.create.glassfish.password.file, -deploy.glassfish.asadmin">
        <propertyregex property="deploy.glassfish.domain.template"
            input="${deployment.domain.template.file.path}" regexp="\\" replace="/"
            defaultValue="${deployment.domain.template.file.path}" />
        <property name="deploy.glassfish.domain.template.path"
            location="${deploy.glassfish.domain.template}" />
        <exec executable="${ASADMIN}" failonerror="true">
            <arg
               line="--echo --passwordfile '${deploy.glassfish.password.file.path}' --user ${deployment.glassfish.server.username} create-domain --template '${deploy.glassfish.domain.template.path}' --adminport ${deployment.glassfish.admin.port} --savemasterpassword=true ${deployment.glassfish.domain.name}" />
        </exec>
    </target>

    <target name="-backup.glassfish.domain.configuration">
        <if>
            <istrue value="${deployment.restore.configuration}" />
            <then>
                <copy todir="${deployment.dir}/backup" verbose="true"
                    overwrite="true" failonerror="false">
                    <filelist dir="${deployment.glassfish.domain.config.home}">
                        <file name="log4j.properties" />
                        <file name="mpi.xml" />
                    </filelist>
                </copy>
            </then>
        </if>
    </target>

    <target name="-backup.glassfish.domain.certificates">
        <copy todir="${deployment.certificate.home}" verbose="true"
            overwrite="true">
            <fileset dir="${deployment.glassfish.domain.config.home}"
                erroronmissingdir="false">
                <include name="*.jks" />
                <include name="*.db" />
                <include name="*.cfg" />
            </fileset>
        </copy>
    </target>

    <target name="-configure.glassfish.domain">
        <copy todir="${deployment.glassfish.domain.config.home}" verbose="true"
            overwrite="false">
            <filelist dir="${nhinc.deployment.properties.dir}">
                <file name="log4j.properties" />
                <file name="mpi.xml" />
            </filelist>
        </copy>

        <if>
            <istrue value="${deployment.restore.configuration}" />
            <then>
                <runtarget target="-restore.glassfish.domain.configuration" />
            </then>
        </if>
    </target>

    <target name="-restore.glassfish.domain.configuration">
        <copy todir="${deployment.glassfish.domain.config.home}" verbose="true"
            overwrite="true">
            <filelist dir="${deployment.dir}/backup">
                <file name="log4j.properties" />
                <file name="mpi.xml" />
            </filelist>
        </copy>
    </target>

    <target name="deploy.nhinc.configuration.to.glassfish">
        <unjar dest="${deployment.config.home}" src="${config.nhin.dependency.file.path}"> </unjar>
	<copy file="${deployment.config.home}/smtp.agent.config.template.xml" tofile="${deployment.config.home}/smtp.agent.config.xml" filtering="yes" overwrite="yes">
	    <filterset>
	        <filter token="ANCHOR_STORE_JKS" value="${glassfish.install.dir}/glassfish/domains/domain1/config/${direct.anchor.store}.jks"/>
	        <filter token="PUBLIC_STORE_JKS" value="${glassfish.install.dir}/glassfish/domains/domain1/config/${direct.trust.store}.jks"/>
	        <filter token="PRIVATE_STORE_JKS" value="${glassfish.install.dir}/glassfish/domains/domain1/config/${direct.key.store}.jks"/>
	    </filterset>
	</copy>
    </target>

    <target name="deploy.nhinc.interfaces.to.glassfish">
        <!--<copy todir="${deployment.glassfish.domain.config.home}/nhin"
            verbose="true" overwrite="true">
            <fileset dir="${deployment.interfaces.dir}" />
        </copy>-->
    </target>

    <target name="-restore.glassfish.domain.certificates">
        <if>
            <available file="${deployment.certificate.home}/gateway.jks"
                type="file" />
            <then>
                <copy todir="${deployment.glassfish.domain.config.home}"
                    overwrite="true" verbose="true">
                    <fileset dir="${deployment.certificate.home}">
                        <include name="*.jks" />
                        <include name="*.db" />
                        <include name="*.cfg" />
                    </fileset>
                </copy>
            </then>
        </if>
    </target>

    <target name="-uncomment.domain.config">
        <if>
            <available file="${deployment.glassfish.domain.config.home}/domain.xml"
                type="file" />
            <then>
                <xmltask source="${deployment.glassfish.domain.config.home}/domain.xml"
                    dest="${deployment.glassfish.domain.config.home}/domain.xml"
                    preserveType="true">
                    <xmlcatalog id="dtds">
                        <dtd
                            publicId="-//Sun Microsystems Inc.//DTD Application Server 9.1 Domain//EN"
                            location="${glassfish.home}/domains/domain1/lib/dtds/sun-domain_1_3.dtd" />
                    </xmlcatalog>
                    <uncomment path="/domain/configs/config/java-config/comment()[1]" />
                </xmltask>
            </then>
        </if>
    </target>

<target name="-verify.win.sw" if="windows">
    <if>
        <available file="${glassfish.home}/bin/asadmin.bat" type="file" />
        <then />
        <else>
            <fail
                    message="AS_HOME environment variable is not set.
            Please create AS_HOME environment variable  pointing to GlassFish Installation folder." />
        </else>
    </if>
</target>

<target name="-verify.nonwin.sw" if="unix">
    <if>
        <available file="${glassfish.home}/bin/asadmin.sh" type="file" />
        <then />
        <else>
            <fail
                    message="AS_HOME environment variable is not set.
              Please create AS_HOME environment variable  pointing to GlassFish Installation folder." />
        </else>
    </if>
</target>

<target name="verify.pre.req.software"
        depends="-deploy.setup.init,-verify.nonwin.sw, -verify.win.sw">
    <if>
        <available file="${env.JAVA_HOME}/bin/java.exe" type="file" />
        <then />
        <else>
            <fail
                    message="JAVA_HOME environment variable is not set.
            Please create JAVA_HOME environment variable pointing to JRE1.6.0.16" />
        </else>
    </if>
    <if>
        <available
                file="${glassfish.home}/domains/domain1/lib/webservices-rt_l10n.jar"
                type="file" />
        <then />
        <else>
            <fail
                    message="Metro is not installed.
            Please install Metro and try again." />
        </else>
    </if>
    <if>
        <available file="${glassfish.home}/domains/domain1/lib/log4j-1.2.15.jar"
                type="file" />
        <then />
        <else>
            <fail
                    message="log4j Jar files are missing. Please copy $NHINC_THIRDPARTY_DIR\log4j\*.jar to AS_HOME\lib\." />
        </else>
    </if>
    <if>
        <available file="${glassfish.home}/domains/domain1/lib/hibernate3.jar"
                type="file" />
        <then />
        <else>
            <fail
                    message="Hibernate Jar files are missing. Please copy $NHINC_THIRDPARTY_DIR\HibernateLibraries\*.jar to AS_HOME\lib\." />
        </else>
    </if>
    <if>
        <available
                file="${glassfish.home}/domains/domain1/lib/mysql-connector-java-5.1.8-bin.jar"
                type="file" />
        <then />
        <else>
            <fail
                    message="MYSQLDB Jar files are missing. Please copy $NHINC_THIRDPARTY_DIR\MYSQLDB\*.jar to AS_HOME\lib\." />
        </else>
    </if>
    <if>
        <available file="${glassfish.home}/domains/domain1/lib/xstream-1.3.jar"
                type="file" />
        <then />
        <else>
            <fail
                    message="XStream Jar files are missing. Please copy $NHINC_THIRDPARTY_DIR\XStream\*.jar to AS_HOME\lib\." />
        </else>
    </if>
    <if>
        <available file="${glassfish.home}/domains/domain1/lib/spring.jar"
                type="file" />
        <then />
        <else>
            <fail
                    message="SpringFramework Jar files are missing. Please copy $NHINC_THIRDPARTY_DIR\SpringFramework\*.jar to AS_HOME\lib\." />
        </else>
    </if>
    <if>
        <available file="${glassfish.home}/domains/domain1/lib/xercesImpl.jar"
                type="file" />
        <then />
        <else>
            <fail
                    message="Xerces Jar files are missing. Please copy $NHINC_THIRDPARTY_DIR\Xerces\*.jar to AS_HOME\lib\." />
        </else>
    </if>
</target>

<target name="recreate.glassfish.domain">
    <runtarget target="-backup.glassfish.domain.configuration" />
    <runtarget target="-backup.glassfish.domain.certificates" />
    <runtarget target="-delete.glassfish.domain" />
    <runtarget target="-create.glassfish.domain" />
    <runtarget target="-configure.glassfish.domain" />
    <runtarget target="-restore.glassfish.domain.certificates" />
    <runtarget target="-uncomment.domain.config" />


</target>

</project>
