/*
 * Copyright (c) 2009-2017, United States Government, as represented by the Secretary of Health and Human Services.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above
 *       copyright notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the documentation
 *       and/or other materials provided with the distribution.
 *     * Neither the name of the United States Government nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE UNITED STATES GOVERNMENT BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package gov.hhs.fha.nhinc.policyengine.adapter.pip;

import gov.hhs.fha.nhinc.common.nhinccommonadapter.PatientPreferencesType;
import gov.hhs.fha.nhinc.nhinclib.NhincConstants;
import gov.hhs.fha.nhinc.properties.PropertyAccessor;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.xml.bind.JAXBElement;
import org.hl7.v3.ADExplicit;
import org.hl7.v3.ActClassClinicalDocument;
import org.hl7.v3.AdxpExplicitCity;
import org.hl7.v3.AdxpExplicitCountry;
import org.hl7.v3.AdxpExplicitPostalCode;
import org.hl7.v3.AdxpExplicitState;
import org.hl7.v3.AdxpExplicitStreetAddressLine;
import org.hl7.v3.CE;
import org.hl7.v3.CS;
import org.hl7.v3.EnExplicitFamily;
import org.hl7.v3.EnExplicitGiven;
import org.hl7.v3.EnExplicitPrefix;
import org.hl7.v3.EnExplicitSuffix;
import org.hl7.v3.II;
import org.hl7.v3.IVLTSExplicit;
import org.hl7.v3.IVXBTSExplicit;
import org.hl7.v3.ONExplicit;
import org.hl7.v3.PNExplicit;
import org.hl7.v3.POCDMT000040Author;
import org.hl7.v3.POCDMT000040ClinicalDocument;
import org.hl7.v3.POCDMT000040Patient;
import org.hl7.v3.POCDMT000040PatientRole;
import org.hl7.v3.SCExplicit;
import org.jmock.Mockery;
import org.jmock.integration.junit4.JMock;
import org.jmock.integration.junit4.JUnit4Mockery;
import org.junit.After;
import org.junit.AfterClass;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;

/**
 * This class is used to test the CdaPdfCreator class.
 *
 * @author Les Westberg
 */
@Ignore
// Refactor or move this test to Integration test suite
@RunWith(JMock.class)
public class CdaPdfCreatorTest {
    Mockery context = new JUnit4Mockery();

    private static final String HL7_DATE_ONLY_FORMAT = "yyyyMMdd";
    private static final SimpleDateFormat oHL7DateOnlyFormatter = new SimpleDateFormat(HL7_DATE_ONLY_FORMAT);
    private static final String HL7_DATE_TIME_FORMAT = "yyyyMMddHHmmssZ";
    private static final SimpleDateFormat oHL7DateTimeFormatter = new SimpleDateFormat(HL7_DATE_TIME_FORMAT);

    private static String PT_PREF_PART1 = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>"
            + "<PatientPreferences xmlns:ns16=\"urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0\" xmlns=\"urn:gov:hhs:fha:nhinc:common:nhinccommonadapter\" xmlns:ns17=\"http://nhinc.services.com/schema/auditmessage\" xmlns:ns14=\"urn:oasis:names:tc:xacml:2.0:policy:schema:os\" xmlns:ns15=\"urn:gov:hhs:fha:nhinc:common:subscriptionb2overridefordocuments\" xmlns:ns9=\"http://www.hhs.gov/healthit/nhin/cdc\" xmlns:ns5=\"urn:ihe:iti:xds-b:2007\" xmlns:ns12=\"http://docs.oasis-open.org/wsn/t-1\" xmlns:ns6=\"urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0\" xmlns:ns13=\"urn:oasis:names:tc:xacml:2.0:context:schema:os\" xmlns:ns7=\"http://www.w3.org/2005/08/addressing\" xmlns:ns10=\"urn:gov:hhs:fha:nhinc:common:subscriptionb2overrideforcdc\" xmlns:ns8=\"http://docs.oasis-open.org/wsn/b-2\" xmlns:ns11=\"http://docs.oasis-open.org/wsrf/bf-2\" xmlns:ns2=\"urn:gov:hhs:fha:nhinc:common:nhinccommon\" xmlns:ns4=\"urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0\" xmlns:ns3=\"urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0\">"
            + "	<patientId>1111</patientId>"
            + "       <assigningAuthority>1.1</assigningAuthority>"
            + "	<optIn>true</optIn>"
            + "	<binaryDocumentPolicyCriteria>"
            + "		<binaryDocumentPolicyCriterion>"
            + "                       <documentUniqueId>20.200.1.1</documentUniqueId>"
            + "			<documentTypeCode>"
            + "				<ns2:code>34133-9</ns2:code>"
            + "				<ns2:codeSystem>2.16.840.1.113883.6.1</ns2:codeSystem>"
            + "				<ns2:codeSystemName>LOINC</ns2:codeSystemName>"
            + "				<ns2:displayName>SUMMARIZATION OF EPISODE NOTE</ns2:displayName>"
            + "			</documentTypeCode>"
            + "			<documentTitle>Good Health Clinic Care Record Summary</documentTitle>"
            + "			<effectiveTime>20050329204411-0700</effectiveTime>"
            + "			<confidentialityCode>"
            + "				<ns2:code>N</ns2:code>"
            + "				<ns2:codeSystem>2.16.840.1.113883.5.25</ns2:codeSystem>"
            + "			</confidentialityCode>"
            + "			<patientInfo>"
            + "				<name>"
            + "					<ns2:familyName>Ross</ns2:familyName>"
            + "					<ns2:givenName>Ellen</ns2:givenName>"
            + "					<ns2:prefix>Mrs.</ns2:prefix>"
            + "				</name>"
            + "				<addr>"
            + "					<ns2:address>"
            + "						<ns2:city>Blue Bell</ns2:city>"
            + "						<ns2:country>USA</ns2:country>"
            + "						<ns2:state>MA</ns2:state>"
            + "						<ns2:streetAddress>17 Daws Rd.</ns2:streetAddress>"
            + "						<ns2:zipCode>02368</ns2:zipCode>"
            + "					</ns2:address>"
            + "				</addr>"
            + "				<gender>"
            + "					<ns2:code>F</ns2:code>"
            + "					<ns2:codeSystem>2.16.840.1.113883.5.1</ns2:codeSystem>"
            + "				</gender>"
            + "				<birthTime>19600127</birthTime>"
            + "			</patientInfo>"
            + "			<authorOriginal>"
            + "				<authorTime>19990522</authorTime>"
            + "				<authorIdAssigningAuthority>1.3.5.35.1.4436.7</authorIdAssigningAuthority>"
            + "				<authorId>11111111</authorId>"
            + "				<name>"
            + "					<ns2:familyName>Wiseman</ns2:familyName>"
            + "					<ns2:givenName>Bernard</ns2:givenName>"
            + "					<ns2:prefix>Dr.</ns2:prefix>"
            + "					<ns2:suffix>Sr.</ns2:suffix>"
            + "				</name>"
            + "				<representedOrganizationIdAssigningAuthority>1.3.5.35.1.4436.7</representedOrganizationIdAssigningAuthority>"
            + "				<representedOrganizationId>aaaaabbbbb</representedOrganizationId>"
            + "				<representedOrganizationName>Dr. Wiseman\"s Clinic</representedOrganizationName>"
            + "			</authorOriginal>"
            + "			<authorScanner>"
            + "				<authorTime>20050329204411-0700</authorTime>"
            + "				<authorIdAssigningAuthority>1.3.6.4.1.4.1.2835.2.1234</authorIdAssigningAuthority>"
            + "				<authoringDevice>"
            + "					<ns2:code>CAPTURE</ns2:code>"
            + "					<ns2:codeSystem>1.2.840.10008.2.16.4</ns2:codeSystem>"
            + "					<ns2:displayName>Image Capture</ns2:displayName>"
            + "				</authoringDevice>"
            + "				<deviceManufactureModelName>SOME SCANNER NAME AND MODEL </deviceManufactureModelName>"
            + "				<deviceSoftwareName>SCAN SOFTWARE NAME v0.0</deviceSoftwareName>"
            + "				<representedOrganizationIdAssigningAuthority>1.3.6.4.1.4.1.2835.2</representedOrganizationIdAssigningAuthority>"
            + "				<representedOrganizationName>SOME Scanning Facility</representedOrganizationName>"
            + "				<representedOrganizationAddress>"
            + "					<ns2:city>Burlington</ns2:city>"
            + "					<ns2:country>USA</ns2:country>"
            + "					<ns2:state>MA</ns2:state>"
            + "					<ns2:streetAddress>21 North Ave</ns2:streetAddress>"
            + "					<ns2:zipCode>01803</ns2:zipCode>"
            + "				</representedOrganizationAddress>"
            + "			</authorScanner>"
            + "			<dataEnterer>"
            + "				<dataEntererTime>20050329204411-0700</dataEntererTime>"
            + "				<dataEntererIdAssigningAuthority>1.3.6.4.1.4.1.2835.2</dataEntererIdAssigningAuthority>"
            + "				<dataEntererId>22222222</dataEntererId>"
            + "				<name>"
            + "					<ns2:familyName>Smith</ns2:familyName>"
            + "					<ns2:givenName>Bernice</ns2:givenName>"
            + "					<ns2:prefix>Mrs.</ns2:prefix>"
            + "				</name>"
            + "			</dataEnterer>"
            + "			<custodian>"
            + "				<organizationIdAssigningAuthority>1.3.6.4.1.4.1.2835.2</organizationIdAssigningAuthority>"
            + "				<organizationName>SOME Scanning Facility</organizationName>"
            + "				<organizationAddress>"
            + "					<ns2:city>Burlington</ns2:city>"
            + "					<ns2:country>USA</ns2:country>"
            + "					<ns2:state>MA</ns2:state>"
            + "					<ns2:streetAddress>21 North Ave</ns2:streetAddress>"
            + "					<ns2:zipCode>01803</ns2:zipCode>"
            + "				</organizationAddress>"
            + "			</custodian>"
            + "			<legalAuthenticator>"
            + "				<authenticationTime>19990522</authenticationTime>"
            + "				<authenticatorIdAssigningAuthority>1.3.5.35.1.4436.7</authenticatorIdAssigningAuthority>"
            + "				<authenticatorId>11111111</authenticatorId>"
            + "				<signatureCode>"
            + "					<ns2:code>S</ns2:code>"
            + "				</signatureCode>"
            + "				<authenticatorPersonName>"
            + "					<ns2:familyName>Wiseman</ns2:familyName>"
            + "					<ns2:givenName>Bernard</ns2:givenName>"
            + "					<ns2:prefix>Dr.</ns2:prefix>"
            + "					<ns2:suffix>Sr.</ns2:suffix>"
            + "				</authenticatorPersonName>"
            + "			</legalAuthenticator>"
            + "			<startDate>19800127</startDate>"
            + "			<endDate>19990522</endDate>"
            + "			<mimeType>application/pdf</mimeType>"
            + "			<binaryDocument>";

    private static String PT_PREF_PART2 = "</binaryDocument>"
            + "		</binaryDocumentPolicyCriterion>"
            + "	</binaryDocumentPolicyCriteria>"
            + "	<fineGrainedPolicyMetadata/>" + "</PatientPreferences>";

    static String BINARY_DOC_PART1 = "";
    static String BINARY_DOC_PART2 = "";

    static PatientPreferencesType oPtPref = null;
    static String sHomeCommunity = "";

    /**
     * Default constructor.
     */
    public CdaPdfCreatorTest() {
    }

    @BeforeClass
    public static void setUpClass() throws Exception {
        PatientPreferencesSerializer oSerializer = new PatientPreferencesSerializer();
        oPtPref = oSerializer.deserialize(PT_PREF_PART1 + PT_PREF_PART2);

        // get Home Community ID for later comparisons.
        // ----------------------------------------------
        sHomeCommunity = PropertyAccessor.getInstance().getProperty(NhincConstants.GATEWAY_PROPERTY_FILE,
                NhincConstants.HOME_COMMUNITY_ID_PROPERTY);
    }

    @AfterClass
    public static void tearDownClass() throws Exception {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    /**
     * This method verifies that the date and time are the same.
     *
     * @param sMessage The message to output with the assert statement.
     * @param sExpectedDate The expected date and time.
     * @param sActualDate The actual date and time.
     */
    private void assertHL7DateTime(String sMessage, String sExpectedDate, String sActualDate) {
        Date dtActualDate = null;
        Date dtExpectedDate = null;
        try {
            dtActualDate = oHL7DateTimeFormatter.parse(sActualDate);
        } catch (Exception e) {
            fail("Failed to parse actual date.  Value: " + sActualDate);
        }

        try {
            dtExpectedDate = oHL7DateTimeFormatter.parse(sExpectedDate);
        } catch (Exception e) {
            fail("Failed to parse expected date.  Value: " + sExpectedDate);
        }

        assertEquals(sMessage + "...  Expected Value: " + sExpectedDate + "  Actual Value: " + sActualDate + ". ",
                dtExpectedDate, dtActualDate);

    }

    /**
     * This method verifies that the date and time are the same.
     *
     * @param sMessage The message to output with the assert statement.
     * @param sExpectedDate The expected date and time.
     * @param sActualDate The actual date and time.
     */
    private void assertHL7DateOnly(String sFieldName, String sExpectedDate, String sActualDate) {
        // Dates will only be in the first 8 characters. Ignore everything after that.
        // -----------------------------------------------------------------------------
        if ((sExpectedDate == null) && (sActualDate == null)) {
            return; // We are good - they are the same.
        }

        if (((sExpectedDate == null) && (sActualDate != null)) || ((sExpectedDate != null) && (sActualDate == null))) {
            fail(sFieldName + " was incorrect. Expected: " + sExpectedDate + "  But was: " + sActualDate);
        }

        if (sExpectedDate.length() < 8) {
            fail(sFieldName + " was incorrect. Expected date should have at least 8 characters.  Expected: "
                    + sExpectedDate + "  But was: " + sActualDate);
        }

        if (sActualDate.length() < 8) {
            fail(sFieldName + " was incorrect. Actual date should have at least 8 characters.  Expected: "
                    + sExpectedDate + "  But was: " + sActualDate);
        }

        // Now see if the first 8 characters of the expected are the same as the first 8 characters of the actual.
        // --------------------------------------------------------------------------------------------------------
        if (!(sExpectedDate.substring(0, 8).equals(sActualDate.substring(0, 8)))) {
            fail(sFieldName + " (date portion) was incorrect. Expected: " + sExpectedDate + "  But was: " + sActualDate);
        }

    }

    /**
     * This method asserts the value of an II data type.
     *
     * @param oII The II that is being asserted.
     * @param sFieldName The field name for the message.
     * @param sExtension The extension value.
     * @param sRoot The root value.
     */
    private void assertII(String sFieldName, II oII, String sRoot, String sExtension) {
        assertNotNull(sFieldName + " should not have been null.  ", oII);
        assertEquals(sFieldName + ".extension not correct: ", sExtension, oII.getExtension());
        assertEquals(sFieldName + ".root not correct: ", sRoot, oII.getRoot());
    }

    /**
     * This method asserts the value of an address.
     *
     * @param sFieldName The name of the field for the output message.
     * @param oAddr The address to be asserted.
     * @param sSreet The value of the street tag.
     * @param sCity The value of the city tag.
     * @param sState The value of the state tag.
     * @param sZipcode The value of the zip code tag.
     * @param sCountry The value of the country tag.
     */
    private void assertAddr(String sFieldName, ADExplicit oAddr, String sStreet, String sCity, String sState,
            String sZipcode, String sCountry) {
        // Check for the null or empty case...
        // ------------------------------------
        if ((sStreet == null) && (sCity == null) && (sState == null) && (sZipcode == null) && (sCountry == null)
                && ((oAddr == null) || (oAddr.getContent() == null) || (oAddr.getContent().isEmpty()))) {
            return; // We expected null and we got null.
        }

        assertNotNull(sFieldName + " should not have been null.  ", oAddr);
        assertTrue(sFieldName + ".content.size should have been > 0 but was: " + oAddr.getContent().size(), oAddr
                .getContent().size() > 0);
        boolean bFoundStreet = false;
        boolean bFoundCity = false;
        boolean bFoundState = false;
        boolean bFoundZipcode = false;
        boolean bFoundCountry = false;

        // Loop through and make a note of what we find.
        // -----------------------------------------------
        for (Serializable oSerialElement : oAddr.getContent()) {
            if (oSerialElement instanceof JAXBElement) {
                JAXBElement oJAXBElement = (JAXBElement) oSerialElement;

                if (oJAXBElement.getValue() != null) {
                    if (oJAXBElement.getValue() instanceof AdxpExplicitStreetAddressLine) {
                        AdxpExplicitStreetAddressLine oStreetAddressLine = (AdxpExplicitStreetAddressLine) oJAXBElement
                                .getValue();
                        assertEquals(sFieldName + ".streetAddressLine not correct.  ", sStreet,
                                oStreetAddressLine.getContent());
                        bFoundStreet = true;
                    } else if (oJAXBElement.getValue() instanceof AdxpExplicitCity) {
                        AdxpExplicitCity oCity = (AdxpExplicitCity) oJAXBElement.getValue();
                        assertEquals(sFieldName + ".city not correct.  ", sCity, oCity.getContent());
                        bFoundCity = true;
                    } else if (oJAXBElement.getValue() instanceof AdxpExplicitState) {
                        AdxpExplicitState oState = (AdxpExplicitState) oJAXBElement.getValue();
                        assertEquals(sFieldName + ".state not correct.  ", sState, oState.getContent());
                        bFoundState = true;
                    } else if (oJAXBElement.getValue() instanceof AdxpExplicitPostalCode) {
                        AdxpExplicitPostalCode oPostalCode = (AdxpExplicitPostalCode) oJAXBElement.getValue();
                        assertEquals(sFieldName + ".postalCode not correct.  ", sZipcode, oPostalCode.getContent());
                        bFoundZipcode = true;
                    } else if (oJAXBElement.getValue() instanceof AdxpExplicitCountry) {
                        AdxpExplicitCountry oCountry = (AdxpExplicitCountry) oJAXBElement.getValue();
                        assertEquals(sFieldName + ".country not correct.  ", sCountry, oCountry.getContent());
                        bFoundCountry = true;
                    } else {
                        fail(sFieldName + ": found an invalid type: Class was: "
                                + oJAXBElement.getValue().getClass().getName());
                    }
                } // if (oJAXBElement.getValue() != null)
                else {
                    fail(sFieldName + ": JAXBElement did not have a value.");
                }
            } // if (oSerialElement instanceof JAXBElement)
            else {
                fail(sFieldName + ": Found a serial element that was not a JAXBElement.  Class name was: "
                        + oSerialElement.getClass().getName());
            }
        } // for (Serializable oSerialElement : oAddr.getContent())

        // Now for any of the items we have that were not found - make sure we expected them to be null.
        // ----------------------------------------------------------------------------------------------
        if ((!bFoundStreet) && (sStreet != null)) {
            fail(sFieldName + ".streetAddressLine incorrect.  Expcted: " + sStreet + " Actual: null");
        }

        if ((!bFoundCity) && (sCity != null)) {
            fail(sFieldName + ".city incorrect.  Expcted: " + sCity + " Actual: null");
        }

        if ((!bFoundState) && (sState != null)) {
            fail(sFieldName + ".state incorrect.  Expcted: " + sState + " Actual: null");
        }

        if ((!bFoundZipcode) && (sZipcode != null)) {
            fail(sFieldName + ".postalCode incorrect.  Expcted: " + sZipcode + " Actual: null");
        }

        if ((!bFoundCountry) && (sCountry != null)) {
            fail(sFieldName + ".country incorrect.  Expcted: " + sCountry + " Actual: null");
        }

        // If we got here - we are in good shape.
        // ----------------------------------------

    }

    /**
     * Assert the id tag wihtin the cda.RecordTarget.patientRole.
     *
     * @param olII The list of IDs to assert.
     *
     */
    private void assertRecordTargetPatientRoleId(List<II> olII) {
        assertNotNull("cda.recordTarget[0].patientRole.id should not have been null.  ", olII);
        assertEquals("cda.recordTarget[0].patientRole.id.size not correct: ", 1, olII.size());
        assertII("cda.recordTarget[0].patientRole.id", olII.get(0), "1.1", "1111");
    }

    /**
     * Assert the addr tag wihtin the cda.RecordTarget.patientRole.
     *
     * @param olAD The list of addresses to assert.
     *
     */
    private void assertRecordTargetPatientRoleAddr(List<ADExplicit> olAD) {
        assertNotNull("cda.recordTarget[0].patientRole.addr should not have been null.  ", olAD);
        assertEquals("cda.recordTarget[0].patientRole.addr.size not correct: ", 1, olAD.size());
        assertAddr("cda.recordTarget[0].patientRole.addr", olAD.get(0), "17 Daws Rd.", "Blue Bell", "MA", "02368",
                "USA");
    }

    /**
     * This validates the parts of the name field.
     *
     * @param sFieldName The name of the field for the messages.
     * @param oName The name field containing the data.
     * @param sPrefix The expected prefix of the name.
     * @param sGiven The expectd given name.
     * @param sFamily The expected family name.
     * @param sSuffix The expected suffix.
     */
    private void assertName(String sFieldName, PNExplicit oName, String sPrefix, String sGiven, String sFamily,
            String sSuffix) {
        // Check for the null or empty case...
        // ------------------------------------
        if ((sPrefix == null) && (sGiven == null) && (sFamily == null) && (sSuffix == null)
                && ((oName == null) || (oName.getContent() == null) || (oName.getContent().isEmpty()))) {
            return; // We expected null and we got null.
        }

        assertNotNull(sFieldName + " should not have been null.  ", oName);
        assertTrue(sFieldName + ".content.size should have been > 0 but was: " + oName.getContent().size(), oName
                .getContent().size() > 0);
        boolean bFoundPrefix = false;
        boolean bFoundGiven = false;
        boolean bFoundFamily = false;
        boolean bFoundSuffix = false;

        // Loop through and make a note of what we find.
        // -----------------------------------------------
        for (Serializable oSerialElement : oName.getContent()) {
            if (oSerialElement instanceof JAXBElement) {
                JAXBElement oJAXBElement = (JAXBElement) oSerialElement;

                if (oJAXBElement.getValue() != null) {
                    if (oJAXBElement.getValue() instanceof EnExplicitPrefix) {
                        EnExplicitPrefix oPrefix = (EnExplicitPrefix) oJAXBElement.getValue();
                        assertEquals(sFieldName + ".prefix not correct.  ", sPrefix, oPrefix.getContent());
                        bFoundPrefix = true;
                    } else if (oJAXBElement.getValue() instanceof EnExplicitGiven) {
                        EnExplicitGiven oGiven = (EnExplicitGiven) oJAXBElement.getValue();
                        assertEquals(sFieldName + ".given not correct.  ", sGiven, oGiven.getContent());
                        bFoundGiven = true;
                    } else if (oJAXBElement.getValue() instanceof EnExplicitFamily) {
                        EnExplicitFamily oFamily = (EnExplicitFamily) oJAXBElement.getValue();
                        assertEquals(sFieldName + ".family not correct.  ", sFamily, oFamily.getContent());
                        bFoundFamily = true;
                    } else if (oJAXBElement.getValue() instanceof EnExplicitSuffix) {
                        EnExplicitSuffix oSuffix = (EnExplicitSuffix) oJAXBElement.getValue();
                        assertEquals(sFieldName + ".suffix not correct.  ", sSuffix, oSuffix.getContent());
                        bFoundSuffix = true;
                    } else {
                        fail(sFieldName + ": found an invalid type: Class was: "
                                + oJAXBElement.getValue().getClass().getName());
                    }
                } // if (oJAXBElement.getValue() != null)
                else {
                    fail(sFieldName + ": JAXBElement did not have a value.");
                }
            } // if (oSerialElement instanceof JAXBElement)
            else {
                fail(sFieldName + ": Found a serial element that was not a JAXBElement.  Class name was: "
                        + oSerialElement.getClass().getName());
            }
        } // for (Serializable oSerialElement : oAddr.getContent())

        // Now for any of the items we have that were not found - make sure we expected them to be null.
        // ----------------------------------------------------------------------------------------------
        if ((!bFoundPrefix) && (sPrefix != null)) {
            fail(sFieldName + ".prefix incorrect.  Expcted: " + sPrefix + " Actual: null");
        }

        if ((!bFoundGiven) && (sGiven != null)) {
            fail(sFieldName + ".given incorrect.  Expcted: " + sGiven + " Actual: null");
        }

        if ((!bFoundFamily) && (sFamily != null)) {
            fail(sFieldName + ".family incorrect.  Expcted: " + sFamily + " Actual: null");
        }

        if ((!bFoundSuffix) && (sSuffix != null)) {
            fail(sFieldName + ".suffix incorrect.  Expcted: " + sSuffix + " Actual: null");
        }

        // If we got here - we are in good shape.
        // ----------------------------------------

    }

    /**
     * Assert the given code has the correct values.
     *
     * @param sFieldName The name of the field being checked.
     * @param oCE The code to be checked.
     * @param sCode The expected code.
     * @param sDisplayName The expected display name.
     * @param sCodeSystem The expected code system.
     * @param sCodeSystemName The expected code system name.
     */
    private void assertCode(String sFieldName, CE oCE, String sCode, String sDisplayName, String sCodeSystem,
            String sCodeSystemName) {
        assertNotNull(sFieldName + " should not have been null. ", oCE);
        assertEquals(sFieldName + ".code incorrect: ", sCode, oCE.getCode());
        assertEquals(sFieldName + ".displayName incorect: ", sDisplayName, oCE.getDisplayName());
        assertEquals(sFieldName + ".codeSystem incorect: ", sCodeSystem, oCE.getCodeSystem());
        assertEquals(sFieldName + ".codeSystemName incorect: ", sCodeSystemName, oCE.getCodeSystemName());

    }

    /**
     * Assert the given CS (basically a code) has the correct values.
     *
     * @param sFieldName The name of the field being checked.
     * @param oCS The code to be checked.
     * @param sCode The expected code.
     * @param sDisplayName The expected display name.
     * @param sCodeSystem The expected code system.
     * @param sCodeSystemName The expected code system name.
     */
    private void assertCS(String sFieldName, CS oCS, String sCode, String sDisplayName, String sCodeSystem,
            String sCodeSystemName) {
        assertNotNull(sFieldName + " should not have been null. ", oCS);
        assertEquals(sFieldName + ".code incorrect: ", sCode, oCS.getCode());
        assertEquals(sFieldName + ".displayName incorect: ", sDisplayName, oCS.getDisplayName());
        assertEquals(sFieldName + ".codeSystem incorect: ", sCodeSystem, oCS.getCodeSystem());
        assertEquals(sFieldName + ".codeSystemName incorect: ", sCodeSystemName, oCS.getCodeSystemName());
    }

    /**
     * Assert the patient tag wihtin the cda.RecordTarget.patientRole.
     *
     * @param oPatient The patient information to be checked.
     *
     */
    private void assertRecordTargetPatientRolePatient(POCDMT000040Patient oPatient) {
        assertNotNull("cda.recordTarget[0].patientRole.patient should not have been null.  ", oPatient);
        assertNotNull("cda.recordTarget[0].patientRole.patient.name should not have been null.  ", oPatient.getName());
        assertEquals("cda.recordTarget[0].patientRole.patient.name.size incorrect.  ", 1, oPatient.getName().size());
        assertName("cda.recordTarget[0].patientRole.patient.name", oPatient.getName().get(0), "Mrs.", "Ellen", "Ross",
                null);

        assertCode("cda.recordTarget[0].patientRole.patient.administrativeGenderCode",
                oPatient.getAdministrativeGenderCode(), "F", null, "2.16.840.1.113883.5.1", null);

        assertNotNull("cda.recordTarget[0].patientRole.patient.birthTime should not have been null",
                oPatient.getBirthTime());
        assertNotNull("cda.recordTarget[0].patientRole.patient.birthTime.value should not have been null", oPatient
                .getBirthTime().getValue());
        assertHL7DateOnly("cda.recordTarget[0].patientRole.patient.birthTime", "19600127000000-0700", oPatient
                .getBirthTime().getValue());

    }

    /**
     * Assert the patient role tag within the Record target tag.
     *
     */
    private void assertRecordTargetPatientRole(POCDMT000040PatientRole oPatientRole) {
        assertNotNull("cda.recordTarget[0].patientRole should not have been null.  ", oPatientRole);

        assertRecordTargetPatientRoleId(oPatientRole.getId());
        assertRecordTargetPatientRoleAddr(oPatientRole.getAddr());
        assertRecordTargetPatientRolePatient(oPatientRole.getPatient());
    }

    /**
     * This is a helper class that will create the list of clinical documents by calling the CdaPdfCreator methods.
     *
     * @param oPtPref The patient preferences object to be converted.
     * @return The CDA document that came out of the transformation.
     */
    private POCDMT000040ClinicalDocument createTheCDADocs(PatientPreferencesType oPtPref) {
        CdaPdfCreator oCreator = new CdaPdfCreator();

        // Test Policy 1
        // --------------
        List<POCDMT000040ClinicalDocument> olCda = null;
        try {
            olCda = oCreator.createCDA(oPtPref);
        } catch (Exception e) {
            fail("Received unexpected exception while creating Cda.  Error: " + e.getMessage());
        }

        assertNotNull("List<Cda> was null.", olCda);
        assertEquals("Size of CDA should have been 0", 1, olCda.size());
        assertNotNull(olCda.get(0));

        return olCda.get(0);
    }

    /**
     * This checkes the ONExplicit object for single string containing the specified value.
     *
     * @param sFieldName The name of the field.
     * @param oHL7On The HL7 type being checked.
     * @param sExpectedName The expcted value.
     */
    private void assertONSimple(String sFieldName, ONExplicit oHL7On, String sExpectedName) {
        assertNotNull(sFieldName + " should not have been null.  ", oHL7On);
        assertNotNull(sFieldName + ".content should not have been null.  ", oHL7On.getContent());
        assertEquals(sFieldName + ".content.size incorrect.  ", 1, oHL7On.getContent().size());
        assertNotNull(sFieldName + ".content[0] should not have been null.  ", oHL7On.getContent().get(0));
        assertTrue(sFieldName + ".content[0] is incorrect class type - it should have been String but was: "
                + oHL7On.getClass().getName(), (oHL7On.getContent().get(0) instanceof String));
        String sValue = (String) oHL7On.getContent().get(0);
        assertEquals(sFieldName + ".content[0] incorrect.  ", sExpectedName, sValue);
    }

    /**
     * This checkes the SCExplicit object for single string containing the specified value.
     *
     * @param sFieldName The name of the field.
     * @param oHL7Sc The HL7 type being checked.
     * @param sExpectedName The expcted value.
     */
    private void assertSCSimple(String sFieldName, SCExplicit oHL7Sc, String sExpectedName) {
        assertNotNull(sFieldName + " should not have been null.  ", oHL7Sc);
        assertNotNull(sFieldName + ".content should not have been null.  ", oHL7Sc.getContent());
        assertEquals(sFieldName + ".content.size incorrect.  ", 1, oHL7Sc.getContent().size());
        assertNotNull(sFieldName + ".content[0] should not have been null.  ", oHL7Sc.getContent().get(0));
        assertTrue(sFieldName + ".content[0] is incorrect class type - it should have been String but was: "
                + oHL7Sc.getClass().getName(), (oHL7Sc.getContent().get(0) instanceof String));
        String sValue = (String) oHL7Sc.getContent().get(0);
        assertEquals(sFieldName + ".content[0] incorrect.  ", sExpectedName, sValue);
    }

    /**
     * Assert that the author (scanner) contained the correct values.
     *
     * @param oAuthor The object containing the author information.
     */
    private void assertAuthorScanner(POCDMT000040Author oAuthor) {
        assertNotNull("cda.author[].time should not have been null.  ", oAuthor.getTime());
        assertNotNull("cda.author[].time.value should not have been null.  ", oAuthor.getTime().getValue());
        assertHL7DateTime("cda.author[].time", "20050329204411-0700", oAuthor.getTime().getValue());

        assertNotNull("cda.author[].assignedAuthor should not have been null.  ", oAuthor.getAssignedAuthor());

        assertNotNull("cda.author[].assignedAuthor.id should not have been null.  ", oAuthor.getAssignedAuthor()
                .getId());
        assertEquals("cda.author[].assignedAuthor.id.size was incorrect.  ", 1, oAuthor.getAssignedAuthor().getId()
                .size());
        assertNotNull("cda.author[].assignedAuthor.id[0] should not have been null.  ", oAuthor.getAssignedAuthor()
                .getId().get(0));
        assertII("cda.author[].assignedAuthor.id[0]", oAuthor.getAssignedAuthor().getId().get(0),
                "1.3.6.4.1.4.1.2835.2.1234", null);

        assertNotNull("cda.author[].assignedAuthor.assignedAuthoringDevice should not have been null.  ", oAuthor
                .getAssignedAuthor().getAssignedAuthoringDevice());
        assertNotNull("cda.author[].assignedAuthor.assignedAuthoringDevice.code should not have been null.  ", oAuthor
                .getAssignedAuthor().getAssignedAuthoringDevice().getCode());
        assertCode("cda.author[].assignedAuthor.assignedAuthoringDevice.code", oAuthor.getAssignedAuthor()
                .getAssignedAuthoringDevice().getCode(), "CAPTURE", "Image Capture", "1.2.840.10008.2.16.4", null);

        assertNotNull(
                "cda.author[].assignedAuthor.assignedAuthoringDevice.manufacturerModelName should not have been null.  ",
                oAuthor.getAssignedAuthor().getAssignedAuthoringDevice().getManufacturerModelName());
        assertSCSimple("cda.author[].assignedAuthor.assignedAuthoringDevice.manufacturerModelName", oAuthor
                .getAssignedAuthor().getAssignedAuthoringDevice().getManufacturerModelName(),
                "SOME SCANNER NAME AND MODEL ");

        assertNotNull("cda.author[].assignedAuthor.assignedAuthoringDevice.softwareName should not have been null.  ",
                oAuthor.getAssignedAuthor().getAssignedAuthoringDevice().getSoftwareName());
        assertSCSimple("cda.author[].assignedAuthor.assignedAuthoringDevice.manufacturerModelName", oAuthor
                .getAssignedAuthor().getAssignedAuthoringDevice().getSoftwareName(), "SCAN SOFTWARE NAME v0.0");

        assertNotNull("cda.author[].assignedAuthor.representedOrganization should not have been null.  ", oAuthor
                .getAssignedAuthor().getRepresentedOrganization());
        assertNotNull("cda.author[].assignedAuthor.representedOrganization.id should not have been null.  ", oAuthor
                .getAssignedAuthor().getRepresentedOrganization().getId());
        assertEquals("cda.author[].assignedAuthor.representedOrganization.id.size incorrect.  ", 1, oAuthor
                .getAssignedAuthor().getRepresentedOrganization().getId().size());
        assertNotNull("cda.author[].assignedAuthor.representedOrganization.id[0] should not have been null.  ", oAuthor
                .getAssignedAuthor().getRepresentedOrganization().getId().get(0));
        assertII("cda.author[].assignedAuthor.representedOrganization.id[0]", oAuthor.getAssignedAuthor()
                .getRepresentedOrganization().getId().get(0), "1.3.6.4.1.4.1.2835.2", null);

        assertNotNull("cda.author[].assignedAuthor.representedOrganization.name should not have been null.  ", oAuthor
                .getAssignedAuthor().getRepresentedOrganization().getName());
        assertEquals("cda.author[].assignedAuthor.representedOrganization.name.size incorrect.  ", 1, oAuthor
                .getAssignedAuthor().getRepresentedOrganization().getName().size());
        assertNotNull("cda.author[].assignedAuthor.representedOrganization.name[0] incorrect.  ", oAuthor
                .getAssignedAuthor().getRepresentedOrganization().getName().get(0));
        assertONSimple("cda.author[].assignedAuthor.representedOrganization.name", oAuthor.getAssignedAuthor()
                .getRepresentedOrganization().getName().get(0), "SOME Scanning Facility");

        assertNotNull("cda.author[].assignedAuthor.representedOrganization.addr should not have been null.  ", oAuthor
                .getAssignedAuthor().getRepresentedOrganization().getAddr());
        assertEquals("cda.author[].assignedAuthor.representedOrganization.addr.size incorrect.  ", 1, oAuthor
                .getAssignedAuthor().getRepresentedOrganization().getAddr().size());
        assertNotNull("cda.author[].assignedAuthor.representedOrganization.addr[0] should not have been null.  ",
                oAuthor.getAssignedAuthor().getRepresentedOrganization().getAddr().get(0));
        assertAddr("", oAuthor.getAssignedAuthor().getRepresentedOrganization().getAddr().get(0), "21 North Ave",
                "Burlington", "MA", "01803", "USA");
    }

    /**
     * Assert that the author (original) contained the correct values.
     *
     * @param oAuthor The object containing the author information.
     */
    private void assertAuthorOriginal(POCDMT000040Author oAuthor) {
        assertNotNull("cda.author[].time should not have been null.  ", oAuthor.getTime());
        assertNotNull("cda.author[].time.value should not have been null.  ", oAuthor.getTime().getValue());
        assertHL7DateOnly("cda.author[].time", "19990522", oAuthor.getTime().getValue());

        assertNotNull("cda.author[].assignedAuthor should not have been null.  ", oAuthor.getAssignedAuthor());

        assertNotNull("cda.author[].assignedAuthor.id should not have been null.  ", oAuthor.getAssignedAuthor()
                .getId());
        assertEquals("cda.author[].assignedAuthor.id.size was incorrect.  ", 1, oAuthor.getAssignedAuthor().getId()
                .size());
        assertNotNull("cda.author[].assignedAuthor.id[0] should not have been null.  ", oAuthor.getAssignedAuthor()
                .getId().get(0));
        assertII("cda.author[].assignedAuthor.id[0]", oAuthor.getAssignedAuthor().getId().get(0), "1.3.5.35.1.4436.7",
                "11111111");

        assertNotNull("cda.author[].assignedAuthor.assignedPerson should not have been null.  ", oAuthor
                .getAssignedAuthor().getAssignedPerson());
        assertNotNull("cda.author[].assignedAuthor.assignedPerson.name should not have been null.  ", oAuthor
                .getAssignedAuthor().getAssignedPerson().getName());
        assertEquals("cda.author[].assignedAuthor.assignedPerson.name.size incorrect.  ", 1, oAuthor
                .getAssignedAuthor().getAssignedPerson().getName().size());
        assertNotNull("cda.author[].assignedAuthor.assignedPerson.name[0] should not have been null.  ", oAuthor
                .getAssignedAuthor().getAssignedPerson().getName().get(0));
        assertName("cda.author[].assignedAuthor.assignedPerson.name[0]", oAuthor.getAssignedAuthor()
                .getAssignedPerson().getName().get(0), "Dr.", "Bernard", "Wiseman", "Sr.");

        assertNotNull("cda.author[].assignedAuthor.representedOrganization should not have been null.  ", oAuthor
                .getAssignedAuthor().getRepresentedOrganization());
        assertNotNull("cda.author[].assignedAuthor.representedOrganization.id should not have been null.  ", oAuthor
                .getAssignedAuthor().getRepresentedOrganization().getId());
        assertEquals("cda.author[].assignedAuthor.representedOrganization.id.size incorrect.  ", 1, oAuthor
                .getAssignedAuthor().getRepresentedOrganization().getId().size());
        assertNotNull("cda.author[].assignedAuthor.representedOrganization.id[0] should not have been null.  ", oAuthor
                .getAssignedAuthor().getRepresentedOrganization().getId().get(0));
        assertII("cda.author[].assignedAuthor.representedOrganization.id[0]", oAuthor.getAssignedAuthor()
                .getRepresentedOrganization().getId().get(0), "1.3.5.35.1.4436.7", "aaaaabbbbb");

        assertNotNull("cda.author[].assignedAuthor.representedOrganization.name should not have been null.  ", oAuthor
                .getAssignedAuthor().getRepresentedOrganization().getName());
        assertEquals("cda.author[].assignedAuthor.representedOrganization.name.size incorrect.  ", 1, oAuthor
                .getAssignedAuthor().getRepresentedOrganization().getName().size());
        assertNotNull("cda.author[].assignedAuthor.representedOrganization.name[0] incorrect.  ", oAuthor
                .getAssignedAuthor().getRepresentedOrganization().getName().get(0));
        assertONSimple("cda.author[].assignedAuthor.representedOrganization.name", oAuthor.getAssignedAuthor()
                .getRepresentedOrganization().getName().get(0), "Dr. Wiseman\"s Clinic");
    }

    /**
     * Assert that the time interval is correct with precision only to the date.
     *
     * @param sFieldName The name of the field.
     * @param oTimeInterval The time interval that is being checked.
     * @param sExpectedLowValue The low date.
     * @param sExpectedHighValue The high date.
     */
    private void assertDateOnlyInterval(String sFieldName, IVLTSExplicit oTimeInterval, String sExpectedLowValue,
            String sExpectedHighValue) {
        assertNotNull(sFieldName + " should not have been null.", oTimeInterval);
        assertNotNull(sFieldName + ".content should not have been null.", oTimeInterval.getContent());
        assertEquals(sFieldName + ".content.size incorrect.", 2, oTimeInterval.getContent().size());

        for (JAXBElement oJaxbElement : oTimeInterval.getContent()) {
            // Start Time
            // ------------
            if ((oJaxbElement.getName() != null) && (oJaxbElement.getName().getLocalPart() != null)
                    && (oJaxbElement.getName().getLocalPart().equals("low")) && (oJaxbElement.getValue() != null)
                    && (oJaxbElement.getValue() instanceof IVXBTSExplicit)) {
                IVXBTSExplicit oHL7LowTime = (IVXBTSExplicit) oJaxbElement.getValue();
                assertHL7DateOnly(sFieldName + ".content[].low", sExpectedLowValue, oHL7LowTime.getValue());
            } // if ((oJaxbElement.getName() != null) &&
              // End Time
              // ------------
            else if ((oJaxbElement.getName() != null) && (oJaxbElement.getName().getLocalPart() != null)
                    && (oJaxbElement.getName().getLocalPart().equals("high")) && (oJaxbElement.getValue() != null)
                    && (oJaxbElement.getValue() instanceof IVXBTSExplicit)) {
                IVXBTSExplicit oHL7HighTime = (IVXBTSExplicit) oJaxbElement.getValue();
                assertHL7DateOnly(sFieldName + ".content[].high", sExpectedHighValue,
                        oHL7HighTime.getValue());
            } // else if ((oJaxbElement.getName() != null) &&
            else {
                fail(sFieldName + ".content[] contained an unknown object type.");
            }
        } // for (JAXBElement oJaxbElement :
          // oCda.getDocumentationOf().get(0).getServiceEvent().getEffectiveTime().getContent())
    }

    /**
     * Test out the Cda attribute fields: Class Code and Mood Code.
     *
     */
    @Test
    public void testCreateCdaAttributes() {
        POCDMT000040ClinicalDocument oCda = createTheCDADocs(oPtPref);

        assertEquals("Class Code incorrect: ", oCda.getClassCode(), ActClassClinicalDocument.DOCCLIN);

        assertNotNull("Mood code should not have been null.", oCda.getMoodCode());
        assertEquals("cda.moodCode - there should be only one of these: ", 1, oCda.getMoodCode().size());
        assertEquals("cda.moodCode incorrect: ", "EVN", oCda.getMoodCode().get(0));
    }

    /**
     * Tests the type ID tag to make sure that it has what was expected.
     *
     */
    @Test
    public void testTypeIdTag() {
        POCDMT000040ClinicalDocument oCda = createTheCDADocs(oPtPref);

        assertNotNull("cda.TypeId should not have been null.", oCda.getTypeId());
        assertEquals("cda.typeId.extension incorrect: ", "POCD_HD000040", oCda.getTypeId().getExtension());
        assertEquals("cda.typeId.root", "2.16.840.1.113883.1.3", oCda.getTypeId().getRoot());
    }

    /**
     * Tests the templateId tag to make sure that it has what was expected.
     *
     */
    @Test
    public void testTemplateIdTag() {
        POCDMT000040ClinicalDocument oCda = createTheCDADocs(oPtPref);

        assertNotNull("cda.templateId should not have been null. ", oCda.getTemplateId());
        assertEquals("cda.templateId - there should exactly one in the array. ", 1, oCda.getTemplateId().size());
        assertNotNull("cda.templateid[0] shouod not be null: ", oCda.getTemplateId().get(0));
        assertNull("cda.templateId.extension should have been null: ", oCda.getTemplateId().get(0).getExtension());
        assertEquals("cda.templateId.root", "1.3.6.1.4.1.19376.1.2.20", oCda.getTemplateId().get(0).getRoot());
    }

    /**
     * Tests the Id tag to make sure that it has what was expected.
     *
     */
    @Test
    public void testIdTag() {
        POCDMT000040ClinicalDocument oCda = createTheCDADocs(oPtPref);

        assertNotNull("cda.Id should not have been null. ", oCda.getId());
        assertEquals("cda.templateId.root", sHomeCommunity, oCda.getId().getRoot());
        assertEquals("cda.templateId.extension should have been null: ", "20.200.1.1", oCda.getId().getExtension());
    }

    /**
     * Tests the Code tag to make sure that it has what was expected.
     *
     */
    @Test
    public void testCodeTag() {
        POCDMT000040ClinicalDocument oCda = createTheCDADocs(oPtPref);

        assertNotNull("cda.code should not have been null. ", oCda.getCode());
        assertEquals("cda.code.code incorrect: ", "34133-9", oCda.getCode().getCode());
        assertEquals("cda.code.codeSystem incorect: ", "2.16.840.1.113883.6.1", oCda.getCode().getCodeSystem());
        assertEquals("cda.code.codeSystemName incorect: ", "LOINC", oCda.getCode().getCodeSystemName());
        assertEquals("cda.code.displayName incorect: ", "SUMMARIZATION OF EPISODE NOTE", oCda.getCode()
                .getDisplayName());
    }

    /**
     * Tests the title tag to make sure that it has what was expected.
     *
     */
    @Test
    public void testTitleTag() {
        POCDMT000040ClinicalDocument oCda = createTheCDADocs(oPtPref);

        assertNotNull("cda.title should not have been null. ", oCda.getTitle());
        assertNotNull("cda.title.content should not have been null.  ", oCda.getTitle().getContent());
        assertEquals("cda.title.content,size incorrect: ", 1, oCda.getTitle().getContent().size());
        assertEquals("cda.title incorrect: ", "Good Health Clinic Care Record Summary", oCda.getTitle()
                .getContent().get(0));
    }

    /**
     * Tests the effectiveTime tag.
     */
    @Test
    public void testEffectiveTimeTag() {
        POCDMT000040ClinicalDocument oCda = createTheCDADocs(oPtPref);

        assertNotNull("cda.effectiveTime should not have been null. ", oCda.getEffectiveTime());
        assertNotNull("cda.effectiveTime.value should not have been null.  ", oCda.getEffectiveTime().getValue());
        assertHL7DateTime("cda.effectiveTime.value incorrect", "20050329204411-0700", oCda.getEffectiveTime()
                .getValue());
    }

    /**
     * Tests the Confidentiality Code tag to make sure that it has what was expected.
     *
     */
    @Test
    public void testConfidentialityCodeTag() {
        POCDMT000040ClinicalDocument oCda = createTheCDADocs(oPtPref);

        assertNotNull("cda.confidentialityCode should not have been null. ", oCda.getConfidentialityCode());
        assertEquals("cda.confidentialityCode.code incorrect: ", "N", oCda.getConfidentialityCode().getCode());
        assertEquals("cda.confidentialityCode.codeSystem incorect: ", "2.16.840.1.113883.5.25", oCda
                .getConfidentialityCode().getCodeSystem());
        assertNull("cda.confidentialityCode.codeSystemName incorect: ", oCda.getConfidentialityCode()
                .getCodeSystemName());
        assertNull("cda.confidentialityCode.displayName incorect: ", oCda.getConfidentialityCode().getDisplayName());
    }

    /**
     * Tests the language code tag to make sure that it has what was expected.
     *
     */
    @Test
    public void testLanguageCodeTag() {
        POCDMT000040ClinicalDocument oCda = createTheCDADocs(oPtPref);

        assertNotNull("cda.languageCode should not have been null. ", oCda.getLanguageCode());
        assertEquals("cda.languageCode.code incorrect: ", "en-US", oCda.getLanguageCode().getCode());
        assertNull("cda.languageCode.codeSystem incorect: ", oCda.getLanguageCode().getCodeSystem());
        assertNull("cda.languageCode.codeSystemName incorect: ", oCda.getLanguageCode().getCodeSystemName());
        assertNull("cda.languageCode.displayName incorect: ", oCda.getLanguageCode().getDisplayName());
    }

    /**
     * Tests the record target tag to make sure that it has what was expected.
     *
     */
    @Test
    public void testRecordTargetTag() {
        POCDMT000040ClinicalDocument oCda = createTheCDADocs(oPtPref);

        assertNotNull("cda.recordTarget should not have been null. ", oCda.getRecordTarget());
        assertEquals("cda.recordTarget array size incorrect.  ", 1, oCda.getRecordTarget().size());
        assertNotNull("cda.recordTarget.get(0) should not have been null. ", oCda.getRecordTarget().get(0));
        assertRecordTargetPatientRole(oCda.getRecordTarget().get(0).getPatientRole());
    }

    /**
     * Tests the author tag to make sure that it has what was expected.
     *
     */
    @Test
    public void testAuthorTag() {
        POCDMT000040ClinicalDocument oCda = createTheCDADocs(oPtPref);

        assertNotNull("cda.author should not have been null. ", oCda.getAuthor());
        assertEquals("cda.author.size was incorrect. ", 2, oCda.getAuthor().size());

        // Check the first element in the list to see what type of author we have.
        // ------------------------------------------------------------------------

        int i = 0;
        for (POCDMT000040Author oHL7Author : oCda.getAuthor()) {
            assertNotNull("cda.author[" + i + "] should not have been null.  ", oHL7Author);
            assertNotNull("cda.author[" + i + "].templateId should not have been null.  ", oHL7Author.getTemplateId());
            assertEquals("cda.author[" + i + "].templateId.size incorrect.  ", 1, oHL7Author.getTemplateId().size());
            assertNotNull("cda.author[" + i + "].templateId[0] should not have been null.  ", oHL7Author
                    .getTemplateId().get(0));
            assertNotNull("cda.author[" + i + "].templateId[0].root should not have been null.  ", oHL7Author
                    .getTemplateId().get(0).getRoot());

            if ((oHL7Author.getTemplateId().get(0).getRoot().equals("1.3.6.1.4.1.19376.1.2.20.1"))) {
                assertAuthorOriginal(oHL7Author);
            } else if ((oHL7Author.getTemplateId().get(0).getRoot().equals("1.3.6.1.4.1.19376.1.2.20.2"))) {
                assertAuthorScanner(oHL7Author);
            } else {
                fail("cda.author[" + i + "].templateId[0].root contained an unepected value: "
                        + oHL7Author.getTemplateId().get(0).getRoot());
            }
            i++;

        } // for (POCDMT000040Author oHL7Author : oCda.getAuthor())
    }

    /**
     * Tests the data enterer tag to make sure that it has what was expected.
     *
     */
    @Test
    public void testDataEntererTag() {
        POCDMT000040ClinicalDocument oCda = createTheCDADocs(oPtPref);

        assertNotNull("cda.dataEnterer should not have been null. ", oCda.getDataEnterer());
        assertNotNull("cda.dataEnterer.templateId should not have been null. ", oCda.getDataEnterer().getTemplateId());
        assertEquals("cda.dataEnterer.templateId.size incorrect. ", 1, oCda.getDataEnterer().getTemplateId().size());
        assertNotNull("cda.dataEnterer.templateId[0] should not have been null. ", oCda.getDataEnterer()
                .getTemplateId().get(0));
        assertII("cda.dataEnterer.templateId[0]", oCda.getDataEnterer().getTemplateId().get(0),
                "1.3.6.1.4.1.19376.1.2.20.3", null);

        assertNotNull("cda.dataEnterer.time should not have been null. ", oCda.getDataEnterer().getTime());
        assertNotNull("cda.dataEnterer.time.value should not have been null. ", oCda.getDataEnterer().getTime()
                .getValue());
        assertHL7DateTime("cda.dataEnterer.time.value", "20050329204411-0700", oCda.getDataEnterer().getTime()
                .getValue());

        assertNotNull("cda.dataEnterer.assignedEntity should not have been null. ", oCda.getDataEnterer()
                .getAssignedEntity());
        assertNotNull("cda.dataEnterer.assignedEntity.id should not have been null. ", oCda.getDataEnterer()
                .getAssignedEntity().getId());
        assertEquals("cda.dataEnterer.assignedEntity.id.size incorrect. ", 1, oCda.getDataEnterer().getAssignedEntity()
                .getId().size());
        assertNotNull("cda.dataEnterer.assignedEntity.id[0] should not have been null. ", oCda.getDataEnterer()
                .getAssignedEntity().getId().get(0));
        assertII("cda.dataEnterer.assignedEntity.id[0]", oCda.getDataEnterer().getAssignedEntity().getId().get(0),
                "1.3.6.4.1.4.1.2835.2", "22222222");

        assertNotNull("cda.dataEnterer.assignedEntity.assignedPerson should not have been null. ", oCda
                .getDataEnterer().getAssignedEntity().getAssignedPerson());
        assertNotNull("cda.dataEnterer.assignedEntity.assignedPerson.name should not have been null. ", oCda
                .getDataEnterer().getAssignedEntity().getAssignedPerson().getName());
        assertEquals("cda.dataEnterer.assignedEntity.assignedPerson.name.size incorrect. ", 1, oCda.getDataEnterer()
                .getAssignedEntity().getAssignedPerson().getName().size());
        assertNotNull("cda.dataEnterer.assignedEntity.assignedPerson.name[0] should not have been null. ", oCda
                .getDataEnterer().getAssignedEntity().getAssignedPerson().getName().get(0));
        assertName("cda.dataEnterer.assignedEntity.assignedPerson.name[0]", oCda.getDataEnterer().getAssignedEntity()
                .getAssignedPerson().getName().get(0), "Mrs.", "Bernice", "Smith", null);

    }

    /**
     * Tests the Custodian tag to make sure that it has what was expected.
     *
     */
    @Test
    public void testCustodianTag() {
        POCDMT000040ClinicalDocument oCda = createTheCDADocs(oPtPref);

        assertNotNull("cda.custodian should not have been null. ", oCda.getCustodian());
        assertNotNull("cda.custodian.assignedCustodian should not have been null. ", oCda.getCustodian()
                .getAssignedCustodian());
        assertNotNull("cda.custodian.assignedCustodian.representedCustodianOrganization should not have been null. ",
                oCda.getCustodian().getAssignedCustodian().getRepresentedCustodianOrganization());

        assertNotNull(
                "cda.custodian.assignedCustodian.representedCustodianOrganization.id should not have been null. ", oCda
                        .getCustodian().getAssignedCustodian().getRepresentedCustodianOrganization().getId());
        assertEquals("cda.custodian.assignedCustodian.representedCustodianOrganization.id.size incorrect. ", 1, oCda
                .getCustodian().getAssignedCustodian().getRepresentedCustodianOrganization().getId().size());
        assertNotNull(
                "cda.custodian.assignedCustodian.representedCustodianOrganization.id[0] should not have been null. ",
                oCda.getCustodian().getAssignedCustodian().getRepresentedCustodianOrganization().getId().get(0));
        assertII("cda.custodian.assignedCustodian.representedCustodianOrganization.id[0]", oCda.getCustodian()
                .getAssignedCustodian().getRepresentedCustodianOrganization().getId().get(0), "1.3.6.4.1.4.1.2835.2",
                null);

        assertNotNull(
                "cda.custodian.assignedCustodian.representedCustodianOrganization.name should not have been null. ",
                oCda.getCustodian().getAssignedCustodian().getRepresentedCustodianOrganization().getName());
        assertONSimple("cda.custodian.assignedCustodian.representedCustodianOrganization.name", oCda.getCustodian()
                .getAssignedCustodian().getRepresentedCustodianOrganization().getName(), "SOME Scanning Facility");

        assertNotNull(
                "cda.custodian.assignedCustodian.representedCustodianOrganization.addr should not have been null. ",
                oCda.getCustodian().getAssignedCustodian().getRepresentedCustodianOrganization().getAddr());
        assertAddr("cda.custodian.assignedCustodian.representedCustodianOrganization.addr", oCda.getCustodian()
                .getAssignedCustodian().getRepresentedCustodianOrganization().getAddr(), "21 North Ave", "Burlington",
                "MA", "01803", "USA");

    }

    /**
     * Tests the Legal Authenticator tag to make sure that it has what was expected.
     *
     */
    @Test
    public void testLegalAuthenticatorTag() {
        POCDMT000040ClinicalDocument oCda = createTheCDADocs(oPtPref);

        assertNotNull("cda.legalAuthenticator should not have been null. ", oCda.getLegalAuthenticator());
        assertNotNull("cda.legalAuthenticator.time should not have been null. ", oCda.getLegalAuthenticator().getTime());
        assertNotNull("cda.legalAuthenticator.time.value should not have been null. ", oCda.getLegalAuthenticator()
                .getTime().getValue());
        assertHL7DateOnly("cda.legalAuthenticator.time.value", "19990522000000-0600", oCda.getLegalAuthenticator()
                .getTime().getValue());

        assertNotNull("cda.legalAuthenticator.signatureCode should not have been null. ", oCda.getLegalAuthenticator()
                .getSignatureCode());
        assertCS("", oCda.getLegalAuthenticator().getSignatureCode(), "S", null, null, null);

        assertNotNull("cda.legalAuthenticator.assignedEntity should not have been null. ", oCda.getLegalAuthenticator()
                .getAssignedEntity());
        assertNotNull("cda.legalAuthenticator.assignedEntity.id should not have been null. ", oCda
                .getLegalAuthenticator().getAssignedEntity().getId());
        assertEquals("cda.legalAuthenticator.assignedEntity.id.size incorrect. ", 1, oCda.getLegalAuthenticator()
                .getAssignedEntity().getId().size());
        assertNotNull("cda.legalAuthenticator.assignedEntity.id[0] should not have been null. ", oCda
                .getLegalAuthenticator().getAssignedEntity().getId().get(0));
        assertII("cda.legalAuthenticator.assignedEntity.id[0]", oCda.getLegalAuthenticator().getAssignedEntity()
                .getId().get(0), "1.3.5.35.1.4436.7", "11111111");

        assertNotNull("cda.legalAuthenticator.assignedEntity.assignedPerson should not have been null. ", oCda
                .getLegalAuthenticator().getAssignedEntity().getAssignedPerson());
        assertNotNull("cda.legalAuthenticator.assignedEntity.assignedPerson.name should not have been null. ", oCda
                .getLegalAuthenticator().getAssignedEntity().getAssignedPerson().getName());
        assertEquals("cda.legalAuthenticator.assignedEntity.assignedPerson.name.size incorrect. ", 1, oCda
                .getLegalAuthenticator().getAssignedEntity().getAssignedPerson().getName().size());
        assertNotNull("cda.legalAuthenticator.assignedEntity.assignedPerson.name[0] should not have been null. ", oCda
                .getLegalAuthenticator().getAssignedEntity().getAssignedPerson().getName().get(0));
        assertName("cda.legalAuthenticator.assignedEntity.assignedPerson.name[0]", oCda.getLegalAuthenticator()
                .getAssignedEntity().getAssignedPerson().getName().get(0), "Dr.", "Bernard", "Wiseman", "Sr.");

    }

    /**
     * Tests the Documentation Of tag to make sure that it has what was expected.
     *
     */
    @Test
    public void testDocumentationOfTag() {
        POCDMT000040ClinicalDocument oCda = createTheCDADocs(oPtPref);

        assertNotNull("cda.documentationOf should not have been null. ", oCda.getDocumentationOf());
        assertEquals("cda.documentationOf.size incorrect. ", 1, oCda.getDocumentationOf().size());
        assertNotNull("cda.documentationOf[0] should not have been null. ", oCda.getDocumentationOf().get(0));

        assertNotNull("cda.documentationOf[0].typeCode should not have been null. ", oCda.getDocumentationOf().get(0)
                .getTypeCode());
        assertEquals("cda.documentationOf[0].typeCode.size incorrect. ", 1, oCda.getDocumentationOf().get(0)
                .getTypeCode().size());
        assertEquals("cda.documentationOf[0].typeCode[0] incorrect. ", "DOC", oCda.getDocumentationOf().get(0)
                .getTypeCode().get(0));

        assertNotNull("cda.documentationOf[0].serviceEvent should not have been null. ",
                oCda.getDocumentationOf().get(0).getServiceEvent());

        assertNotNull("cda.documentationOf[0].serviceEvent.moodCode should not have been null. ", oCda
                .getDocumentationOf().get(0).getServiceEvent().getMoodCode());
        assertEquals("cda.documentationOf[0].serviceEvent.moodCode.size incorrect. ", 1,
                oCda.getDocumentationOf().get(0).getServiceEvent().getMoodCode().size());
        assertNotNull("cda.documentationOf[0].serviceEvent.moodCode[0] should not have been null. ", oCda
                .getDocumentationOf().get(0).getServiceEvent().getMoodCode().get(0));
        assertEquals("cda.documentationOf[0].serviceEvent.moodCode[0] incorrect. ", "EVN", oCda.getDocumentationOf()
                .get(0).getServiceEvent().getMoodCode().get(0));

        assertNotNull("cda.documentationOf[0].serviceEvent.classCode should not have been null. ", oCda
                .getDocumentationOf().get(0).getServiceEvent().getClassCode());
        assertEquals("cda.documentationOf[0].serviceEvent.classCode.size should not have been null. ", 1, oCda
                .getDocumentationOf().get(0).getServiceEvent().getClassCode().size());
        assertNotNull("cda.documentationOf[0].serviceEvent.classCode[0] should not have been null. ", oCda
                .getDocumentationOf().get(0).getServiceEvent().getClassCode().get(0));
        assertEquals("cda.documentationOf[0].serviceEvent.classCode[0] incorrect. ", "ACT", oCda.getDocumentationOf()
                .get(0).getServiceEvent().getClassCode().get(0));

        assertNotNull("cda.documentationOf[0].serviceEvent.templateId should not have been null. ", oCda
                .getDocumentationOf().get(0).getServiceEvent().getTemplateId());
        assertEquals("cda.documentationOf[0].serviceEvent.templateId.size incorrect. ", 1, oCda.getDocumentationOf()
                .get(0).getServiceEvent().getTemplateId().size());
        assertNotNull("cda.documentationOf[0].serviceEvent.templateId[0] should not have been null. ", oCda
                .getDocumentationOf().get(0).getServiceEvent().getTemplateId().get(0));
        assertII("cda.documentationOf[0].serviceEvent.templateId[0]", oCda.getDocumentationOf().get(0)
                .getServiceEvent().getTemplateId().get(0), "1.3.6.1.4.1.19376.1.5.3.1.2.6", null);

        assertNotNull("cda.documentationOf[0].serviceEvent.code should not have been null. ", oCda.getDocumentationOf()
                .get(0).getServiceEvent().getCode());
        assertCode("cda.documentationOf[0].serviceEvent.code", oCda.getDocumentationOf().get(0).getServiceEvent()
                .getCode(), "417370002", "Consent Given for Upload to National Shared Electronic Record",
                "2.16.840.1.113883.6.96", "SNOMED CT");

        assertNotNull("cda.documentationOf[0].serviceEvent.effectiveTime should not have been null. ", oCda
                .getDocumentationOf().get(0).getServiceEvent().getEffectiveTime());
        assertDateOnlyInterval("cda.documentationOf[0].serviceEvent.effectiveTime", oCda.getDocumentationOf().get(0)
                .getServiceEvent().getEffectiveTime(), "19800127", "19990522");
    }

    /**
     * Tests the Component tag to make sure that it has what was expected.
     *
     */
    @Test
    public void testComponentTag() {
        POCDMT000040ClinicalDocument oCda = createTheCDADocs(oPtPref);

        assertNotNull("cda.component should not have been null. ", oCda.getComponent());
        assertNotNull("cda.component.nonXMLBody should not have been null. ", oCda.getComponent().getNonXMLBody());
        assertNotNull("cda.component.nonXMLBody.text should not have been null. ", oCda.getComponent().getNonXMLBody()
                .getText());
        assertEquals("cda.component.nonXMLBody.text.mediaType incorrect. ", "application/pdf", oCda.getComponent()
                .getNonXMLBody().getText().getMediaType());
        assertNotNull("cda.component.nonXMLBody.text.representation should not have been null. ", oCda.getComponent()
                .getNonXMLBody().getText().getRepresentation());
        assertEquals("cda.component.nonXMLBody.text.representation incorrect. ", "B64", oCda.getComponent()
                .getNonXMLBody().getText().getRepresentation().value());
        assertNotNull("cda.component.nonXMLBody.text.content should not have been null. ", oCda.getComponent()
                .getNonXMLBody().getText().getContent());
        assertEquals("cda.component.nonXMLBody.text.content.size incorrect. ", 1, oCda.getComponent().getNonXMLBody()
                .getText().getContent().size());
        assertNotNull("cda.component.nonXMLBody.text.content[0] should not have been null. ", oCda.getComponent()
                .getNonXMLBody().getText().getContent().get(0));
        assertTrue("cda.component.nonXMLBody.text.content[0] instanceof String failed.  It was:  "
                + oCda.getComponent().getNonXMLBody().getText().getContent().get(0).getClass().getName(), (oCda
                .getComponent().getNonXMLBody().getText().getContent().get(0) instanceof String));
        String sText = (String) oCda.getComponent().getNonXMLBody().getText().getContent().get(0);
        assertEquals("The Binary Document was corrupted in the transformation: ", BINARY_DOC_PART1 + BINARY_DOC_PART2,
                sText);

    }

}
