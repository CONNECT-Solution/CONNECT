/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *  
 * Copyright 2010(Year date of delivery) United States Government, as represented by the Secretary of Health and Human Services.  All rights reserved.
 *  
 */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gov.hhs.fha.nhinc.assemblymanager.builder;
import gov.hhs.fha.nhinc.util.format.UTCDateUtil;
import gov.hhs.fha.nhinc.assemblymanager.AssemblyConstants;
import gov.hhs.fha.nhinc.assemblymanager.CDAConstants;
import gov.hhs.fha.nhinc.assemblymanager.builder.cda.modules.Author;
import gov.hhs.fha.nhinc.assemblymanager.builder.cda.modules.CustodianModule;
import gov.hhs.fha.nhinc.assemblymanager.builder.cda.modules.DocumentationOfModule;
import gov.hhs.fha.nhinc.assemblymanager.builder.cda.modules.InformationSource;
import gov.hhs.fha.nhinc.assemblymanager.builder.cda.modules.RecordTargetModule;
import gov.hhs.fha.nhinc.template.model.CdaTemplate;
import java.util.List;
import java.util.ArrayList;
import java.util.Calendar;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hl7.v3.ActClassClinicalDocument;
import org.hl7.v3.CE;
import org.hl7.v3.CS;
import org.hl7.v3.II;
import org.hl7.v3.POCDMT000040ClinicalDocument;
import org.hl7.v3.POCDMT000040Component2;
import org.hl7.v3.POCDMT000040Component3;
import org.hl7.v3.POCDMT000040InfrastructureRootTypeId;
import org.hl7.v3.POCDMT000040StructuredBody;
import org.hl7.v3.STExplicit;
import org.hl7.v3.TSExplicit;

/**
 *
 * @author kim
 */
public class CDADocumentBuilder extends DocumentBuilder {

   private static Log log = LogFactory.getLog(CDADocumentBuilder.class);

   private List<POCDMT000040ClinicalDocument> cdaDocumentList = null;
   private POCDMT000040ClinicalDocument cdaDocument = null;
   private String docId = "";

   public CDADocumentBuilder() {
      super();
   }

   public CDADocumentBuilder(List<CdaTemplate> sectionTemplates) {
      super(sectionTemplates);
   }

   public CDADocumentBuilder(String id) {
      super(id);
   }

   public POCDMT000040ClinicalDocument getCdaDocument() {
      return cdaDocument;
   }

   public String getDocId() {
      return docId;
   }

   public List<POCDMT000040ClinicalDocument> build() throws DocumentBuilderException {

      if (documentType.getTypeId().equalsIgnoreCase(AssemblyConstants.C32_CLASS_CODE)) {
         buildC32();
      } else {
         throw new DocumentBuilderException("Document type \"" + documentType.getTypeId() + "\" is not supported.");
      }

      return cdaDocumentList;
   }

   private void buildC32() throws DocumentBuilderException {

      cdaDocument = objectFactory.createPOCDMT000040ClinicalDocument();
      cdaDocumentList = new ArrayList();

      cdaDocument.setClassCode(ActClassClinicalDocument.DOCCLIN);

       //build realmCode
       CS csObj = new CS();
       csObj.setCode("US");
       cdaDocument.getRealmCode().add(csObj);
      // build headers
      POCDMT000040InfrastructureRootTypeId typeId = objectFactory.createPOCDMT000040InfrastructureRootTypeId();
      typeId.setRoot(CDAConstants.TYPE_ID_ROOT);
      typeId.setExtension(CDAConstants.TYPE_ID_EXTENSION_POCD_HD000040);
      cdaDocument.setTypeId(typeId);

      II templateId = new II();
      templateId.setRoot("2.16.840.1.113883.10.20.1");
      cdaDocument.getTemplateId().add(templateId);
      templateId = new II();
      templateId.setRoot("2.16.840.1.113883.3.88.11.32.1"); // CCD v1.0 Templates Root
      cdaDocument.getTemplateId().add(templateId);

      II realmCodeTemplateId = new II();
      realmCodeTemplateId.setRoot("2.16.840.1.113883.10.20.3"); //supports the realmCode value
      cdaDocument.getTemplateId().add(realmCodeTemplateId);

      II pccMedicalDocsTemplateId = new II();
      pccMedicalDocsTemplateId.setRoot("1.3.6.1.4.1.19376.1.5.3.1.1.1"); //supports PCC Medical Docs
      cdaDocument.getTemplateId().add(pccMedicalDocsTemplateId);
      // ClinicalDocument.id: Represents the globally unique instance identifier of
      // this version of a clinical document.
      docId = createDocumentId();
      II documentId = new II();
       documentId.setRoot(docId);
      cdaDocument.setId(documentId);

      // ClinicalDocument.code: The code specifying the particular kind of document.
      CE code = new CE();
      code.setCode(AssemblyConstants.C32_CLASS_CODE);
      code.setDisplayName(documentType.getDisplayName());
      code.setCodeSystem(documentType.getCodeSystemOid());
      code.setCodeSystemName(AssemblyConstants.LOINC_CODE_NAME);
      cdaDocument.setCode(code);

      //build title of document to conform with validation testing and set value to be same as code display name
      STExplicit STEtitle = new STExplicit();
      STEtitle.getContent().add(documentType.getDisplayName());
      cdaDocument.setTitle(STEtitle);
      // ClinicalDocument.effectiveTime: Signifies the document creation time, when the document
      // first came into being.  Default to "000000000000000-0000".  Actual value will be set when
      // response is formulated.
      TSExplicit effectiveTimeTS = new TSExplicit();
      // FIXUPS for Document Type C32
      // ClinicalDocument.effectiveTime: Signifies the document creation time, when the document
      // first came into being. For C32s that is the time the document is generated.
      UTCDateUtil utcTime = new UTCDateUtil();
      String effectiveTime = utcTime.formatUTCDate(Calendar.getInstance().getTime());
      effectiveTimeTS.setValue(effectiveTime);
      cdaDocument.setEffectiveTime(effectiveTimeTS);

      // ClinicalDocument.confidentialityCode: It is customary, but not required, that the value of
      // confidentialityCode be set equal to the most restrictive confidentialityCode of any of the document parts.
      CE confidentialityCode = new CE();
      confidentialityCode.setCode(AssemblyConstants.C32_CONFIDENTIAL_CODE);
      confidentialityCode.setDisplayName(AssemblyConstants.C32_CONFIDENTIAL_CODE_DESCR);
      confidentialityCode.setCodeSystem(AssemblyConstants.CONFIDENTIAL_CODE_SYS_OID);
      cdaDocument.setConfidentialityCode(confidentialityCode);

      // ClinicalDocument.languageCode: Specifies the human language of character data
      CS languageCode = new CS();
      languageCode.setCode(AssemblyConstants.LANGUAGE);
      cdaDocument.setLanguageCode(languageCode);

      // patient
      II subjectId = new II();
      subjectId.setExtension(patientId);
      subjectId.setRoot(orgOID);

      // recordTarget: The recordTarget represents the medical record that this document belongs to.
      RecordTargetModule rtModule = new RecordTargetModule(subjectId);
      org.hl7.v3.POCDMT000040Participant1 participant = objectFactory.createPOCDMT000040Participant1();

      org.hl7.v3.POCDMT000040RecordTarget recordTarget = new org.hl7.v3.POCDMT000040RecordTarget();

      try {
        recordTarget = rtModule.build(participant);
      } catch (DocumentBuilderException dbe) {
         log.error("Unable to build a RECORD TARGET MODULE", dbe);
      }

      if(recordTarget != null)
      {
          cdaDocument.getRecordTarget().add(recordTarget);

          // author: information about the author or creator of the information
          Author author = new Author();
          try {
             cdaDocument.getAuthor().add(author.build());
          } catch (DocumentBuilderException dbe) {
             log.error("Unable to build an AUTHOR MODULE", dbe);
          }

          // Author.time
          if (cdaDocument.getAuthor().size() > 0)
          {
            cdaDocument.getAuthor().get(0).setTime(effectiveTimeTS);
          }
          // informant: This module contains information about the original author
          InformationSource informant = new InformationSource();
          try {
             cdaDocument.getInformant().add(informant.build());
          } catch (DocumentBuilderException dbe) {
             log.error("Unable to build an INFORMATION SOURCE MODULE", dbe);
          }

          // custodian: This module contains information about the custodian of records
          CustodianModule custodianModule = new CustodianModule();
          try {
             cdaDocument.setCustodian(custodianModule.build());
          } catch (DocumentBuilderException dbe) {
             log.error("Unable to build a CUSTODIAN MODULE", dbe);
          }

          //participant: This module contains emergency contact information
          try {
            cdaDocument.getParticipant().add(participant);//participantModule.build());
          }
          catch(Exception dbe) {
              log.error("Unable to build a PARTICIPANT module", dbe);
          }

          //documentationOf (serviceEvent)
          DocumentationOfModule documentationOfModule = new DocumentationOfModule();
          try
          {
              cdaDocument.getDocumentationOf().add(documentationOfModule.build());//documentationOfModule.build();
          }
          catch(Exception dbe) {
              log.error("Unable to build a documentationOf module", dbe);
          }
          // now build the applicable clinical domain section(s)
          POCDMT000040Component2 clinicalComponent = new POCDMT000040Component2();
          POCDMT000040StructuredBody structBody = new POCDMT000040StructuredBody();

          if (templates != null) {
             CdaTemplate template = null;
             for (int i = 0; i < this.templates.size(); i++) {
                template = templates.get(i);
                log.info("Build section(POCDMT000040Component3) - template:" + template);
                try {
                   POCDMT000040Component3 component =
                           StructureComponentFactoryBuilder.createHITSPComponent(subjectId, template);
                   structBody.getComponent().add(component);
                } catch (Exception e) {
                   log.error("Failed to build (section) template:" + template);
                }
             }
          }

          clinicalComponent.setStructuredBody(structBody);
          cdaDocument.setComponent(clinicalComponent);

          log.info("Created C32 document for patient(" + subjectId.getExtension() + "), docId(" + docId + ")");
       }
      else
      {
          log.info("C32 not created - no Patient Demographic information returned...");

          cdaDocument = null;
      }

      //Add the current CDA document to the document list
      if (cdaDocument != null)
      {
          cdaDocumentList.add(cdaDocument);
      }
   }
}
