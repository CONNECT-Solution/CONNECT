<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project abortOnError="false" name="EntitySendingXDRAsyncResponseTests" resourceRoot="${projectDir}" runType="SEQUENTIAL" soapui-version="5.1.2" activeEnvironment="Default" id="210bec3a-ac9e-4834-8752-171c2b553839" xmlns:con="http://eviware.com/soapui/config">
  <con:description>This test suite tests outbound DS deferred responses. This test suite should only be run in standard orchestration mode as it tests policy and audit logic.

Set the GatewayProprDir to the config/nhin directory of the gateway under test.</con:description>
  <con:settings>
    <con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="EntitySendingXDRAsyncResponseTestSuite"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="PolicyCheckPermit"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting>
  </con:settings>
  <con:interface anonymous="optional" bindingName="{urn:gov:hhs:fha:nhinc:adapterpolicyengine}AdapterPolicyEngineBindingSoap" definition="../../../target/wsdl/AdapterPolicyEngine.wsdl" name="AdapterPolicyEngineBindingSoap" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" id="1d58decd-17d5-4cc1-a51e-432ebbb0b8c6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:endpoints>
      <con:endpoint>http://localhost:${HttpDefaultPort}/NhinConnect/AdapterPolicyEngine</con:endpoint>
    </con:endpoints>
    <con:operation action="urn:CheckPolicy" anonymous="optional" bindingOperationName="CheckPolicy" inputName="CheckPolicyRequest" isOneWay="false" name="CheckPolicy" outputName="CheckPolicyResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response" id="a1cfcc48-7525-4094-859a-4b2fac40ce77">
      <con:settings/>
      <con:call name="Request 1" id="c45238df-9c9f-4479-843b-a81cec8c5533">
        <con:settings/>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://localhost:${HttpDefaultPort}/NhinConnect/AdapterPolicyEngine</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:urn2="urn:oasis:names:tc:xacml:2.0:context:schema:os">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:CheckPolicyRequest>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:addressType>
               <urn1:city>?</urn1:city>
               <urn1:country>?</urn1:country>
               <urn1:state>?</urn1:state>
               <urn1:streetAddress>?</urn1:streetAddress>
               <urn1:zipCode>?</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>?</urn1:dateOfBirth>
            <urn1:explanationNonClaimantSignature>?</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>?</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>?</urn1:haveSignature>
            <urn1:haveWitnessSignature>?</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>?</urn1:description>
               <urn1:homeCommunityId>?</urn1:homeCommunityId>
               <urn1:name>?</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>?</urn1:familyName>
               <urn1:givenName>?</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:nameType>
               <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>?</urn1:areaCode>
               <urn1:countryCode>?</urn1:countryCode>
               <urn1:extension>?</urn1:extension>
               <urn1:localNumber>?</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:addressType>
               <urn1:city>?</urn1:city>
               <urn1:country>?</urn1:country>
               <urn1:state>?</urn1:state>
               <urn1:streetAddress>?</urn1:streetAddress>
               <urn1:zipCode>?</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>?</urn1:familyName>
               <urn1:givenName>?</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:nameType>
               <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>?</urn1:areaCode>
               <urn1:countryCode>?</urn1:countryCode>
               <urn1:extension>?</urn1:extension>
               <urn1:localNumber>?</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>?</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>?</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:addressType>
               <urn1:city>?</urn1:city>
               <urn1:country>?</urn1:country>
               <urn1:state>?</urn1:state>
               <urn1:streetAddress>?</urn1:streetAddress>
               <urn1:zipCode>?</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>?</urn1:familyName>
               <urn1:givenName>?</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:nameType>
               <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>?</urn1:areaCode>
               <urn1:countryCode>?</urn1:countryCode>
               <urn1:extension>?</urn1:extension>
               <urn1:localNumber>?</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>?</urn1:familyName>
                  <urn1:givenName>?</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>?</urn1:code>
                     <urn1:codeSystem>?</urn1:codeSystem>
                     <urn1:codeSystemName>?</urn1:codeSystemName>
                     <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                     <urn1:displayName>?</urn1:displayName>
                     <urn1:originalText>?</urn1:originalText>
                     <!--Zero or more repetitions:-->
                     <urn1:translation/>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
               </urn1:personName>
               <urn1:userName>?</urn1:userName>
               <urn1:org>
                  <urn1:description>?</urn1:description>
                  <urn1:homeCommunityId>?</urn1:homeCommunityId>
                  <urn1:name>?</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>?</urn1:authorized>
            <!--Optional:-->
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>?</urn1:code>
               <urn1:codeSystem>?</urn1:codeSystem>
               <urn1:codeSystemName>?</urn1:codeSystemName>
               <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
               <urn1:displayName>?</urn1:displayName>
               <urn1:originalText>?</urn1:originalText>
               <!--Zero or more repetitions:-->
               <urn1:translation/>
            </urn1:purposeOfDisclosureCoded>
            <!--Optional:-->
            <!--urn1:claimFormRef>?</urn1:claimFormRef-->
            <!--Optional:-->
            <!--urn1:claimFormRaw>cid:878096191505</urn1:claimFormRaw-->
         </urn:assertion>
         <urn:request>
            <!--1 or more repetitions:-->
            <urn2:Subject SubjectCategory="urn:oasis:names:tc:xacml:1.0:subject-category:access-subject">
               <!--Zero or more repetitions:-->
               <urn2:Attribute AttributeId="?" DataType="?" Issuer="?">
                  <!--1 or more repetitions:-->
                  <urn2:AttributeValue>
                     e
                     <!--You may enter ANY elements at this point-->
                     gero
                  </urn2:AttributeValue>
               </urn2:Attribute>
            </urn2:Subject>
            <!--1 or more repetitions:-->
            <urn2:Resource>
               <!--Optional:-->
               <urn2:ResourceContent>
                  cum
                  <!--You may enter ANY elements at this point-->
                  sonoras
               </urn2:ResourceContent>
               <!--Zero or more repetitions:-->
               <urn2:Attribute AttributeId="?" DataType="?" Issuer="?">
                  <!--1 or more repetitions:-->
                  <urn2:AttributeValue>
                     aeoliam
                     <!--You may enter ANY elements at this point-->
                     quae
                  </urn2:AttributeValue>
               </urn2:Attribute>
            </urn2:Resource>
            <urn2:Action>
               <!--Zero or more repetitions:-->
               <urn2:Attribute AttributeId="?" DataType="?" Issuer="?">
                  <!--1 or more repetitions:-->
                  <urn2:AttributeValue>
                     ventos
                     <!--You may enter ANY elements at this point-->
                     verrantque
                  </urn2:AttributeValue>
               </urn2:Attribute>
            </urn2:Action>
            <urn2:Environment>
               <!--Zero or more repetitions:-->
               <urn2:Attribute AttributeId="?" DataType="?" Issuer="?">
                  <!--1 or more repetitions:-->
                  <urn2:AttributeValue>
                     temperat
                     <!--You may enter ANY elements at this point-->
                     per
                  </urn2:AttributeValue>
               </urn2:Attribute>
            </urn2:Environment>
         </urn:request>
      </urn:CheckPolicyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:wsaConfig action="urn:gov:hhs:fha:nhinc:adapterpolicyengine/AdapterPolicyEnginePortType/CheckPolicyRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="EntityXDRAsyncResponse_Binding" type="wsdl" bindingName="{urn:gov:hhs:fha:nhinc:nhincentityxdr:async:response}EntityXDRAsyncResponse_Binding" soapVersion="1_2" anonymous="optional" definition="../../../target/wsdl/EntityXDRResponse.wsdl" id="6bab5b42-49cb-4002-ac93-c5c08bb809e9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:endpoints>
      <con:endpoint>http://localhost:${HttpDefaultPort}/Gateway/DocumentSubmission/1_1/EntityService/EntityDocSubmissionDeferredResponseUnsecured</con:endpoint>
    </con:endpoints>
    <con:operation isOneWay="false" action="" name="ProvideAndRegisterDocumentSet-bAsyncResponse" bindingOperationName="ProvideAndRegisterDocumentSet-bAsyncResponse" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" id="0cd28d17-bef4-493e-82c2-39b121f81d0d">
      <con:settings/>
    </con:operation>
  </con:interface>
  <con:testSuite name="EntitySendingXDRAsyncResponseTestSuite" id="f14643f5-b0c0-4c1c-9600-bc7fc2dff596">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="47023b4b-42b8-4864-8301-82fb58510648" keepSession="false" maxResults="0" name="PolicyCheckPermit" searchProperties="true">
      <con:description>Disabled the mock permit step because that is the default in the gateway; and SoapUI now seems to be sending only one response per mock step and then shutting down the mock. This results in a failure becaue the PE is unavailable. This test case now checks the positive case.</con:description>
      <con:settings/>
      <con:testStep type="delay" name="Delay" id="84df76f4-8c5c-4d13-b227-dfd08d247421">
        <con:settings/>
        <con:config>
          <delay>30000</delay>
        </con:config>
      </con:testStep>
      <con:testStep name="EntityXDRresponse - Request" type="request" id="612c44e7-a503-4070-ba29-9982cf39dc9a">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>EntityXDRAsyncResponse_Binding</con:interface>
          <con:operation>ProvideAndRegisterDocumentSet-bAsyncResponse</con:operation>
          <con:request name="EntityXDRresponse - Request" useWsAddressing="false" id="836e4b73-88d6-4e89-b70d-4fc74a6ecf9d">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#Endpoint-EntityXDRResponse}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonentity" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:add="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:urn2="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:urn3="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0">
   <soapenv:Header xmlns:add="http://www.w3.org/2005/08/addressing">
      <add:Action>urn:gov:hhs:fha:nhinc:nhincentityxdr:async:response:ProvideAndRegisterDocumentSet-bAsyncResp_Request</add:Action>
      <add:MessageID>uuid:12bcfc1e-f422-4d1d-af99-ff83d050313e</add:MessageID>
      <add:RelatesTo>uuid:1111111111.22222.333.44</add:RelatesTo>
      <add:To>http://localhost:8080/CONNECTAdapter/EntityProxyService/EntityXDRResponse</add:To>
   </soapenv:Header>
   <soapenv:Body projectName="EntitySendingXDRAsyncResponseTests" testCase="PolicyCheckPermit">
      <urn:RespondingGateway_ProvideAndRegisterDocumentSetResponseRequest>
<urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Joe</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>PSYCHOTHERAPY</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <!--Optional:-->
            <!--urn1:claimFormRef>claimFormRef</urn1:claimFormRef-->
            <!--Optional:-->
            <!--urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw-->
            <!--Optional:-->
            
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
         <urn:nhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>${#Project#LocalHCDescription}</urn1:description>
                  <urn1:homeCommunityId>${#Project#LocalHCID}</urn1:homeCommunityId>
                  <urn1:name>${#Project#LocalHCDescription}</urn1:name>
               </urn1:homeCommunity>
            </urn1:nhinTargetCommunity>
         </urn:nhinTargetCommunities>
         <urn:RegistryResponse status="?" requestId="?">
            <urn2:ResponseSlotList>
               <urn3:Slot name="?" slotType="?">
                  <urn3:ValueList>
                     <urn3:Value>?</urn3:Value>
                  </urn3:ValueList>
               </urn3:Slot>
            </urn2:ResponseSlotList>
            <urn2:RegistryErrorList highestSeverity="?">
               <urn2:RegistryError codeContext="?" errorCode="?" severity="urn:oasis:names:tc:ebxml-regrep:ErrorSeverityType:Error" location="?">?</urn2:RegistryError>
            </urn2:RegistryErrorList>
         </urn:RegistryResponse>
      </urn:RespondingGateway_ProvideAndRegisterDocumentSetResponseRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Fault Assertion" id="cdab9600-8e25-40c0-90cb-50788b97251b"/>
            <con:assertion type="SOAP Response" id="26ebf4d4-9d6b-4fcb-89ef-0be29c051759"/>
            <con:assertion name="RelatesTo field" type="XPath Match" id="ec109bad-d9ef-4c4c-8ed8-5e3492d093b7">
              <con:configuration>
                <path>declare namespace ns1='http://www.w3.org/2005/08/addressing';
//ns1:RelatesTo[1]</path>
                <content>&lt;RelatesTo xmlns="http://www.w3.org/2005/08/addressing" xmlns:S="http://www.w3.org/2003/05/soap-envelope">uuid:12bcfc1e-f422-4d1d-af99-ff83d050313e&lt;/RelatesTo></content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:assertion name="Match content of [@status]" type="XPath Match" id="046150a2-ef58-4528-9157-3131071acc0d">
              <con:configuration>
                <path>declare namespace ns20='http://www.hhs.gov/healthit/nhin';
//ns20:XDRAcknowledgement[1]/ns20:message[1]/@status</path>
                <content>urn:oasis:names:tc:ebxml-regrep:ResponseStatusType:ResponseAccepted</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:assertion name="Schema Compliance" type="Schema Compliance" id="f1badf93-646e-434e-9e08-376b3c3acd2f">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:gov:hhs:fha:nhinc:nhincentityxdr:async:response:ProvideAndRegisterDocumentSet-bAsyncResp_Request" addDefaultTo="true" messageID="uuid:1111111111.22222.333.44" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:setupScript>nhinc.FileUtils.backupConfiguration(context.findProperty("GatewayPropDir"), log);
def alias = 'adapterpolicyengineorchestrator';
def dir = context.findProperty('GatewayPropDir');
def aliasName = 'adapterpolicyengineorchestratorsamljava';
def replaceName = 'adapterpolicyengineorchestratornoop';	
nhinc.FileUtils.updateSpringConfig(dir, "PolicyEngineProxyConfig.xml", alias,
		aliasName, replaceName, log);</con:setupScript>
      <con:properties>
        <con:property>
          <con:name>startDate</con:name>
          <con:value>2013-10-03T20:04:46Z</con:value>
        </con:property>
        <con:property>
          <con:name>endDate</con:name>
          <con:value>2013-10-03T22:09:46Z</con:value>
        </con:property>
        <con:property>
          <con:name>sigDate</con:name>
          <con:value>10/03/2013 20:04:46</con:value>
        </con:property>
        <con:property>
          <con:name>expireDate</con:name>
          <con:value>2013-11-02T00:00:00Z</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:tearDownScript>nhinc.FileUtils.restoreConfiguration(context.findProperty("GatewayPropDir"), log);</con:tearDownScript>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="d650350f-473a-4664-aea4-2a15f299c64e" keepSession="false" maxResults="0" name="PolicyCheckDeny" searchProperties="true">
      <con:settings/>
      <con:testStep name="Set PolicyEngine Mock" type="groovy" disabled="true" id="4320b295-fda2-4990-af95-bad0c7d8ac40">
        <con:settings/>
        <con:config>
          <script>def destConfigFileLocation = context.findProperty("GatewayPropDir");
def mockHost = context.findProperty("mockHost");
def mockPEURL = "http://" + mockHost + ":1882/mockPE";
def LocalHCID = context.findProperty( "LocalHCID" );

nhinc.FileUtils.createOrUpdateConnection("internalExchangeInfo.xml", destConfigFileLocation, LocalHCID, "policyengineservice", mockPEURL, "LEVEL_a0", log)</script>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay" id="d6dc975e-a2b4-4bc7-8304-f5352a81ff5a">
        <con:settings/>
        <con:config>
          <delay>30000</delay>
        </con:config>
      </con:testStep>
      <con:testStep name="EntityXDRresponse - Request" type="request" id="906340eb-2092-474e-a0cf-c6ae348c4012">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>EntityXDRAsyncResponse_Binding</con:interface>
          <con:operation>ProvideAndRegisterDocumentSet-bAsyncResponse</con:operation>
          <con:request name="EntityXDRresponse - Request" useWsAddressing="false" id="f7e32113-c756-47bc-8d67-3e8d6d8a068c">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#Endpoint-EntityXDRResponse}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonentity" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:add="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:urn2="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:urn3="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0">
   <soapenv:Header xmlns:add="http://www.w3.org/2005/08/addressing">
      <add:Action>urn:gov:hhs:fha:nhinc:nhincentityxdr:async:response:ProvideAndRegisterDocumentSet-bAsyncResp_Request</add:Action>
      <add:MessageID>uuid:12bcfc1e-f422-4d1d-af99-ff83d050313e</add:MessageID>
      <add:RelatesTo>uuid:1111111111.22222.333.44</add:RelatesTo>
      <add:To>http://localhost:8080/CONNECTAdapter/EntityProxyService/EntityXDRResponse</add:To>
   </soapenv:Header>
   <soapenv:Body projectName="EntitySendingXDRAsyncResponseTests" testCase="PolicyCheckDeny">
      <urn:RespondingGateway_ProvideAndRegisterDocumentSetResponseRequest>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Joe</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>PSYCHOTHERAPY</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <!--Optional:-->
            <!--urn1:claimFormRef>claimFormRef</urn1:claimFormRef-->
            <!--Optional:-->
            <!--urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw-->
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>08-06-2012T12:45:00.000Z</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
         <urn:nhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>${#Project#LocalHCDescription}</urn1:description>
                  <urn1:homeCommunityId>${#Project#LocalHCID}</urn1:homeCommunityId>
                  <urn1:name>${#Project#LocalHCDescription}</urn1:name>
               </urn1:homeCommunity>
            </urn1:nhinTargetCommunity>
         </urn:nhinTargetCommunities>
         <urn:RegistryResponse status="?" requestId="?">
            <urn2:ResponseSlotList>
               <urn3:Slot name="?" slotType="?">
                  <urn3:ValueList>
                     <urn3:Value>?</urn3:Value>
                  </urn3:ValueList>
               </urn3:Slot>
            </urn2:ResponseSlotList>
            <urn2:RegistryErrorList highestSeverity="?">
               <urn2:RegistryError codeContext="?" errorCode="?" severity="urn:oasis:names:tc:ebxml-regrep:ErrorSeverityType:Error" location="?">?</urn2:RegistryError>
            </urn2:RegistryErrorList>
         </urn:RegistryResponse>
      </urn:RespondingGateway_ProvideAndRegisterDocumentSetResponseRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Fault Assertion" id="da6434ae-85ed-4499-9cba-bfc09b3e49d8"/>
            <con:assertion type="SOAP Response" id="3b7e4771-1fee-4b0c-9947-939a7be7f48f"/>
            <con:assertion name="RelatesTo field" type="XPath Match" id="e5308777-6bef-4204-a147-23ca2ede305d">
              <con:configuration>
                <path>declare namespace ns1='http://www.w3.org/2005/08/addressing';
//ns1:RelatesTo[1]</path>
                <content>&lt;RelatesTo xmlns="http://www.w3.org/2005/08/addressing" xmlns:S="http://www.w3.org/2003/05/soap-envelope">uuid:12bcfc1e-f422-4d1d-af99-ff83d050313e&lt;/RelatesTo></content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:assertion name="Match content of [@status]" type="XPath Match" id="6dff2361-544b-42d0-bd48-29de837c9378">
              <con:configuration>
                <path>declare namespace ns20='http://www.hhs.gov/healthit/nhin';
//ns20:XDRAcknowledgement[1]/ns20:message[1]/@status</path>
                <content>urn:oasis:names:tc:ebxml-regrep:ResponseStatusType:Failure</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:assertion name="Schema Compliance" type="Schema Compliance" id="68867445-af81-4d07-8a2a-4474f409ad31">
              <con:configuration>
                <definition/>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:gov:hhs:fha:nhinc:nhincentityxdr:async:response:ProvideAndRegisterDocumentSet-bAsyncResp_Request" addDefaultTo="true" messageID="uuid:1111111111.22222.333.44" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep name="Policy Engine Mock" type="mockresponse" disabled="true" id="8605a98c-169c-4d4d-84fb-9957fac87d85">
        <con:settings/>
        <con:config startStep="EntityXDRresponse - Request" xsi:type="con:MockResponseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>AdapterPolicyEngineBindingSoap</con:interface>
          <con:operation>CheckPolicy</con:operation>
          <con:path>/mockPE</con:path>
          <con:port>1882</con:port>
          <con:timeout>30000</con:timeout>
          <con:response outgoingWss="" id="68214ef1-8b45-4cd1-84f8-137562057715">
            <con:settings/>
            <con:responseContent><![CDATA[<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns15:CheckPolicyResponse xmlns:ns2="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:ns3="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:ns4="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:ns5="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:ns6="http://www.hhs.gov/healthit/nhin/cdc" xmlns:ns7="http://nhinc.services.com/schema/auditmessage" xmlns:ns8="http://www.w3.org/2005/08/addressing" xmlns:ns9="http://docs.oasis-open.org/wsn/b-2" xmlns:ns10="urn:ihe:iti:xds-b:2007" xmlns:ns11="urn:gov:hhs:fha:nhinc:common:subscriptionb2overridefordocuments" xmlns:ns12="http://docs.oasis-open.org/wsrf/bf-2" xmlns:ns13="http://docs.oasis-open.org/wsn/t-1" xmlns:ns14="urn:oasis:names:tc:xacml:2.0:policy:schema:os" xmlns:ns15="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:ns16="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns17="urn:gov:hhs:fha:nhinc:common:subscriptionb2overrideforcdc" xmlns:ns18="urn:oasis:names:tc:xacml:2.0:context:schema:os" xmlns:ns19="http://schemas.xmlsoap.org/ws/2004/08/addressing">
         <ns15:response>
            <ns18:Result>
               <ns18:Decision>Deny</ns18:Decision>
            </ns18:Result>
         </ns15:response>
      </ns15:CheckPolicyResponse>
   </S:Body>
</S:Envelope>]]></con:responseContent>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
          </con:response>
          <con:assertion name="AuthnStatementAuthnInstant " type="GroovyScriptAssertion" id="b9fb07a0-f9a1-4e02-a740-c073f8571ad9">
            <con:configuration>
              <scriptText>def FieldName='authInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authInstant'
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-instant';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthnStatementSessionIndex" type="GroovyScriptAssertion" id="ad7dc62c-986d-4ccc-9900-7b2fafb16f0b">
            <con:configuration>
              <scriptText>def FieldName='sessionIndex';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:sessionIndex';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:session-index';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthnStatementAthnContextClassRef " type="GroovyScriptAssertion" id="0eb0d5fb-7410-4e61-aa73-ad791c1f9de1">
            <con:configuration>
              <scriptText>def FieldName='authContextClassRef';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authContextClassRef';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-context-class-ref';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthnStatementSubjectLocalityAddress " type="GroovyScriptAssertion" id="36d141f8-44c0-40ad-a154-e655e5066dca">
            <con:configuration>
              <scriptText>def FieldName='subjectLocalityAddress';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityAddress';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:ip-address';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthnStatementDNSName " type="GroovyScriptAssertion" id="e9b218c5-d23f-4495-b5d7-5f4c5f197411">
            <con:configuration>
              <scriptText>def FieldName='subjectLocalityDNSName';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityDNSName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:dns-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserPersonName" type="GroovyScriptAssertion" id="d00fcc51-359f-4f27-a0e6-dd3fa08cac5a">
            <con:configuration>
              <scriptText>def FieldName='personname';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:userName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserOrganizationName" type="GroovyScriptAssertion" id="1fccddd3-9b7b-4584-ae44-1c24f8c72ff8">
            <con:configuration>
              <scriptText>def FieldName='user organization';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:name';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-organization-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserRoleCode" type="GroovyScriptAssertion" id="d5580df3-a3b5-43b3-a858-3cacc95cc8d2">
            <con:configuration>
              <scriptText>def FieldName='user role coded';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code';
def XacmlAttributeId='urn:oasis:names:tc:xacml:2.0:subject:role';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserRoleCodeSystem " type="GroovyScriptAssertion" id="b4ca630d-4fff-43b4-aaeb-c34e70679ed9">
            <con:configuration>
              <scriptText>def FieldName='user role system';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserRoleCodeSystemName " type="GroovyScriptAssertion" id="b55c0056-a5b3-483e-9633-073da4d3a0e3">
            <con:configuration>
              <scriptText>def FieldName='user role system name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserRoleCodeDiplayName " type="GroovyScriptAssertion" id="c61ae665-4244-46f4-a5f1-22f6c21f807e">
            <con:configuration>
              <scriptText>def FieldName='user role display name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-description';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="PurposeForUseCode" type="GroovyScriptAssertion" id="572c2cf5-a40a-48d1-8a4d-0b1e1fb99320">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCode';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:purposeofuse';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="PurposeForUseCodeSystem" type="GroovyScriptAssertion" id="f86597cc-de83-40aa-99d8-149e6bc39305">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCodeSystem';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="PurposeForUseCodeSystemName" type="GroovyScriptAssertion" id="62d4d831-3d37-4aa3-bd38-ef4f2feff20d">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCodeSystemName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="PurposeForUseCodeDisplayName" type="GroovyScriptAssertion" id="d36324c0-b1ee-4017-8a31-b2c29a35e994">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCodeDisplayName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementDecision" type="GroovyScriptAssertion" id="c817e7e2-042c-4a77-bbe8-f3a6acbf1b37">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementDecision';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementResource" type="GroovyScriptAssertion" id="c57ecfd3-651d-406b-86d9-1be3690fbc52">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementResource';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementAction" type="GroovyScriptAssertion" id="606e4e8f-63ac-45c2-ba93-3a684b2564da">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementAction';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:action';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
//log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);
def ExpectedValue='action';
//log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (ExpectedValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementEvidenceAssertionID " type="GroovyScriptAssertion" id="cfb109b8-3055-4e0b-b107-6709c9faaed1">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionID';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementEvidenceAssertionIssueInstant" type="GroovyScriptAssertion" id="60fca36f-09f1-498f-ba9a-1d9548d31101">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssueInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementEvidenceAssertionVersion" type="GroovyScriptAssertion" id="33fcc292-9cdd-4ffe-9c1a-8468703b02a1">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionVersion';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementEvidenceAssertionIssuer" type="GroovyScriptAssertion" id="9f7c5e6e-1363-4e41-88df-e95194fe94cb">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssuer';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotBefore" type="GroovyScriptAssertion" id="605f1b9a-91ec-47cd-8721-8d1fbd3db993">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotBefore';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2001-01-01T06:00:00.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter " type="GroovyScriptAssertion" id="47536462-2312-408a-b30e-b299002d54dc">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2009-05-07T02:00:17.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentReference " type="GroovyScriptAssertion" id="a357f6db-2ae5-46b7-b159-acebc2a983a0">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentReference';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentType " type="GroovyScriptAssertion" id="e16bc481-43ac-4514-ae7d-f530911c31ff">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentType';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContent " type="GroovyScriptAssertion" id="1309bd16-0175-4919-b1b2-3b321871d17c">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="HomeCommunityId" type="GroovyScriptAssertion" id="4e2eb095-ca46-479f-8024-3aa9212b15b3">
            <con:configuration>
              <scriptText>def FieldName='home-community-id';
def AssertionXpath='//ec:assertion/nc:homeCommunity/nc:homeCommunityId';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:home-community-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="OrganizationId" type="GroovyScriptAssertion" id="e30fb441-f94b-4d8d-af39-3bd445f02bd3">
            <con:configuration>
              <scriptText>def FieldName='organizationid';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:homeCommunityId';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:organization-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="PatientId" type="GroovyScriptAssertion" id="65d10314-48ce-4a6d-b970-d0d2a4ee9dfd">
            <con:configuration>
              <scriptText>def FieldName='PatientId';
def XacmlAttributeId='http://www.hhs.gov/healthit/nhin#subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';
mockRequestHolder.namespaces['hl7'] = 'urn:hl7-org:v3';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValueExtension = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@extension"]
def ExpectedExtension = '1234';
log.info('XacmlAttributeValue(' + FieldName + '@extension)=' + XacmlValueExtension);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) => ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueExtension==ExpectedExtension);

def XacmlValueRoot = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@root"]
def ExpectedRoot = '2.2.2';
log.info('XacmlAttributeValue(' + FieldName + '@root)=' + XacmlValueRoot);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) => ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueRoot==ExpectedRoot);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'urn:hl7-org:v3#II';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionAccessConsent" type="GroovyScriptAssertion" id="70812852-f872-45fd-b18d-53ef8b42b23c">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:accessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent" type="GroovyScriptAssertion" id="0eda729f-10ad-4d48-84da-065a61560825">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:instanceAccessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-instance-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" type="XPath Match" id="86c679d7-7089-4bea-bd2e-f05a7916ec4d">
            <con:configuration>
              <path>declare namespace ns19='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns18:CheckPolicyRequest[1]/ns18:request[1]/ns19:Subject[2]/ns19:Attribute[1]/@AttributeId</path>
              <content>urn:gov:hhs:fha:nhinc:home-community-id</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="assigning authority" type="XPath Match" id="5c5f1caf-4564-4708-9705-99469aeb2980">
            <con:configuration>
              <path>declare namespace ns18='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns15='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns15:CheckPolicyRequest[1]/ns15:request[1]/ns18:Resource[1]/ns18:Attribute[1]/ns18:AttributeValue[1]</path>
              <content>1.3.6.1.4.1.21367.2005.3.7</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="local patient id" type="XPath Match" id="dbda8592-29c8-47a5-bfe0-1f975e150fbb">
            <con:configuration>
              <path>declare namespace xacml='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace adapter='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//xacml:Resource/xacml:Attribute[@AttributeId='urn:oasis:names:tc:xacml:1.0:resource:resource-id']/xacml:AttributeValue</path>
              <content>SELF-5</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
        </con:config>
      </con:testStep>
      <con:setupScript>nhinc.FileUtils.backupConfiguration(context.findProperty("GatewayPropDir"), log);
def alias = 'adapterpolicyengineorchestrator';
def dir = context.findProperty('GatewayPropDir');
def aliasName = 'adapterpolicyengineorchestratorsamljava';
def replaceName = 'adapterpolicyengineorchestratornoopdeny';	
nhinc.FileUtils.updateSpringConfig(dir, "PolicyEngineProxyConfig.xml", alias,
		aliasName, replaceName, log);</con:setupScript>
      <con:properties>
        <con:property>
          <con:name>startDate</con:name>
          <con:value>2013-10-03T20:04:59Z</con:value>
        </con:property>
        <con:property>
          <con:name>endDate</con:name>
          <con:value>2013-10-03T22:09:59Z</con:value>
        </con:property>
        <con:property>
          <con:name>sigDate</con:name>
          <con:value>10/03/2013 20:04:59</con:value>
        </con:property>
        <con:property>
          <con:name>expireDate</con:name>
          <con:value>2013-11-02T00:00:00Z</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:tearDownScript>nhinc.FileUtils.restoreConfiguration(context.findProperty("GatewayPropDir"), log);</con:tearDownScript>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="15ded873-98b8-4a7a-b8d9-c6e2d48883b5" keepSession="false" maxResults="0" name="AuditLogQuery" searchProperties="true">
      <con:settings/>
      <con:testStep name="clear audit table" type="groovy" id="83a01a89-2ca1-4db1-be63-42be7b006105">
        <con:settings/>
        <con:config>
          <script>context.withSql('AuditDB') { sql -> 
  sql.execute('delete from ' + context.findProperty('AuditTable'))
}</script>
        </con:config>
      </con:testStep>
      <con:testStep name="get User ID" type="groovy" id="973481bc-09f8-4b94-92ff-27430f6aba31">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def UserID = context.findProperty( "UserID" );

def nowDate = new Date();
context.testCase.setPropertyValue('XDRUserId',"${UserID}${nowDate}");</script>
        </con:config>
      </con:testStep>
      <con:testStep name="Generate patient ID for Audit Log Query" type="groovy" id="75f00d98-29fa-43e5-9240-acff5a4c99da">
        <con:settings/>
        <con:config>
          <script>def localAA = context.findProperty('LocalAA')
def PatientID = context.findProperty('PatientId')

context.testCase.setPropertyValue('FullPatientID', "${PatientID}^^^&amp;amp;${localAA}&amp;amp;ISO");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="delay" name="Delay" id="301e2c7a-8238-41b9-bcfa-d79f1512c1ab">
        <con:settings/>
        <con:config>
          <delay>30000</delay>
        </con:config>
      </con:testStep>
      <con:testStep name="EntityXDRresponse - Request" type="request" id="0bd55c78-d1ec-44c6-8428-0c374d8d097a">
        <con:settings/>
        <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:interface>EntityXDRAsyncResponse_Binding</con:interface>
          <con:operation>ProvideAndRegisterDocumentSet-bAsyncResponse</con:operation>
          <con:request name="EntityXDRresponse - Request" useWsAddressing="false" id="d4377cba-4b6c-455f-9132-9e9ba7dd2017">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#Endpoint-EntityXDRResponse}</con:endpoint>
            <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonentity" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:add="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:urn2="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:urn3="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0">
   <soapenv:Header xmlns:add="http://www.w3.org/2005/08/addressing">
      <add:Action>urn:gov:hhs:fha:nhinc:nhincentityxdr:async:response:ProvideAndRegisterDocumentSet-bAsyncResp_Request</add:Action>
      <add:MessageID>uuid:12bcfc1e-f422-4d1d-af99-ff83d050313e</add:MessageID>
      <add:RelatesTo>uuid:1111111111.22222.333.44</add:RelatesTo>
      <add:To>http://localhost:8080/CONNECTAdapter/EntityProxyService/EntityXDRResponse</add:To>
   </soapenv:Header>
   <soapenv:Body projectName="EntitySendingXDRAsyncResponseTests" testCase="PolicyCheckPermit">
      <urn:RespondingGateway_ProvideAndRegisterDocumentSetResponseRequest>
<urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Joe</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>PSYCHOTHERAPY</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <!--Optional:-->
            <!--urn1:claimFormRef>claimFormRef</urn1:claimFormRef-->
            <!--Optional:-->
            <!--urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw-->
            <!--Optional:-->
            
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
         <urn:nhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>${#Project#LocalHCDescription}</urn1:description>
                  <urn1:homeCommunityId>${#Project#LocalHCID}</urn1:homeCommunityId>
                  <urn1:name>${#Project#LocalHCDescription}</urn1:name>
               </urn1:homeCommunity>
            </urn1:nhinTargetCommunity>
         </urn:nhinTargetCommunities>
         <urn:RegistryResponse status="?" requestId="?">
            <urn2:ResponseSlotList>
               <urn3:Slot name="?" slotType="?">
                  <urn3:ValueList>
                     <urn3:Value>?</urn3:Value>
                  </urn3:ValueList>
               </urn3:Slot>
            </urn2:ResponseSlotList>
            <urn2:RegistryErrorList highestSeverity="?">
               <urn2:RegistryError codeContext="?" errorCode="?" severity="urn:oasis:names:tc:ebxml-regrep:ErrorSeverityType:Error" location="?">?</urn2:RegistryError>
            </urn2:RegistryErrorList>
         </urn:RegistryResponse>
      </urn:RespondingGateway_ProvideAndRegisterDocumentSetResponseRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
            <con:assertion type="SOAP Fault Assertion" id="7d88097f-d7da-40b1-9c08-646c32bcf764"/>
            <con:assertion type="SOAP Response" id="7aa3338b-09cd-41a5-9e60-3a84ed794630"/>
            <con:assertion name="RelatesTo field" type="XPath Match" id="ed95ae79-b6e3-4063-8318-7fefab432d55">
              <con:configuration>
                <path>declare namespace ns1='http://www.w3.org/2005/08/addressing';
//ns1:RelatesTo[1]</path>
                <content>&lt;RelatesTo xmlns="http://www.w3.org/2005/08/addressing" xmlns:S="http://www.w3.org/2003/05/soap-envelope">uuid:12bcfc1e-f422-4d1d-af99-ff83d050313e&lt;/RelatesTo></content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:assertion name="Match content of [@status]" type="XPath Match" id="6b219cb5-0b4e-4b8d-baf3-014eec8c638c">
              <con:configuration>
                <path>declare namespace ns20='http://www.hhs.gov/healthit/nhin';
//ns20:XDRAcknowledgement[1]/ns20:message[1]/@status</path>
                <content>urn:oasis:names:tc:ebxml-regrep:ResponseStatusType:ResponseAccepted</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>Global HTTP Settings</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:gov:hhs:fha:nhinc:nhincentityxdr:async:response:ProvideAndRegisterDocumentSet-bAsyncResp_Request" addDefaultTo="true" messageID="uuid:1111111111.22222.333.44" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep name="verify audit events" type="groovy" id="09c8d5f9-8849-40da-93d8-4f308a890eee">
        <con:settings/>
        <con:config>
          <script>def count = context.withSql('AuditDB') { sql -> 
	sql.firstRow('select count(*) from ' + context.findProperty('AuditTable')).'count(*)'
}
//log.info "Count: " + count;
assert (count > 0);</script>
        </con:config>
      </con:testStep>
      <con:setupScript>nhinc.FileUtils.backupConfiguration(context.findProperty("GatewayPropDir"), log);</con:setupScript>
      <con:properties>
        <con:property>
          <con:name>startDate</con:name>
          <con:value>2013-10-03T20:05:07Z</con:value>
        </con:property>
        <con:property>
          <con:name>endDate</con:name>
          <con:value>2013-10-03T22:10:07Z</con:value>
        </con:property>
        <con:property>
          <con:name>sigDate</con:name>
          <con:value>10/03/2013 20:05:07</con:value>
        </con:property>
        <con:property>
          <con:name>expireDate</con:name>
          <con:value>2013-11-02T00:00:00Z</con:value>
        </con:property>
        <con:property>
          <con:name>XDRUserId</con:name>
          <con:value>XDR Request Inbound UserThu Oct 03 20:10:07 UTC 2013</con:value>
        </con:property>
        <con:property>
          <con:name>FullPatientID</con:name>
          <con:value>XDR Request1^^^&amp;amp;1.1&amp;amp;ISO</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
      <con:tearDownScript>nhinc.FileUtils.restoreConfiguration(context.findProperty("GatewayPropDir"), log);</con:tearDownScript>
    </con:testCase>
    <con:properties/>
    <con:reportParameters/>
  </con:testSuite>
  <con:requirements/>
  <con:properties>
    <con:property>
      <con:name>AuditDB</con:name>
      <con:value>auditrepo</con:value>
    </con:property>
    <con:property>
      <con:name>AuditTable</con:name>
      <con:value>auditrepository</con:value>
    </con:property>
    <con:property>
      <con:name>DBHost</con:name>
      <con:value>localhost</con:value>
    </con:property>
    <con:property>
      <con:name>DBPass</con:name>
      <con:value>nhincpass</con:value>
    </con:property>
    <con:property>
      <con:name>DBPort</con:name>
      <con:value>3306</con:value>
    </con:property>
    <con:property>
      <con:name>DBUser</con:name>
      <con:value>nhincuser</con:value>
    </con:property>
    <con:property>
      <con:name>Endpoint-AuditLogQuery</con:name>
      <con:value>http://localhost:8080/CONNECTAdapter/EntityAuditQuery</con:value>
    </con:property>
    <con:property>
      <con:name>Endpoint-EntityXDRRequest</con:name>
      <con:value>http://localhost:8080/Gateway/DocumentSubmission/1_1/EntityService/EntityDocSubmissionDeferredRequestUnsecured</con:value>
    </con:property>
    <con:property>
      <con:name>Endpoint-EntityXDRResponse</con:name>
      <con:value>http://localhost:8080/Gateway/DocumentSubmission/1_1/EntityService/EntityDocSubmissionDeferredResponseUnsecured</con:value>
    </con:property>
    <con:property>
      <con:name>Endpoint-NhincProxyXDRRequest</con:name>
      <con:value>http://localhost:8080/Gateway/DocumentSubmission/1_1/EntityService/PassthruDocSubmissionDeferredRequestUnsecured</con:value>
    </con:property>
    <con:property>
      <con:name>GatewayPropDir</con:name>
      <con:value></con:value>
    </con:property>
    <con:property>
      <con:name>LocalAA</con:name>
      <con:value>1.1</con:value>
    </con:property>
    <con:property>
      <con:name>LocalHCDescription</con:name>
      <con:value>XDRAsyncTest1</con:value>
    </con:property>
    <con:property>
      <con:name>LocalHCID</con:name>
      <con:value>1.1</con:value>
    </con:property>
    <con:property>
      <con:name>MockHost</con:name>
      <con:value>localhost</con:value>
    </con:property>
    <con:property>
      <con:name>NHINGatewayConfigDir</con:name>
      <con:value>C:/Sun/AppServer/domains/domain1/config/nhin</con:value>
    </con:property>
    <con:property>
      <con:name>NHINGatewayHost</con:name>
      <con:value>localhost</con:value>
    </con:property>
    <con:property>
      <con:name>PatientId</con:name>
      <con:value>XDR Request1</con:value>
    </con:property>
    <con:property>
      <con:name>RemoteAA</con:name>
      <con:value>2.2</con:value>
    </con:property>
    <con:property>
      <con:name>RemoteHCDescription</con:name>
      <con:value>XDRAsyncTest2</con:value>
    </con:property>
    <con:property>
      <con:name>RemoteHCID</con:name>
      <con:value>2.2</con:value>
    </con:property>
    <con:property>
      <con:name>UserID</con:name>
      <con:value>XDR Request Inbound User</con:value>
    </con:property>
  </con:properties>
  <con:afterLoadScript>def propertiesFile = new File(new File(project.path).parent, 'EntitySendingXDRAsyncResponseTests-soapui-project.properties')
if (propertiesFile.exists()) {
	def props = new Properties()
	props.load(new FileReader(propertiesFile))
	props.each { key, value ->
	    project.setPropertyValue(key, value)
	}
}

TimeZone.setDefault(TimeZone.getTimeZone("UTC"))
def testRunListener = [
  afterRun: { testRunner, runContext -> },
  afterStep: { testRunner, runContext, result -> },
  beforeStep: { testRunner, runContext -> },
  beforeStep: { testRunner, runContext, testStep -> },
  beforeRun: { testRunner, runContext -> 
    use (org.codehaus.groovy.runtime.TimeCategory) {
      def startDate = 5.minutes.ago
      def endDate = 120.minutes.from.now
      def expireDate = 30.days.from.now

      def df = "yyyy-MM-dd'T'HH:mm:ss'Z'"
      def dfSig = "MM/dd/yyyy' 'HH:mm:ss"

      runContext.testCase.setPropertyValue("startDate", startDate.format(df))
      runContext.testCase.setPropertyValue("endDate", endDate.format(df))
      runContext.testCase.setPropertyValue("sigDate", startDate.format(dfSig))
      runContext.testCase.setPropertyValue("expireDate", expireDate.format(df))
    }
  }   
] as com.eviware.soapui.model.testsuite.TestRunListener

project.testSuiteList*.testCaseList.flatten()*.addTestRunListener(testRunListener)

com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.findProperty = { propertyName ->
    return delegate.getProperty(propertyName) ?:
                delegate.testCase.getPropertyValue(propertyName) ?:
                delegate.testCase.testSuite.getPropertyValue(propertyName) ?:
                delegate.testCase.testSuite.project.getPropertyValue(propertyName) ?:
                com.eviware.soapui.SoapUI.globalProperties.getPropertyValue(propertyName)
}

com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.withSql = { dbOrPropertyName, block ->
  def dbName = delegate.findProperty(dbOrPropertyName) ?: dbOrPropertyName
  def host = delegate.findProperty('DBHost')
  def port = delegate.findProperty('DBPort')
  def user = delegate.findProperty('DBUser')
  def pass = delegate.findProperty('DBPass')
  
  def connectString = "jdbc:mysql://${host}:${port}/${dbName}"
  def sql = groovy.sql.Sql.newInstance(connectString, user, pass, "com.mysql.jdbc.Driver");
  try {
     block(sql)
  } finally {
    sql.close()
  }
}</con:afterLoadScript>
  <con:wssContainer/>
  <con:databaseConnectionContainer/>
  <con:oAuth2ProfileContainer/>
  <con:reporting>
    <con:reportTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:parameters/>
  </con:reporting>
  <con:sensitiveInformation/>
</con:soapui-project>