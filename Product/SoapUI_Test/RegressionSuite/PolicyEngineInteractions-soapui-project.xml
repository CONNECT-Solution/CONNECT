<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project abortOnError="false" name="PolicyEngineInteractions" resourceRoot="${projectDir}" runType="SEQUENTIAL" soapui-version="4.5.1" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config">
	<con:settings>

	</con:settings>
	<con:interface anonymous="optional" bindingName="{urn:gov:hhs:fha:nhinc:adapterpolicyengine}AdapterPolicyEngineBindingSoap" definition="${projectDir}/../ValidationSuite/target/wsdl/AdapterPolicyEngine.wsdl" name="AdapterPolicyEngineBindingSoap" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:settings/>

		
		<con:endpoints>
			<con:endpoint>http://localhost:${HttpDefaultPort}/NhinConnect/AdapterPolicyEngine</con:endpoint>
		</con:endpoints>
		<con:operation action="urn:CheckPolicy" anonymous="optional" bindingOperationName="CheckPolicy" inputName="CheckPolicyRequest" isOneWay="false" name="CheckPolicy" outputName="CheckPolicyResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
			
		</con:operation>
	</con:interface>
	<con:interface anonymous="optional" bindingName="{urn:gov:hhs:fha:nhinc:nhincproxydocretrieve}NhincProxyDocRetrieveBindingSoap" definition="${projectDir}/../ValidationSuite/target/wsdl/NhincProxyDocRetrieve.wsdl" name="NhincProxyDocRetrieveBindingSoap" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:settings/>

		
		<con:endpoints>
			<con:endpoint>${#Project#NhincProxyDocRetrieveEndpoint}</con:endpoint>
			<con:endpoint>http://localhost:${HttpDefaultPort}/NhinConnect/NhincProxyDocRetrieve</con:endpoint>
		</con:endpoints>
		<con:operation action="urn:RespondingGateway_CrossGatewayRetrieve" anonymous="optional" bindingOperationName="RespondingGateway_CrossGatewayRetrieve" inputName="RespondingGateway_CrossGatewayRetrieveRequest" isOneWay="false" name="RespondingGateway_CrossGatewayRetrieve" outputName="RespondingGateway_CrossGatewayRetrieveResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
			
			
		</con:operation>
	</con:interface>
	<con:interface anonymous="optional" bindingName="{urn:gov:hhs:fha:nhinc:nhincproxydocquery}NhincProxyDocQueryBindingSoap" definition="${projectDir}/../ValidationSuite/target/wsdl/NhincProxyDocQuery.wsdl" name="NhincProxyDocQueryBindingSoap" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:settings/>

		
		<con:endpoints>
			<con:endpoint>http://localhost:${HttpDefaultPort}/NhinConnect/NhincProxyDocQuery</con:endpoint>
		</con:endpoints>
		<con:operation action="urn:RespondingGateway_CrossGatewayQuery" anonymous="optional" bindingOperationName="RespondingGateway_CrossGatewayQuery" inputName="RespondingGateway_CrossGatewayQueryRequest" isOneWay="false" name="RespondingGateway_CrossGatewayQuery" outputName="RespondingGateway_CrossGatewayQueryResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
			
		</con:operation>
	</con:interface>
	<con:interface anonymous="optional" bindingName="{urn:gov:hhs:fha:nhinc:nhincinternalcomponentpolicyenginetransform}NhincInternalComponentPolicyEngineTransformPortTypeBinding" definition="${projectDir}/../ValidationSuite/target/wsdl/NhincComponentInternalPolicyEngineTransform.wsdl" name="NhincInternalComponentPolicyEngineTransformPortTypeBinding" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:settings/>

		
		<con:endpoints>
			<con:endpoint>http://localhost:${NhincHttpPort}/NhinConnect/PolicyEngineGatewayTransformationService</con:endpoint>
			<con:endpoint>http://localhost:8080/NhinConnect/PolicyEngineGatewayTransformationService</con:endpoint>
			<con:endpoint>http://172.16.50.47:8080/NhinConnect/PolicyEngineGatewayTransformationService</con:endpoint>
		</con:endpoints>
		<con:operation action="urn:TransformAdhocQueryResultToCheckPolicy" anonymous="optional" bindingOperationName="TransformAdhocQueryResultToCheckPolicy" inputName="TransformAdhocQueryResultToCheckPolicyRequest" isOneWay="false" name="TransformAdhocQueryResultToCheckPolicy" outputName="TransformAdhocQueryResultToCheckPolicyResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
			
		</con:operation>
		<con:operation action="urn:TransformAdhocQueryToCheckPolicy" anonymous="optional" bindingOperationName="TransformAdhocQueryToCheckPolicy" inputName="TransformAdhocQueryToCheckPolicyRequest" isOneWay="false" name="TransformAdhocQueryToCheckPolicy" outputName="TransformAdhocQueryToCheckPolicyResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
			
			
			
		</con:operation>
		<con:operation action="urn:TransformDocRetrieveResultToCheckPolicy" anonymous="optional" bindingOperationName="TransformDocRetrieveResultToCheckPolicy" inputName="TransformDocRetrieveResultToCheckPolicyRequest" isOneWay="false" name="TransformDocRetrieveResultToCheckPolicy" outputName="TransformDocRetrieveResultToCheckPolicyResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
			
		</con:operation>
		<con:operation action="urn:TransformDocRetrieveToCheckPolicy" anonymous="optional" bindingOperationName="TransformDocRetrieveToCheckPolicy" inputName="TransformDocRetrieveToCheckPolicyRequest" isOneWay="false" name="TransformDocRetrieveToCheckPolicy" outputName="TransformDocRetrieveToCheckPolicyResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
			
		</con:operation>
		<con:operation action="urn:TransformFindAuditEventsToCheckPolicy" anonymous="optional" bindingOperationName="TransformFindAuditEventsToCheckPolicy" inputName="TransformFindAuditEventsToCheckPolicyRequest" isOneWay="false" name="TransformFindAuditEventsToCheckPolicy" outputName="TransformFindAuditEventsToCheckPolicyResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
			
		</con:operation>
		<con:operation action="urn:TransformNotifyToCheckPolicy" anonymous="optional" bindingOperationName="TransformNotifyToCheckPolicy" inputName="TransformNotifyToCheckPolicyRequest" isOneWay="false" name="TransformNotifyToCheckPolicy" outputName="TransformNotifyToCheckPolicyResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
			
		</con:operation>
		<con:operation action="urn:TransformSubjectAddedToCheckPolicy" anonymous="optional" bindingOperationName="TransformSubjectAddedToCheckPolicy" inputName="TransformSubjectAddedToCheckPolicyRequest" isOneWay="false" name="TransformSubjectAddedToCheckPolicy" outputName="TransformSubjectAddedToCheckPolicyResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
			
		</con:operation>
		
		<con:operation action="urn:TransformSubjectRevisedToCheckPolicy" anonymous="optional" bindingOperationName="TransformSubjectRevisedToCheckPolicy" inputName="TransformSubjectRevisedToCheckPolicyRequest" isOneWay="false" name="TransformSubjectRevisedToCheckPolicy" outputName="TransformSubjectRevisedToCheckPolicyResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
			
		</con:operation>

		<con:operation action="urn:TransformSubscribeToCheckPolicy" anonymous="optional" bindingOperationName="TransformSubscribeToCheckPolicy" inputName="TransformSubscribeToCheckPolicyRequest" isOneWay="false" name="TransformSubscribeToCheckPolicy" outputName="TransformSubscribeToCheckPolicyResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
			
		</con:operation>
		<con:operation action="urn:TransformUnsubscribeToCheckPolicy" anonymous="optional" bindingOperationName="TransformUnsubscribeToCheckPolicy" inputName="TransformUnsubscribeToCheckPolicyRequest" isOneWay="false" name="TransformUnsubscribeToCheckPolicy" outputName="TransformUnsubscribeToCheckPolicyResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
			
		</con:operation>
	</con:interface>
	
	
	
	
	
	
	
	<con:testSuite name="PolicyEngineInteractions TestSuite">
		<con:settings/>
		<con:runType>SEQUENTIAL</con:runType>
		<con:testCase disabled="true" failOnError="true" failTestCaseOnErrors="true" id="5cab5713-e464-44b8-a43f-d29dad6b57b1" keepSession="false" maxResults="0" name="doc query message to DTE" searchProperties="true">
			<con:settings/>
			<con:testStep name="message" type="request">
				<con:settings/>
				<con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:interface>NhincInternalComponentPolicyEngineTransformPortTypeBinding</con:interface>
					<con:operation>TransformAdhocQueryToCheckPolicy</con:operation>
					<con:request name="message">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://172.16.50.47:8080/NhinConnect/PolicyEngineGatewayTransformationService</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:policyenginedte" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:eventcommon" xmlns:urn2="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:urn3="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:urn4="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:urn5="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:TransformAdhocQueryToCheckPolicyRequest>
         <ec:message xmlns:ec="urn:gov:hhs:fha:nhinc:common:eventcommon" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonproxy" xmlns:urn1="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:urn2="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:urn3="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:add="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:urn6="urn:gov:hhs:fha:nhinc:common:eventcommon">
            <urn1:AdhocQueryRequest federated="false" startIndex="0" maxResults="-1" xmlns:urn7="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0">
               <urn1:ResponseOption returnType="RegistryObject" returnComposedObjects="false"/>
               <urn2:AdhocQuery home="urn:oid:1.1" id="urn:uuid:14d4debf-8f97-4251-9a74-a90016b0af0d">
                  <urn2:Slot name="$XDSDocumentEntryStatus">
                     <urn2:ValueList>
                        <urn2:Value>('urn:oasis:names:tc:ebxml-regrep:StatusType:Approved')</urn2:Value>
                     </urn2:ValueList>
                  </urn2:Slot>
                  <urn2:Slot name="$XDSDocumentEntryPatientId">
                     <urn2:ValueList>
                        <urn2:Value>'D123401^^^&amp;2.16.840.1.113883.3.198.1&amp;ISO'</urn2:Value>
                     </urn2:ValueList>
                  </urn2:Slot>
               </urn2:AdhocQuery>
            </urn1:AdhocQueryRequest>
            <ec:assertion>
               <urn3:address>
                  <urn3:addressType>
                     <urn3:code>W</urn3:code>
                     <urn3:codeSystem/>
                     <urn3:codeSystemName/>
                     <urn3:codeSystemVersion/>
                     <urn3:displayName/>
                     <urn3:originalText/>
                  </urn3:addressType>
                  <urn3:city>BUFFALO</urn3:city>
                  <urn3:country>USA</urn3:country>
                  <urn3:state>NY</urn3:state>
                  <urn3:streetAddress>12345 EAST COAST WAY</urn3:streetAddress>
                  <urn3:zipCode>01010</urn3:zipCode>
               </urn3:address>
               <urn3:dateOfBirth>19800516</urn3:dateOfBirth>
               <urn3:explanationNonClaimantSignature>NEEDED</urn3:explanationNonClaimantSignature>
               <urn3:haveSecondWitnessSignature>true</urn3:haveSecondWitnessSignature>
               <urn3:haveSignature>true</urn3:haveSignature>
               <urn3:haveWitnessSignature>true</urn3:haveWitnessSignature>
               <urn3:homeCommunity>
                  <urn3:description>Federal - VA</urn3:description>
                  <urn3:homeCommunityId>2.16.840.1.113883.3.200</urn3:homeCommunityId>
                  <urn3:name>Federal - VA</urn3:name>
               </urn3:homeCommunity>
               <urn3:personName>
                  <urn3:familyName>JONES</urn3:familyName>
                  <urn3:givenName>FRED</urn3:givenName>
                  <urn3:nameType>
                     <urn3:code>G</urn3:code>
                     <urn3:codeSystem/>
                     <urn3:codeSystemName/>
                     <urn3:codeSystemVersion/>
                     <urn3:displayName/>
                     <urn3:originalText/>
                  </urn3:nameType>
                  <urn3:secondNameOrInitials>ANDREW</urn3:secondNameOrInitials>
                  <urn3:fullName/>
               </urn3:personName>
               <urn3:phoneNumber>
                  <urn3:areaCode>703</urn3:areaCode>
                  <urn3:countryCode>1</urn3:countryCode>
                  <urn3:extension>1212</urn3:extension>
                  <urn3:localNumber>555</urn3:localNumber>
                  <urn3:phoneNumberType>
                     <urn3:code>W</urn3:code>
                     <urn3:codeSystem/>
                     <urn3:codeSystemName/>
                     <urn3:codeSystemVersion/>
                     <urn3:displayName/>
                     <urn3:originalText/>
                  </urn3:phoneNumberType>
               </urn3:phoneNumber>
               <urn3:secondWitnessAddress>
                  <urn3:addressType>
                     <urn3:code>W</urn3:code>
                     <urn3:codeSystem/>
                     <urn3:codeSystemName/>
                     <urn3:codeSystemVersion/>
                     <urn3:displayName/>
                     <urn3:originalText/>
                  </urn3:addressType>
                  <urn3:city>ALBANY</urn3:city>
                  <urn3:country>USA</urn3:country>
                  <urn3:state>NY</urn3:state>
                  <urn3:streetAddress>4 TROY STREET</urn3:streetAddress>
                  <urn3:zipCode>01033</urn3:zipCode>
               </urn3:secondWitnessAddress>
               <urn3:secondWitnessName>
                  <urn3:familyName>JONES</urn3:familyName>
                  <urn3:givenName>JAMES</urn3:givenName>
                  <urn3:nameType>
                     <urn3:code>G</urn3:code>
                     <urn3:codeSystem/>
                     <urn3:codeSystemName/>
                     <urn3:codeSystemVersion/>
                     <urn3:displayName/>
                     <urn3:originalText/>
                  </urn3:nameType>
                  <urn3:secondNameOrInitials>KENNETH</urn3:secondNameOrInitials>
                  <urn3:fullName/>
               </urn3:secondWitnessName>
               <urn3:secondWitnessPhone>
                  <urn3:areaCode>301</urn3:areaCode>
                  <urn3:countryCode>1</urn3:countryCode>
                  <urn3:extension>555</urn3:extension>
                  <urn3:localNumber>0001</urn3:localNumber>
                  <urn3:phoneNumberType>
                     <urn3:code>W</urn3:code>
                     <urn3:codeSystem/>
                     <urn3:codeSystemName/>
                     <urn3:codeSystemVersion/>
                     <urn3:displayName/>
                     <urn3:originalText/>
                  </urn3:phoneNumberType>
               </urn3:secondWitnessPhone>
               <urn3:SSN>123456789</urn3:SSN>
               <urn3:uniquePatientId>500000000</urn3:uniquePatientId>
               <urn3:witnessAddress>
                  <urn3:addressType>
                     <urn3:code>H</urn3:code>
                     <urn3:codeSystem/>
                     <urn3:codeSystemName/>
                     <urn3:codeSystemVersion/>
                     <urn3:displayName/>
                     <urn3:originalText/>
                  </urn3:addressType>
                  <urn3:city>HARTFORD</urn3:city>
                  <urn3:country>USA</urn3:country>
                  <urn3:state>CT</urn3:state>
                  <urn3:streetAddress>10410 MAIN ST.</urn3:streetAddress>
                  <urn3:zipCode>05032</urn3:zipCode>
               </urn3:witnessAddress>
               <urn3:witnessName>
                  <urn3:familyName>COREY</urn3:familyName>
                  <urn3:givenName>AMANDA</urn3:givenName>
                  <urn3:nameType>
                     <urn3:code>H</urn3:code>
                     <urn3:codeSystem/>
                     <urn3:codeSystemName/>
                     <urn3:codeSystemVersion/>
                     <urn3:displayName/>
                     <urn3:originalText/>
                  </urn3:nameType>
                  <urn3:secondNameOrInitials>EVE</urn3:secondNameOrInitials>
                  <urn3:fullName/>
               </urn3:witnessName>
               <urn3:witnessPhone>
                  <urn3:areaCode>202</urn3:areaCode>
                  <urn3:countryCode>1</urn3:countryCode>
                  <urn3:extension>555</urn3:extension>
                  <urn3:localNumber>1010</urn3:localNumber>
                  <urn3:phoneNumberType>
                     <urn3:code>H</urn3:code>
                     <urn3:codeSystem/>
                     <urn3:codeSystemName/>
                     <urn3:codeSystemVersion/>
                     <urn3:displayName/>
                     <urn3:originalText/>
                  </urn3:phoneNumberType>
               </urn3:witnessPhone>
               <urn3:userInfo>
                  <urn3:personName>
                     <urn3:familyName>FRANKLIN</urn3:familyName>
                     <urn3:givenName>MARK</urn3:givenName>
                     <urn3:nameType>
                        <urn3:code>P</urn3:code>
                        <urn3:codeSystem/>
                        <urn3:codeSystemName/>
                        <urn3:codeSystemVersion/>
                        <urn3:displayName/>
                        <urn3:originalText/>
                     </urn3:nameType>
                     <urn3:secondNameOrInitials>ALAN</urn3:secondNameOrInitials>
                     <urn3:fullName/>
                  </urn3:personName>
                  <urn3:userName>mfranklin</urn3:userName>
                  <urn3:org>
                     <urn3:description>Federal - VA</urn3:description>
                     <urn3:homeCommunityId>2.16.840.1.113883.3.200</urn3:homeCommunityId>
                     <urn3:name>Federal - VA</urn3:name>
                  </urn3:org>
                  <urn3:roleCoded>
                     <urn3:code>80584001</urn3:code>
                     <urn3:codeSystem>2.16.840.1.113883.6.96</urn3:codeSystem>
                     <urn3:codeSystemName>SNOMED_CT</urn3:codeSystemName>
                     <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                     <urn3:displayName>Psychiatrist</urn3:displayName>
                     <urn3:originalText>Psychiatrist</urn3:originalText>
                  </urn3:roleCoded>
               </urn3:userInfo>
               <urn3:authorized>true</urn3:authorized>
               <urn3:purposeOfDisclosureCoded>
                  <urn3:code>PSYCHOTHERAPY</urn3:code>
                  <urn3:codeSystem>2.16.840.1.113883.3.18.7.1</urn3:codeSystem>
                  <urn3:codeSystemName>nhin-purpose</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>Use or disclosure of Psychotherapy Notes</urn3:displayName>
                  <urn3:originalText>Psychotherapy Notes</urn3:originalText>
               </urn3:purposeOfDisclosureCoded>
               <!--urn3:claimFormRef>Ref-Clm-123</urn3:claimFormRef-->
               <!--urn3:claimFormRaw>YWVvbGlhbQ==</urn3:claimFormRaw-->
               <urn3:samlAuthnStatement>
                  <urn3:authInstant>myAuthInstant</urn3:authInstant>
                  <urn3:sessionIndex>mySessionIndex</urn3:sessionIndex>
                  <urn3:authContextClassRef>myContextClassRef</urn3:authContextClassRef>
                  <urn3:subjectLocalityAddress>mySubjectLocalityAddress</urn3:subjectLocalityAddress>
                  <urn3:subjectLocalityDNSName>mySubjectLocalityDns</urn3:subjectLocalityDNSName>
               </urn3:samlAuthnStatement>
               <urn3:samlAuthzDecisionStatement>
                  <urn3:decision>myAuthzDecisionStatementDecision</urn3:decision>
                  <urn3:resource>myAuthzDecisionStatementResource</urn3:resource>
                  <urn3:action>myAuthzDecisionStatementAction</urn3:action>
                  <urn3:evidence>
                     <urn3:assertion>
                        <urn3:id>AuthzDecisionStatementEvidenceAssertionId</urn3:id>
                        <urn3:issueInstant>AuthzDecisionStatementEvidenceAssertionIssueInstant</urn3:issueInstant>
                        <urn3:version>AuthzDecisionStatementEvidenceAssertionVersion</urn3:version>
                        <urn3:issuer>AuthzDecisionStatementEvidenceAssertionIssuer</urn3:issuer>
                        <urn3:conditions>
                           <urn3:notBefore>2001-01-01T01:00:00.000Z</urn3:notBefore>
                           <urn3:notOnOrAfter>2005-05-06T22:00:17.000Z</urn3:notOnOrAfter>
                        </urn3:conditions>
                     </urn3:assertion>
                  </urn3:evidence>
               </urn3:samlAuthzDecisionStatement>
            </ec:assertion>
         </ec:message>
         <urn1:direction xmlns:urn6="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0">INBOUND</urn1:direction>
         <urn1:interface xmlns:urn6="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0">NHIN</urn1:interface>
         <urn1:sendingHomeCommunity xmlns:urn6="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0">
            <urn5:description>1.1</urn5:description>
            <urn5:homeCommunityId>1.1</urn5:homeCommunityId>
            <urn5:name>1.1</urn5:name>
         </urn1:sendingHomeCommunity>
         <urn1:receivingHomeCommunity xmlns:urn6="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0">
            <urn5:description>2.2</urn5:description>
            <urn5:homeCommunityId>2.2</urn5:homeCommunityId>
            <urn5:name>2.2</urn5:name>
         </urn1:receivingHomeCommunity>
      </urn:TransformAdhocQueryToCheckPolicyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:assertion name="AuthnStatementAuthnInstant " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('Checking authInstant');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthnStatement/nc:authInstant"];
log.info('AssertionValue=' + AssertionValue);

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthnStatement/nc:authInstant)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';
def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-instant']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-instant']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-instant'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");
								</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="AuthnStatementSessionIndex" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('Checking sessionIndex');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthnStatement/nc:sessionIndex"];
log.info('AssertionValue=' + AssertionValue);

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthnStatement/nc:sessionIndex)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';
def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:session-index']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:session-index']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:session-index'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");
								</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="AuthnStatementAthnContextClassRef " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('Checking authContextClassRef');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthnStatement/nc:authContextClassRef"];
log.info('AssertionValue=' + AssertionValue);

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthnStatement/nc:authContextClassRef)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';
def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-context-class-ref']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-context-class-ref']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-context-class-ref'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");
								</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="AuthnStatementSubjectLocalityAddress " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('Checking subjectLocalityAddress');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityAddress"];
log.info('AssertionValue=' + AssertionValue);

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityAddress)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';
def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:ip-address']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:ip-address']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:ip-address'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");
								</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="AuthnStatementDNSName " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('Checking subjectLocalityDNSName');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityDNSName"];
log.info('AssertionValue=' + AssertionValue);

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityDNSName)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';
def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:dns-name']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:dns-name']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:dns-name'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");
								</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="UserPersonName" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('Checking username (personname)');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:userInfo/nc:userName)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:oasis:names:tc:xacml:1.0:subject:subject-id'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:userInfo/nc:userName"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:oasis:names:tc:xacml:1.0:subject:subject-id']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:oasis:names:tc:xacml:1.0:subject:subject-id']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);
								</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="UserOrganizationName" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('Checking user organization');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:userInfo/nc:org/nc:name)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-organization-name'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:userInfo/nc:org/nc:name"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-organization-name']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-organization-name']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="UserRoleCode" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('Checking user role coded');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:userInfo/nc:roleCoded/nc:code)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-code'])"];
log.info('XacmlAttributeCount='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:userInfo/nc:roleCoded/nc:code"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-code']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-code']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="UserRoleCodeSystem " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('Checking user role system');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="UserRoleCodeSystemName " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('Checking user role system name');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="UserRoleCodeDiplayName " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('Checking user role display name');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-description'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-description']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-description']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="PurposeForUseCode" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('PurposeForUseCode');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:purposeOfDisclosureCoded/nc:code)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:purposeOfDisclosureCoded/nc:code"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);
								</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="PurposeForUseCodeSystem" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('PurposeForUseCodeSystem');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);
								</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="PurposeForUseCodeSystemName" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('PurposeForUseCodeSystemName');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="PurposeForUseCodeDisplayName" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('PurposeForUseCodeDisplayName');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);
								</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="AuthzDecisionStatementDecision" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementDecision');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="AuthzDecisionStatementResource" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementResource');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="AuthzDecisionStatementAction" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementAction');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:action)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:action"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);
								</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="AuthzDecisionStatementEvidenceAssertionID " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionID');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="AuthzDecisionStatementEvidenceAssertionIssueInstant" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionIssueInstant');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="AuthzDecisionStatementEvidenceAssertionVersion" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionVersion');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="AuthzDecisionStatementEvidenceAssertionIssuer" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionIssuer');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);
								</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="AuthzDecisionStatementEvidenceAssertionConditionsNotBefore" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionConditionsNotBefore');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="AuthzDecisionStatementEvidenceAssertionContentReference " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionContentReference');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="AuthzDecisionStatementEvidenceAssertionContentType " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionContentType');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion name="AuthzDecisionStatementEvidenceAssertionContent " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionContent');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-asssertion-content'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-asssertion-content']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-asssertion-content']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#base64Binary';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:properties/>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:testCase disabled="true" failOnError="true" failTestCaseOnErrors="true" id="9e80a120-6047-4f37-a42b-50a7662c76ff" keepSession="false" maxResults="0" name="doc query message to DTE - minimal data" searchProperties="true">
			<con:settings/>
			<con:testStep name="message - empty assertion" type="request">
				<con:settings/>
				<con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:interface>NhincInternalComponentPolicyEngineTransformPortTypeBinding</con:interface>
					<con:operation>TransformAdhocQueryToCheckPolicy</con:operation>
					<con:request name="message - empty assertion">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://localhost:8080/NhinConnect/PolicyEngineGatewayTransformationService</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:policyenginedte" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:eventcommon" xmlns:urn2="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:urn3="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:urn4="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:urn5="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:TransformAdhocQueryToCheckPolicyRequest>
         <ec:message xmlns:ec="urn:gov:hhs:fha:nhinc:common:eventcommon" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonproxy" xmlns:urn1="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:urn2="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:urn3="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:add="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:urn6="urn:gov:hhs:fha:nhinc:common:eventcommon">
            <urn1:AdhocQueryRequest federated="false" startIndex="0" maxResults="-1" xmlns:urn7="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0">
               <urn1:ResponseOption returnType="RegistryObject" returnComposedObjects="false"/>
               <urn2:AdhocQuery home="urn:oid:1.1" id="urn:uuid:14d4debf-8f97-4251-9a74-a90016b0af0d">
                  <urn2:Slot name="$XDSDocumentEntryStatus">
                     <urn2:ValueList>
                        <urn2:Value>('urn:oasis:names:tc:ebxml-regrep:StatusType:Approved')</urn2:Value>
                     </urn2:ValueList>
                  </urn2:Slot>
                  <urn2:Slot name="$XDSDocumentEntryPatientId">
                     <urn2:ValueList>
                        <urn2:Value>'D123401^^^&amp;2.16.840.1.113883.3.198.1&amp;ISO'</urn2:Value>
                     </urn2:ValueList>
                  </urn2:Slot>
               </urn2:AdhocQuery>
            </urn1:AdhocQueryRequest>
            <ec:assertion>
            </ec:assertion>
         </ec:message>
         <urn1:direction xmlns:urn6="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0">INBOUND</urn1:direction>
         <urn1:interface xmlns:urn6="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0">NHIN</urn1:interface>
         <urn1:sendingHomeCommunity xmlns:urn6="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0">
            <urn5:description>1.1</urn5:description>
            <urn5:homeCommunityId>1.1</urn5:homeCommunityId>
            <urn5:name>1.1</urn5:name>
         </urn1:sendingHomeCommunity>
         <urn1:receivingHomeCommunity xmlns:urn6="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0">
            <urn5:description>2.2</urn5:description>
            <urn5:homeCommunityId>2.2</urn5:homeCommunityId>
            <urn5:name>2.2</urn5:name>
         </urn1:receivingHomeCommunity>
      </urn:TransformAdhocQueryToCheckPolicyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:properties/>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:testCase disabled="true" failOnError="true" failTestCaseOnErrors="true" id="28268c77-a4a8-4a48-a708-69768213b7ff" keepSession="false" maxResults="0" name="inbound doc query" searchProperties="true">
			<con:settings/>

			<con:testStep name="update config" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def destConfigFileLocation = context.findProperty("GatewayConfigurationDirectory");

FileUtils.UpdateProperty(destConfigFileLocation,"gateway.properties","serviceDocumentQuery","true",context,log);
FileUtils.UpdateProperty(destConfigFileLocation,"gateway.properties","localHomeCommunityId","1.1",context,log);

FileUtils.CreateOrUpdateConnection(destConfigFileLocation,"1.1","policyengineservice","http://localhost:18081/mockPolicyEngine",context,log);


					</script>
				</con:config>
			</con:testStep>
			<con:testStep name="send request" type="request">
				<con:settings/>
				<con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:interface>NhincProxyDocQueryBindingSoap</con:interface>
					<con:operation>RespondingGateway_CrossGatewayQuery</con:operation>
					<con:request name="send request">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#NhincProxyDocQueryEndpoint}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonproxy" xmlns:urn1="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:urn2="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:urn3="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:add="http://schemas.xmlsoap.org/ws/2004/08/addressing">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:RespondingGateway_CrossGatewayQueryRequest xsi:schemaLocation="urn:gov:hhs:fha:nhinc:common:nhinccommonproxy C:\projects\NHINC\2.3\Product\Production\Common\Interfaces\src\schemas\nhinc\common\NhincCommonProxy.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
         <urn1:AdhocQueryRequest federated="false" startIndex="0" maxResults="-1">
            <urn1:ResponseOption returnType="RegistryObject" returnComposedObjects="false"/>
            <urn2:AdhocQuery home="urn:oid:1.1" id="urn:uuid:14d4debf-8f97-4251-9a74-a90016b0af0d">
               <urn2:Slot name="$XDSDocumentEntryStatus">
                  <urn2:ValueList>
                     <urn2:Value>('urn:oasis:names:tc:ebxml-regrep:StatusType:Approved')</urn2:Value>
                  </urn2:ValueList>
               </urn2:Slot>
               <urn2:Slot name="$XDSDocumentEntryPatientId">
                  <urn2:ValueList>
                     <urn2:Value>'D123401^^^&amp;1.1&amp;ISO'</urn2:Value>
                  </urn2:ValueList>
               </urn2:Slot>
            </urn2:AdhocQuery>
         </urn1:AdhocQueryRequest>
         <urn:assertion>
            <urn3:address>
               <urn3:addressType>
                  <urn3:code>W</urn3:code>
                  <urn3:codeSystem/>
                  <urn3:codeSystemName/>
                  <urn3:codeSystemVersion/>
                  <urn3:displayName/>
                  <urn3:originalText/>
               </urn3:addressType>
               <urn3:city>BUFFALO</urn3:city>
               <urn3:country>USA</urn3:country>
               <urn3:state>NY</urn3:state>
               <urn3:streetAddress>12345 EAST COAST WAY</urn3:streetAddress>
               <urn3:zipCode>01010</urn3:zipCode>
            </urn3:address>
            <urn3:dateOfBirth>19800516</urn3:dateOfBirth>
            <urn3:explanationNonClaimantSignature>NEEDED</urn3:explanationNonClaimantSignature>
            <urn3:haveSecondWitnessSignature>true</urn3:haveSecondWitnessSignature>
            <urn3:haveSignature>true</urn3:haveSignature>
            <urn3:haveWitnessSignature>true</urn3:haveWitnessSignature>
            <urn3:homeCommunity xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
               <urn3:description>Federal - VA</urn3:description>
               <urn3:homeCommunityId>2.2</urn3:homeCommunityId>
               <urn3:name>Federal - VA</urn3:name>
            </urn3:homeCommunity>
            <urn3:personName>
               <urn3:familyName>JONES</urn3:familyName>
               <urn3:givenName>FRED</urn3:givenName>
               <urn3:nameType>
                  <urn3:code>G</urn3:code>
                  <urn3:codeSystem/>
                  <urn3:codeSystemName/>
                  <urn3:codeSystemVersion/>
                  <urn3:displayName/>
                  <urn3:originalText/>
               </urn3:nameType>
               <urn3:secondNameOrInitials>ANDREW</urn3:secondNameOrInitials>
               <urn3:fullName/>
            </urn3:personName>
            <urn3:phoneNumber>
               <urn3:areaCode>703</urn3:areaCode>
               <urn3:countryCode>1</urn3:countryCode>
               <urn3:extension>1212</urn3:extension>
               <urn3:localNumber>555</urn3:localNumber>
               <urn3:phoneNumberType>
                  <urn3:code>W</urn3:code>
                  <urn3:codeSystem/>
                  <urn3:codeSystemName/>
                  <urn3:codeSystemVersion/>
                  <urn3:displayName/>
                  <urn3:originalText/>
               </urn3:phoneNumberType>
            </urn3:phoneNumber>
            <urn3:secondWitnessAddress>
               <urn3:addressType>
                  <urn3:code>W</urn3:code>
                  <urn3:codeSystem/>
                  <urn3:codeSystemName/>
                  <urn3:codeSystemVersion/>
                  <urn3:displayName/>
                  <urn3:originalText/>
               </urn3:addressType>
               <urn3:city>ALBANY</urn3:city>
               <urn3:country>USA</urn3:country>
               <urn3:state>NY</urn3:state>
               <urn3:streetAddress>4 TROY STREET</urn3:streetAddress>
               <urn3:zipCode>01033</urn3:zipCode>
            </urn3:secondWitnessAddress>
            <urn3:secondWitnessName>
               <urn3:familyName>JONES</urn3:familyName>
               <urn3:givenName>JAMES</urn3:givenName>
               <urn3:nameType>
                  <urn3:code>G</urn3:code>
                  <urn3:codeSystem/>
                  <urn3:codeSystemName/>
                  <urn3:codeSystemVersion/>
                  <urn3:displayName/>
                  <urn3:originalText/>
               </urn3:nameType>
               <urn3:secondNameOrInitials>KENNETH</urn3:secondNameOrInitials>
               <urn3:fullName/>
            </urn3:secondWitnessName>
            <urn3:secondWitnessPhone>
               <urn3:areaCode>301</urn3:areaCode>
               <urn3:countryCode>1</urn3:countryCode>
               <urn3:extension>555</urn3:extension>
               <urn3:localNumber>0001</urn3:localNumber>
               <urn3:phoneNumberType>
                  <urn3:code>W</urn3:code>
                  <urn3:codeSystem/>
                  <urn3:codeSystemName/>
                  <urn3:codeSystemVersion/>
                  <urn3:displayName/>
                  <urn3:originalText/>
               </urn3:phoneNumberType>
            </urn3:secondWitnessPhone>
            <urn3:SSN>123456789</urn3:SSN>
            <urn3:uniquePatientId xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">500000000^^^&amp;1.1&amp;ISO</urn3:uniquePatientId>
            <urn3:witnessAddress>
               <urn3:addressType>
                  <urn3:code>H</urn3:code>
                  <urn3:codeSystem/>
                  <urn3:codeSystemName/>
                  <urn3:codeSystemVersion/>
                  <urn3:displayName/>
                  <urn3:originalText/>
               </urn3:addressType>
               <urn3:city>HARTFORD</urn3:city>
               <urn3:country>USA</urn3:country>
               <urn3:state>CT</urn3:state>
               <urn3:streetAddress>10410 MAIN ST.</urn3:streetAddress>
               <urn3:zipCode>05032</urn3:zipCode>
            </urn3:witnessAddress>
            <urn3:witnessName>
               <urn3:familyName>COREY</urn3:familyName>
               <urn3:givenName>AMANDA</urn3:givenName>
               <urn3:nameType>
                  <urn3:code>H</urn3:code>
                  <urn3:codeSystem/>
                  <urn3:codeSystemName/>
                  <urn3:codeSystemVersion/>
                  <urn3:displayName/>
                  <urn3:originalText/>
               </urn3:nameType>
               <urn3:secondNameOrInitials>EVE</urn3:secondNameOrInitials>
               <urn3:fullName/>
            </urn3:witnessName>
            <urn3:witnessPhone>
               <urn3:areaCode>202</urn3:areaCode>
               <urn3:countryCode>1</urn3:countryCode>
               <urn3:extension>555</urn3:extension>
               <urn3:localNumber>1010</urn3:localNumber>
               <urn3:phoneNumberType>
                  <urn3:code>H</urn3:code>
                  <urn3:codeSystem/>
                  <urn3:codeSystemName/>
                  <urn3:codeSystemVersion/>
                  <urn3:displayName/>
                  <urn3:originalText/>
               </urn3:phoneNumberType>
            </urn3:witnessPhone>
            <urn3:userInfo>
               <urn3:personName>
                  <urn3:familyName>FRANKLIN</urn3:familyName>
                  <urn3:givenName>MARK</urn3:givenName>
                  <urn3:nameType>
                     <urn3:code>P</urn3:code>
                     <urn3:codeSystem/>
                     <urn3:codeSystemName/>
                     <urn3:codeSystemVersion/>
                     <urn3:displayName/>
                     <urn3:originalText/>
                  </urn3:nameType>
                  <urn3:secondNameOrInitials>ALAN</urn3:secondNameOrInitials>
                  <urn3:fullName/>
               </urn3:personName>
               <urn3:userName>mfranklin</urn3:userName>
               <urn3:org>
                  <urn3:description>Federal - VA</urn3:description>
                  <urn3:homeCommunityId>2.2</urn3:homeCommunityId>
                  <urn3:name>Federal - VA</urn3:name>
               </urn3:org>
               <urn3:roleCoded>
                  <urn3:code>80584001</urn3:code>
                  <urn3:codeSystem>2.16.840.1.113883.6.96</urn3:codeSystem>
                  <urn3:codeSystemName>SNOMED_CT</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>Psychiatrist</urn3:displayName>
                  <urn3:originalText>Psychiatrist</urn3:originalText>
               </urn3:roleCoded>
            </urn3:userInfo>
            <urn3:authorized>true</urn3:authorized>
            <urn3:purposeOfDisclosureCoded>
               <urn3:code>PSYCHOTHERAPY</urn3:code>
               <urn3:codeSystem>2.16.840.1.113883.3.18.7.1</urn3:codeSystem>
               <urn3:codeSystemName>nhin-purpose</urn3:codeSystemName>
               <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
               <urn3:displayName>Use or disclosure of Psychotherapy Notes</urn3:displayName>
               <urn3:originalText>Psychotherapy Notes</urn3:originalText>
            </urn3:purposeOfDisclosureCoded>
            <!--urn3:claimFormRef>Ref-Clm-123</urn3:claimFormRef-->
            <!--urn3:claimFormRaw>YWVvbGlhbQ==</urn3:claimFormRaw-->
            <urn3:samlAuthnStatement>
               <urn3:authInstant>2009-09-01T13:00:00.000Z</urn3:authInstant>
               <urn3:sessionIndex>mySessionIndex</urn3:sessionIndex>
               <urn3:authContextClassRef>myContextClassRef</urn3:authContextClassRef>
               <urn3:subjectLocalityAddress>mySubjectLocalityAddress</urn3:subjectLocalityAddress>
               <urn3:subjectLocalityDNSName>mySubjectLocalityDns</urn3:subjectLocalityDNSName>
            </urn3:samlAuthnStatement>
            <urn3:samlAuthzDecisionStatement>
               <urn3:decision>Permit</urn3:decision>
               <urn3:resource>myAuthzDecisionStatementResource</urn3:resource>
               <urn3:action>myAuthzDecisionStatementAction</urn3:action>
               <urn3:evidence>
                  <urn3:assertion>
                     <urn3:id>AuthzDecisionStatementEvidenceAssertionId</urn3:id>
                     <urn3:issueInstant>2009-09-02T14:00:00.000Z</urn3:issueInstant>
                     <urn3:version>2.0</urn3:version>
                     <urn3:issuer>CN=Mr Saml User,OU=SU,O=Mr SAML Org,L=Chantilly,ST=VA,C=US</urn3:issuer>
                     <urn3:issuerFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</urn3:issuerFormat>
                     <urn3:conditions>
                        <urn3:notBefore>2001-01-01T01:00:00.000Z</urn3:notBefore>
                        <urn3:notOnOrAfter>2005-05-06T22:00:17.000Z</urn3:notOnOrAfter>
                     </urn3:conditions>
                     <urn3:accessConsentPolicy>urn:oid:1.2.3.4</urn3:accessConsentPolicy>
                     <urn3:instanceAccessConsentPolicy>urn:oid:1.2.3.4.123456789</urn3:instanceAccessConsentPolicy>
                  </urn3:assertion>
               </urn3:evidence>
            </urn3:samlAuthzDecisionStatement>
         </urn:assertion>
        <!-- <urn:nhinTargetSystem>
            <urn3:url>https://localhost:8181/CONNECTNhinServicesWeb/NhinService/RespondingGateway_Query_Service/DocQuery</urn3:url>
         </urn:nhinTargetSystem> -->
         <urn:nhinTargetSystem>
            <urn2:homeCommunity>
               <urn2:description>localmachine</urn2:description>
               <urn2:homeCommunityId>1.1</urn2:homeCommunityId>
               <urn2:name>localmachine</urn2:name>
            </urn2:homeCommunity>
         </urn:nhinTargetSystem>
      </urn:RespondingGateway_CrossGatewayQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:assertion disabled="true" name="UserRoleCodeSystem " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('Checking user role system');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="UserRoleCodeSystemName " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('Checking user role system name');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="UserRoleCodeDiplayName " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('Checking user role display name');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-description'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-description']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-description']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="PurposeForUseCode" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('PurposeForUseCode');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:purposeOfDisclosureCoded/nc:code)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:purposeOfDisclosureCoded/nc:code"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);
								</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="PurposeForUseCodeSystem" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('PurposeForUseCodeSystem');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);
								</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="PurposeForUseCodeSystemName" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('PurposeForUseCodeSystemName');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="PurposeForUseCodeDisplayName" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('PurposeForUseCodeDisplayName');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);
								</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementDecision" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementDecision');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementResource" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementResource');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementAction" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementAction');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:action)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:action"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);
								</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionID " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionID');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionIssueInstant" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionIssueInstant');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionVersion" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionVersion');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionIssuer" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionIssuer');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);
								</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotBefore" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionConditionsNotBefore');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentReference " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionContentReference');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentType " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionContentType');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContent " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionContent');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-asssertion-content'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-asssertion-content']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-asssertion-content']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#base64Binary';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="mock policy engine" type="mockresponse">
				<con:settings/>
				<con:config startStep="send request" xsi:type="con:MockResponseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:interface>AdapterPolicyEngineBindingSoap</con:interface>
					<con:operation>CheckPolicy</con:operation>
					<con:path>/mockPolicyEngine</con:path>
					<con:port>18081</con:port>
					<con:timeout>30000</con:timeout>
					<con:response>
						<con:settings/>
						<con:responseContent><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:urn1="urn:oasis:names:tc:xacml:2.0:context:schema:os">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:CheckPolicyResponse>
         <urn:response>
            <urn1:Result>
               <urn1:Decision>deny</urn1:Decision>
            </urn1:Result>
         </urn:response>
      </urn:CheckPolicyResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
					</con:response>
					<con:assertion name="AuthnStatementAuthnInstant " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='authInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authInstant'
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-instant';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementSessionIndex" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='sessionIndex';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:sessionIndex';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:session-index';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthnStatementAthnContextClassRef " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='authContextClassRef';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authContextClassRef';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-context-class-ref';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementSubjectLocalityAddress " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='subjectLocalityAddress';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityAddress';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:ip-address';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementDNSName " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='subjectLocalityDNSName';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityDNSName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:dns-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserPersonName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='personname';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:userName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserOrganizationName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user organization';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:name';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-organization-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCode" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role coded';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code';
def XacmlAttributeId='urn:oasis:names:tc:xacml:2.0:subject:role';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCodeSystem " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role system';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCodeSystemName " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role system name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCodeDiplayName " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role display name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-description';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCode" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCode';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:purposeofuse';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCodeSystem" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCodeSystem';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCodeSystemName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCodeSystemName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCodeDisplayName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCodeDisplayName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementDecision" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementDecision';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementResource" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementResource';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementAction" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementAction';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:action';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
//log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);
def ExpectedValue='Execute';
//log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (ExpectedValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionID " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionID';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionIssueInstant" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssueInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionVersion" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionVersion';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionIssuer" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssuer';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionConditionsNotBefore" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotBefore';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2001-01-01T06:00:00.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2009-05-07T02:00:17.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentReference " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentReference';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentType " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentType';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContent " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="HomeCommunityId" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='home-community-id';
def AssertionXpath='//ec:assertion/nc:homeCommunity/nc:homeCommunityId';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:home-community-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="OrganizationId" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='organizationid';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:homeCommunityId';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:organization-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PatientId" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PatientId';
def AssertionXpath='//ec:assertion/nc:uniquePatientId';
def XacmlAttributeId='http://www.hhs.gov/healthit/nhin#subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';
mockRequestHolder.namespaces['hl7'] = 'urn:hl7-org:v3';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValueExtension = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@extension"]
def ExpectedExtension = '1.1';
log.info('XacmlAttributeValue(' + FieldName + '@extension)=' + XacmlValueExtension);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) => ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueExtension==ExpectedExtension);

def XacmlValueRoot = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@root"]
def ExpectedRoot = '500000000';
log.info('XacmlAttributeValue(' + FieldName + '@root)=' + XacmlValueRoot);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) => ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueRoot==ExpectedRoot);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'urn:hl7-org:v3#II';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionAccessConsent" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:accessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:instanceAccessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-instance-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion type="XPath Match">
						<con:configuration/>
					</con:assertion>
					<con:assertion disabled="true" name="Namespace for Action" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns6='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns19='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns19:CheckPolicyRequest[1]/ns19:request[1]/ns6:Resource[1]/ns6:Attribute[6]/@AttributeId</path>
							<content>urn:oasis:names:tc:SAML:1.0:action:rwedc:saml-authz-decision-statement-action</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="Action Value" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns6='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns19='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns19:CheckPolicyRequest[1]/ns19:request[1]/ns6:Resource[1]/ns6:Attribute[6]/ns6:AttributeValue[1]</path>
							<content>Execute</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:assertion type="XPath Match">
						<con:configuration>
							<path>declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace ns19='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns19:CheckPolicyRequest[1]/ns19:assertion[1]/ns18:samlAuthzDecisionStatement[1]/ns18:action[1]</path>
							<content>Execute</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
				</con:config>
			</con:testStep>
			
			<con:properties/>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="fd1b9658-4c4e-40fa-b962-8cb80efc9daa" keepSession="false" maxResults="0" name="inbound doc retrieve" searchProperties="true">
			<con:settings/>

			<con:testStep name="update config" type="groovy">
				<con:settings/>
				<con:config><script>nhinc.FileUtils.createOrUpdateConnection("internalConnectionInfo.xml", context.findProperty("GatewayPropDir"),"1.1","policyengineservice","http://localhost:18084/mockPolicyEngine", "LEVEL_a0", log);


					</script></con:config>
			</con:testStep>
			<con:testStep name="send request" type="request">
				<con:settings/>
				<con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:interface>NhincProxyDocRetrieveBindingSoap</con:interface>
					<con:operation>RespondingGateway_CrossGatewayRetrieve</con:operation>
					<con:request name="send request">
						<con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#NhincProxyDocRetrieveEndpoint}</con:endpoint>
						<con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonproxy" xmlns:urn1="urn:ihe:iti:xds-b:2007" xmlns:urn2="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:add="http://schemas.xmlsoap.org/ws/2004/08/addressing">
   <soapenv:Header/>
   <soapenv:Body projectName="PolicyEngineInteractions" testCase="inbound doc retrieve">
      <urn:RespondingGateway_CrossGatewayRetrieveRequest>
         <urn1:RetrieveDocumentSetRequest>
            <urn1:DocumentRequest>
               <urn1:HomeCommunityId>urn:oid:2.16.840.1.113883.3.198</urn1:HomeCommunityId>
               <urn1:RepositoryUniqueId>1</urn1:RepositoryUniqueId>
               <urn1:DocumentUniqueId>555555555</urn1:DocumentUniqueId>
            </urn1:DocumentRequest>
         </urn1:RetrieveDocumentSetRequest>
         <urn:assertion xmlns:urn3="urn:gov:hhs:fha:nhinc:common:nhinccommon">
            <urn3:address>
               <urn3:addressType>
                  <urn3:code>W</urn3:code>
                  <urn3:codeSystem/>
                  <urn3:codeSystemName/>
                  <urn3:codeSystemVersion/>
                  <urn3:displayName/>
                  <urn3:originalText/>
               </urn3:addressType>
               <urn3:city>BUFFALO</urn3:city>
               <urn3:country>USA</urn3:country>
               <urn3:state>NY</urn3:state>
               <urn3:streetAddress>12345 EAST COAST WAY</urn3:streetAddress>
               <urn3:zipCode>01010</urn3:zipCode>
            </urn3:address>
            <urn3:dateOfBirth>19800516</urn3:dateOfBirth>
            <urn3:explanationNonClaimantSignature>NEEDED</urn3:explanationNonClaimantSignature>
            <urn3:haveSecondWitnessSignature>true</urn3:haveSecondWitnessSignature>
            <urn3:haveSignature>true</urn3:haveSignature>
            <urn3:haveWitnessSignature>true</urn3:haveWitnessSignature>
            <urn3:homeCommunity>
               <urn3:description>Federal - VA</urn3:description>
               <urn3:homeCommunityId>2.16.840.1.113883.3.200</urn3:homeCommunityId>
               <urn3:name>Federal - VA</urn3:name>
            </urn3:homeCommunity>
            <urn3:personName>
               <urn3:familyName>JONES</urn3:familyName>
               <urn3:givenName>FRED</urn3:givenName>
               <urn3:nameType>
                  <urn3:code>G</urn3:code>
                  <urn3:codeSystem/>
                  <urn3:codeSystemName/>
                  <urn3:codeSystemVersion/>
                  <urn3:displayName/>
                  <urn3:originalText/>
               </urn3:nameType>
               <urn3:secondNameOrInitials>ANDREW</urn3:secondNameOrInitials>
               <urn3:fullName/>
            </urn3:personName>
            <urn3:phoneNumber>
               <urn3:areaCode>703</urn3:areaCode>
               <urn3:countryCode>1</urn3:countryCode>
               <urn3:extension>1212</urn3:extension>
               <urn3:localNumber>555</urn3:localNumber>
               <urn3:phoneNumberType>
                  <urn3:code>W</urn3:code>
                  <urn3:codeSystem/>
                  <urn3:codeSystemName/>
                  <urn3:codeSystemVersion/>
                  <urn3:displayName/>
                  <urn3:originalText/>
               </urn3:phoneNumberType>
            </urn3:phoneNumber>
            <urn3:secondWitnessAddress>
               <urn3:addressType>
                  <urn3:code>W</urn3:code>
                  <urn3:codeSystem/>
                  <urn3:codeSystemName/>
                  <urn3:codeSystemVersion/>
                  <urn3:displayName/>
                  <urn3:originalText/>
               </urn3:addressType>
               <urn3:city>ALBANY</urn3:city>
               <urn3:country>USA</urn3:country>
               <urn3:state>NY</urn3:state>
               <urn3:streetAddress>4 TROY STREET</urn3:streetAddress>
               <urn3:zipCode>01033</urn3:zipCode>
            </urn3:secondWitnessAddress>
            <urn3:secondWitnessName>
               <urn3:familyName>JONES</urn3:familyName>
               <urn3:givenName>JAMES</urn3:givenName>
               <urn3:nameType>
                  <urn3:code>G</urn3:code>
                  <urn3:codeSystem/>
                  <urn3:codeSystemName/>
                  <urn3:codeSystemVersion/>
                  <urn3:displayName/>
                  <urn3:originalText/>
               </urn3:nameType>
               <urn3:secondNameOrInitials>KENNETH</urn3:secondNameOrInitials>
               <urn3:fullName/>
            </urn3:secondWitnessName>
            <urn3:secondWitnessPhone>
               <urn3:areaCode>301</urn3:areaCode>
               <urn3:countryCode>1</urn3:countryCode>
               <urn3:extension>555</urn3:extension>
               <urn3:localNumber>0001</urn3:localNumber>
               <urn3:phoneNumberType>
                  <urn3:code>W</urn3:code>
                  <urn3:codeSystem/>
                  <urn3:codeSystemName/>
                  <urn3:codeSystemVersion/>
                  <urn3:displayName/>
                  <urn3:originalText/>
               </urn3:phoneNumberType>
            </urn3:secondWitnessPhone>
            <urn3:SSN>123456789</urn3:SSN>
            <urn3:uniquePatientId xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">500000000^^^&amp;1.1&amp;ISO</urn3:uniquePatientId>
            <urn3:witnessAddress>
               <urn3:addressType>
                  <urn3:code>H</urn3:code>
                  <urn3:codeSystem/>
                  <urn3:codeSystemName/>
                  <urn3:codeSystemVersion/>
                  <urn3:displayName/>
                  <urn3:originalText/>
               </urn3:addressType>
               <urn3:city>HARTFORD</urn3:city>
               <urn3:country>USA</urn3:country>
               <urn3:state>CT</urn3:state>
               <urn3:streetAddress>10410 MAIN ST.</urn3:streetAddress>
               <urn3:zipCode>05032</urn3:zipCode>
            </urn3:witnessAddress>
            <urn3:witnessName>
               <urn3:familyName>COREY</urn3:familyName>
               <urn3:givenName>AMANDA</urn3:givenName>
               <urn3:nameType>
                  <urn3:code>H</urn3:code>
                  <urn3:codeSystem/>
                  <urn3:codeSystemName/>
                  <urn3:codeSystemVersion/>
                  <urn3:displayName/>
                  <urn3:originalText/>
               </urn3:nameType>
               <urn3:secondNameOrInitials>EVE</urn3:secondNameOrInitials>
               <urn3:fullName/>
            </urn3:witnessName>
            <urn3:witnessPhone>
               <urn3:areaCode>202</urn3:areaCode>
               <urn3:countryCode>1</urn3:countryCode>
               <urn3:extension>555</urn3:extension>
               <urn3:localNumber>1010</urn3:localNumber>
               <urn3:phoneNumberType>
                  <urn3:code>H</urn3:code>
                  <urn3:codeSystem/>
                  <urn3:codeSystemName/>
                  <urn3:codeSystemVersion/>
                  <urn3:displayName/>
                  <urn3:originalText/>
               </urn3:phoneNumberType>
            </urn3:witnessPhone>
            <urn3:userInfo>
               <urn3:personName>
                  <urn3:familyName>FRANKLIN</urn3:familyName>
                  <urn3:givenName>MARK</urn3:givenName>
                  <urn3:nameType>
                     <urn3:code>P</urn3:code>
                     <urn3:codeSystem/>
                     <urn3:codeSystemName/>
                     <urn3:codeSystemVersion/>
                     <urn3:displayName/>
                     <urn3:originalText/>
                  </urn3:nameType>
                  <urn3:secondNameOrInitials>ALAN</urn3:secondNameOrInitials>
                  <urn3:fullName/>
               </urn3:personName>
               <urn3:userName>mfranklin</urn3:userName>
               <urn3:org>
                  <urn3:description>Federal - VA</urn3:description>
                  <urn3:homeCommunityId>2.16.840.1.113883.3.200</urn3:homeCommunityId>
                  <urn3:name>Federal - VA</urn3:name>
               </urn3:org>
               <urn3:roleCoded>
                  <urn3:code>80584001</urn3:code>
                  <urn3:codeSystem>2.16.840.1.113883.6.96</urn3:codeSystem>
                  <urn3:codeSystemName>SNOMED_CT</urn3:codeSystemName>
                  <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
                  <urn3:displayName>Psychiatrist</urn3:displayName>
                  <urn3:originalText>Psychiatrist</urn3:originalText>
               </urn3:roleCoded>
            </urn3:userInfo>
            <urn3:authorized>true</urn3:authorized>
            <urn3:purposeOfDisclosureCoded>
               <urn3:code>PSYCHOTHERAPY</urn3:code>
               <urn3:codeSystem>2.16.840.1.113883.3.18.7.1</urn3:codeSystem>
               <urn3:codeSystemName>nhin-purpose</urn3:codeSystemName>
               <urn3:codeSystemVersion>1.0</urn3:codeSystemVersion>
               <urn3:displayName>Use or disclosure of Psychotherapy Notes</urn3:displayName>
               <urn3:originalText>Psychotherapy Notes</urn3:originalText>
            </urn3:purposeOfDisclosureCoded>
            <!--urn3:claimFormRef>Ref-Clm-123</urn3:claimFormRef-->
            <!--urn3:claimFormRaw>YWVvbGlhbQ==</urn3:claimFormRaw-->
            <urn3:samlAuthnStatement>
               <urn3:authInstant>2009-09-01T13:00:00.000Z</urn3:authInstant>
               <urn3:sessionIndex>mySessionIndex</urn3:sessionIndex>
               <urn3:authContextClassRef>myContextClassRef</urn3:authContextClassRef>
               <urn3:subjectLocalityAddress>mySubjectLocalityAddress</urn3:subjectLocalityAddress>
               <urn3:subjectLocalityDNSName>mySubjectLocalityDns</urn3:subjectLocalityDNSName>
            </urn3:samlAuthnStatement>
            <urn3:samlAuthzDecisionStatement>
               <urn3:decision>Permit</urn3:decision>
               <urn3:resource>myAuthzDecisionStatementResource</urn3:resource>
               <urn3:action>myAuthzDecisionStatementAction</urn3:action>
               <urn3:evidence>
                  <urn3:assertion>
                     <urn3:id>AuthzDecisionStatementEvidenceAssertionId</urn3:id>
                     <urn3:issueInstant>2009-09-02T14:00:00.000Z</urn3:issueInstant>
                     <urn3:version>2.0</urn3:version>
                     <urn3:issuer>CN=Mr Saml User,OU=SU,O=Mr SAML Org,L=Chantilly,ST=VA,C=US</urn3:issuer>
                     <urn3:issuerFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</urn3:issuerFormat>
                     <urn3:conditions>
                        <urn3:notBefore>2001-01-01T01:00:00.000Z</urn3:notBefore>
                        <urn3:notOnOrAfter>2005-05-06T22:00:17.000Z</urn3:notOnOrAfter>
                     </urn3:conditions>
                     <urn3:accessConsentPolicy>urn:oid:1.2.3.4</urn3:accessConsentPolicy>
                     <urn3:instanceAccessConsentPolicy>urn:oid:1.2.3.4.123456789</urn3:instanceAccessConsentPolicy>
                  </urn3:assertion>
               </urn3:evidence>
            </urn3:samlAuthzDecisionStatement>
         </urn:assertion>
         <urn:nhinTargetSystem>
            <urn2:homeCommunity>
               <urn2:description>localmachine</urn2:description>
               <urn2:homeCommunityId>1.1</urn2:homeCommunityId>
               <urn2:name>localmachine</urn2:name>
            </urn2:homeCommunity>
         </urn:nhinTargetSystem>
      </urn:RespondingGateway_CrossGatewayRetrieveRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:assertion disabled="true" name="UserRoleCodeSystem " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('Checking user role system');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="UserRoleCodeSystemName " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('Checking user role system name');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="UserRoleCodeDiplayName " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('Checking user role display name');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-description'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-description']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:user-role-description']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="PurposeForUseCode" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('PurposeForUseCode');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:purposeOfDisclosureCoded/nc:code)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:purposeOfDisclosureCoded/nc:code"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);
								</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="PurposeForUseCodeSystem" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('PurposeForUseCodeSystem');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);
								</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="PurposeForUseCodeSystemName" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('PurposeForUseCodeSystemName');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="PurposeForUseCodeDisplayName" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('PurposeForUseCodeDisplayName');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Subject/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);
								</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementDecision" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementDecision');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementResource" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementResource');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementAction" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementAction');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:action)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:action"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);
								</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionID " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionID');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionIssueInstant" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionIssueInstant');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionVersion" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionVersion');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionIssuer" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionIssuer');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);
								</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotBefore" type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionConditionsNotBefore');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentReference " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionContentReference');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentType " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionContentType');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContent " type="GroovyScriptAssertion">
							<con:configuration>
								<scriptText>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.info('AuthzDecisionStatementEvidenceAssertionContent');

def requestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
requestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:eventcommon';
requestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent );
responseHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def AssertionCount = requestHolder["count(//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content)"];
log.info('AssertionCount=' + AssertionCount);
assert(AssertionCount=="1");

def XacmlAttributeCount = responseHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-asssertion-content'])"];
log.info('Xacml Attribute Count='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def AssertionValue = requestHolder["//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content"];
log.info('AssertionValue=' + AssertionValue);


def XacmlValue = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-asssertion-content']/xacml:AttributeValue"];
log.info('XacmlValue=' + XacmlValue);
assert (AssertionValue==XacmlValue);

def ActualDataType = responseHolder["//xacml:Resource/xacml:Attribute[@AttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-asssertion-content']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#base64Binary';
assert(ActualDataType==ExpectedDataType);</scriptText>
							</con:configuration>
						</con:assertion>
						<con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="mock policy engine" type="mockresponse">
				<con:settings/>
				<con:config startStep="send request" xsi:type="con:MockResponseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:interface>AdapterPolicyEngineBindingSoap</con:interface>
					<con:operation>CheckPolicy</con:operation>
					<con:path>/mockPolicyEngine</con:path>
					<con:port>18084</con:port>
					<con:timeout>30000</con:timeout>
					<con:response>
						<con:settings/>
						<con:responseContent><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:urn1="urn:oasis:names:tc:xacml:2.0:context:schema:os">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:CheckPolicyResponse>
         <urn:response>
            <urn1:Result>
               <urn1:Decision>deny</urn1:Decision>
            </urn1:Result>
         </urn:response>
      </urn:CheckPolicyResponse>
   </soapenv:Body>
</soapenv:Envelope>]]></con:responseContent>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
					</con:response>
					<con:assertion name="AuthnStatementAuthnInstant " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='authInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authInstant'
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-instant';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementSessionIndex" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='sessionIndex';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:sessionIndex';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:session-index';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthnStatementAthnContextClassRef " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='authContextClassRef';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authContextClassRef';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-context-class-ref';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementSubjectLocalityAddress " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='subjectLocalityAddress';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityAddress';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:ip-address';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementDNSName " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='subjectLocalityDNSName';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityDNSName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:dns-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserPersonName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='personname';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:userName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserOrganizationName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user organization';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:name';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-organization-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCode" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role coded';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code';
def XacmlAttributeId='urn:oasis:names:tc:xacml:2.0:subject:role';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCodeSystem " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role system';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCodeSystemName " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role system name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCodeDiplayName " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role display name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-description';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCode" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCode';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:purposeofuse';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCodeSystem" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCodeSystem';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCodeSystemName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCodeSystemName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCodeDisplayName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCodeDisplayName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementDecision" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementDecision';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementResource" type="GroovyScriptAssertion">
						<con:configuration><scriptText>def FieldName='AuthzDecisionStatementResource';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

//def AssertionValue = sourceRequestHolder[AssertionXpath];
//log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

def AssertionValue='https://localhost:8181/Gateway/DocumentRetrieve/3_0/NhinService/RespondingGateway_Retrieve_Service/DocRetrieve';
log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText></con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementAction" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementAction';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:action';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
//log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);
def ExpectedValue='Execute';
//log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (ExpectedValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionID " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionID';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionIssueInstant" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssueInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionVersion" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionVersion';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionIssuer" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssuer';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionConditionsNotBefore" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotBefore';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2001-01-01T06:00:00.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2009-05-07T02:00:17.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentReference " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentReference';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentType " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentType';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContent " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="HomeCommunityId" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='home-community-id';
def AssertionXpath='//ec:assertion/nc:homeCommunity/nc:homeCommunityId';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:home-community-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="OrganizationId" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='organizationid';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:homeCommunityId';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:organization-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PatientId" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PatientId';
def AssertionXpath='//ec:assertion/nc:uniquePatientId';
def XacmlAttributeId='http://www.hhs.gov/healthit/nhin#subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';
mockRequestHolder.namespaces['hl7'] = 'urn:hl7-org:v3';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValueExtension = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@extension"]
def ExpectedExtension='500000000';
log.info('XacmlAttributeValue(' + FieldName + '@extension)=' + XacmlValueExtension);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) => ' + (AssertionValue==XacmlValueExtension));
assert (ExpectedExtension==XacmlValueExtension);

def XacmlValueRoot = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@root"]
def ExpectedRoot='1.1';
log.info('XacmlAttributeValue(' + FieldName + '@root)=' + XacmlValueRoot);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) => ' + (AssertionValue==XacmlValueExtension));
assert (ExpectedRoot==XacmlValueRoot);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'urn:hl7-org:v3#II';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionAccessConsent" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:accessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:instanceAccessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-instance-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("send request");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("Request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="Namespace for Action" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns6='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns19='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns19:CheckPolicyRequest[1]/ns19:request[1]/ns6:Resource[1]/ns6:Attribute[7]/@AttributeId</path>
							<content>urn:oasis:names:tc:SAML:1.0:action:rwedc:saml-authz-decision-statement-action</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns6='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns19='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns19:CheckPolicyRequest[1]/ns19:request[1]/ns6:Resource[1]/ns6:Attribute[7]/ns6:AttributeValue[1]</path>
							<content>Execute</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:assertion type="XPath Match">
						<con:configuration>
							<path>declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace ns19='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns19:CheckPolicyRequest[1]/ns19:assertion[1]/ns18:samlAuthzDecisionStatement[1]/ns18:action[1]</path>
							<content>Execute</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
				</con:config>
			</con:testStep>
			
			<con:setupScript>nhinc.FileUtils.backupConfiguration(context.findProperty("GatewayPropDir"), log);</con:setupScript><con:properties/>
			<con:reportParameters/>
			<con:tearDownScript>nhinc.FileUtils.restoreConfiguration(context.findProperty("GatewayPropDir"), log);</con:tearDownScript>
		</con:testCase>
		<con:properties/>
		<con:reportParameters/>
	</con:testSuite>
	<con:requirements/>
	<con:properties>
		<con:property>
			<con:name>NhincProxyDocRetrieveEndpoint</con:name>
			<con:value>http://localhost:8080/Gateway/DocumentRetrieve/2_0/NhincProxyDocRetrieveUnsecured</con:value>
		</con:property>
		<con:property>
			<con:name>NhincProxyDocQueryEndpoint</con:name>
			<con:value>http://localhost:8080/Gateway/DocumentQuery/2_0/EntityService/NhincProxyDocQueryUnsecured</con:value>
		</con:property>
		<con:property>
			<con:name>GlassfishConfigurationDirectory</con:name>
			<con:value>C:/Sun/AppServer/domains/domain1/config</con:value>
		</con:property>
		<con:property>
			<con:name>GatewayConfigurationDirectory</con:name>
			<con:value>C:/Sun/AppServer/domains/domain1/config/nhin</con:value>
		</con:property>
		<con:property>
			<con:name>Mockhost</con:name>
			<con:value>localhost</con:value>
		</con:property>
	<con:property><con:name>GatewayPropDir</con:name><con:value>c:\glassfish3\glassfish\domains\domain1\config\nhin</con:value></con:property></con:properties>
	<con:afterLoadScript>def propertiesFile = new File(new File(project.path).parent, 'PolicyEngineInteractions-soapui-project.properties')
if (propertiesFile.exists()) {
	def props = new Properties()
	props.load(new FileReader(propertiesFile))
	props.each { key, value ->
	    project.setPropertyValue(key, value)
	}
}

com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.findProperty = { propertyName ->
    return delegate.getProperty(propertyName) ?:
                delegate.testCase.getPropertyValue(propertyName) ?:
                delegate.testCase.testSuite.getPropertyValue(propertyName) ?:
                delegate.testCase.testSuite.project.getPropertyValue(propertyName)
}</con:afterLoadScript>
	<con:wssContainer/>
	<con:databaseConnectionContainer/>
	<con:reporting>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:parameters/>
	</con:reporting>

</con:soapui-project>