<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project abortOnError="false" name="EntityXDRTests" resourceRoot="${projectDir}" runType="SEQUENTIAL" soapui-version="4.5.1" activeEnvironment="Default" xmlns:con="http://eviware.com/soapui/config">
	<con:settings/>
	<con:interface anonymous="optional" bindingName="{urn:gov:hhs:fha:nhinc:nhincproxyxdr}ProxyXDR_Binding" definition="../../target/wsdl/" name="ProxyXDR_Binding" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:settings/>

		
		<con:endpoints>
			<con:endpoint>http://localhost:${NhincHttpPort}/NhincConnect/NhincProxyXDR</con:endpoint>
			<con:endpoint>http://localhost:${HttpDefaultPort}/NhinConnect/NhincProxyXDR</con:endpoint>
		</con:endpoints>
		<con:operation action="tns:ProvideAndRegisterDocumentSet-b" anonymous="optional" bindingOperationName="ProvideAndRegisterDocumentSet-b" inputName="" isOneWay="false" name="ProvideAndRegisterDocumentSet-b" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
			<con:call name="Request 1">
				<con:settings/>
				<con:encoding>UTF-8</con:encoding>
				<con:endpoint>http://localhost:${HttpDefaultPort}/NhinConnect/NhincProxyXDR</con:endpoint>
				<con:request><![CDATA[
					<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonproxy" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:add="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:urn2="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:urn3="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:urn4="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:urn5="urn:ihe:iti:xds-b:2007">
   <soapenv:Header/>
   <soapenv:Body>
      <body>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:addressType>
               <urn1:city>?</urn1:city>
               <urn1:country>?</urn1:country>
               <urn1:state>?</urn1:state>
               <urn1:streetAddress>?</urn1:streetAddress>
               <urn1:zipCode>?</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>?</urn1:dateOfBirth>
            <urn1:explanationNonClaimantSignature>?</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>?</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>?</urn1:haveSignature>
            <urn1:haveWitnessSignature>?</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>?</urn1:description>
               <urn1:homeCommunityId>?</urn1:homeCommunityId>
               <urn1:name>?</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>?</urn1:familyName>
               <urn1:givenName>?</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:nameType>
               <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
               <urn1:fullName>?</urn1:fullName>
               <urn1:prefix>?</urn1:prefix>
               <urn1:suffix>?</urn1:suffix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>?</urn1:areaCode>
               <urn1:countryCode>?</urn1:countryCode>
               <urn1:extension>?</urn1:extension>
               <urn1:localNumber>?</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:addressType>
               <urn1:city>?</urn1:city>
               <urn1:country>?</urn1:country>
               <urn1:state>?</urn1:state>
               <urn1:streetAddress>?</urn1:streetAddress>
               <urn1:zipCode>?</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>?</urn1:familyName>
               <urn1:givenName>?</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:nameType>
               <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
               <urn1:fullName>?</urn1:fullName>
               <urn1:prefix>?</urn1:prefix>
               <urn1:suffix>?</urn1:suffix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>?</urn1:areaCode>
               <urn1:countryCode>?</urn1:countryCode>
               <urn1:extension>?</urn1:extension>
               <urn1:localNumber>?</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>?</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>?</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:addressType>
               <urn1:city>?</urn1:city>
               <urn1:country>?</urn1:country>
               <urn1:state>?</urn1:state>
               <urn1:streetAddress>?</urn1:streetAddress>
               <urn1:zipCode>?</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>?</urn1:familyName>
               <urn1:givenName>?</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:nameType>
               <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
               <urn1:fullName>?</urn1:fullName>
               <urn1:prefix>?</urn1:prefix>
               <urn1:suffix>?</urn1:suffix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>?</urn1:areaCode>
               <urn1:countryCode>?</urn1:countryCode>
               <urn1:extension>?</urn1:extension>
               <urn1:localNumber>?</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>?</urn1:familyName>
                  <urn1:givenName>?</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>?</urn1:code>
                     <urn1:codeSystem>?</urn1:codeSystem>
                     <urn1:codeSystemName>?</urn1:codeSystemName>
                     <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                     <urn1:displayName>?</urn1:displayName>
                     <urn1:originalText>?</urn1:originalText>
                     <!--Zero or more repetitions:-->
                     <urn1:translation/>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
                  <urn1:fullName>?</urn1:fullName>
                  <urn1:prefix>?</urn1:prefix>
                  <urn1:suffix>?</urn1:suffix>
               </urn1:personName>
               <urn1:userName>?</urn1:userName>
               <urn1:org>
                  <urn1:description>?</urn1:description>
                  <urn1:homeCommunityId>?</urn1:homeCommunityId>
                  <urn1:name>?</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>?</urn1:authorized>
            <!--Optional:-->
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>?</urn1:code>
               <urn1:codeSystem>?</urn1:codeSystem>
               <urn1:codeSystemName>?</urn1:codeSystemName>
               <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
               <urn1:displayName>?</urn1:displayName>
               <urn1:originalText>?</urn1:originalText>
               <!--Zero or more repetitions:-->
               <urn1:translation/>
            </urn1:purposeOfDisclosureCoded>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>?</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>?</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>?</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>?</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>?</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>?</urn1:decision>
               <!--Optional:-->
               <urn1:resource>?</urn1:resource>
               <!--Optional:-->
               <urn1:action>?</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>?</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>?</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>?</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>?</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>?</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>?</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>?</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:accessConsentPolicy>?</urn1:accessConsentPolicy>
                     <!--Optional:-->
                     <urn1:instanceAccessConsentPolicy>?</urn1:instanceAccessConsentPolicy>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:3756529498</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:1234976744833</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:91112360177</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
         <urn:nhinTargetSystem>
            <!--You have a CHOICE of the next 3 items at this level-->
            <urn1:epr>
               <urn1:EndpointReference>
                  <add:Address>?</add:Address>
                  <!--Optional:-->
                  <add:ReferenceProperties>
                     <!--You may enter ANY elements at this point-->
                  </add:ReferenceProperties>
                  <!--Optional:-->
                  <add:ReferenceParameters>
                     <!--You may enter ANY elements at this point-->
                  </add:ReferenceParameters>
                  <!--Optional:-->
                  <add:PortType>?</add:PortType>
                  <!--Optional:-->
                  <add:ServiceName PortName="?">?</add:ServiceName>
                  <!--You may enter ANY elements at this point-->
               </urn1:EndpointReference>
            </urn1:epr>
            <urn1:homeCommunity>
               <urn1:description>?</urn1:description>
               <urn1:homeCommunityId>?</urn1:homeCommunityId>
               <urn1:name>?</urn1:name>
            </urn1:homeCommunity>
            <urn1:url>?</urn1:url>
         </urn:nhinTargetSystem>
         <urn:ProvideAndRegisterDocumentSetRequest>
            <urn2:SubmitObjectsRequest id="?" comment="?">
               <!--Optional:-->
               <urn3:RequestSlotList>
                  <!--Zero or more repetitions:-->
                  <urn4:Slot name="?" slotType="?">
                     <urn4:ValueList>
                        <urn4:Value>?</urn4:Value>
                     </urn4:ValueList>
                  </urn4:Slot>
               </urn3:RequestSlotList>
               <urn4:RegistryObjectList>
                  <!--Zero or more repetitions:-->
                  <urn4:Identifiable id="?" home="?">
                     <!--Zero or more repetitions:-->
                     <urn4:Slot name="?" slotType="?">
                        <urn4:ValueList>
                           <urn4:Value>?</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                  </urn4:Identifiable>
               </urn4:RegistryObjectList>
            </urn2:SubmitObjectsRequest>
            <!--1 or more repetitions:-->
            <urn5:Document id="?">cid:466302205047</urn5:Document>
         </urn:ProvideAndRegisterDocumentSetRequest>
      </body>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
				<con:wsaConfig action="urn:ihe:iti:2007:ProvideAndRegisterDocumentSet-b" mustUnderstand="NONE" version="200508"/>
			</con:call>
		</con:operation>
	</con:interface>
	<con:interface anonymous="optional" bindingName="{urn:gov:hhs:fha:nhinc:adapterpolicyengine}AdapterPolicyEngineBindingSoap" definition="../../target/wsdl/AdapterPolicyEngine.wsdl" name="AdapterPolicyEngineBindingSoap" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:settings/>
		
		<con:endpoints>
			<con:endpoint>http://localhost:${HttpDefaultPort}/NhinConnect/AdapterPolicyEngine</con:endpoint>
		</con:endpoints>
		<con:operation action="urn:CheckPolicy" anonymous="optional" bindingOperationName="CheckPolicy" inputName="CheckPolicyRequest" isOneWay="false" name="CheckPolicy" outputName="CheckPolicyResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
			<con:call name="Request 1">
				<con:settings/>
				<con:encoding>UTF-8</con:encoding>
				<con:endpoint>http://localhost:${HttpDefaultPort}/NhinConnect/AdapterPolicyEngine</con:endpoint>
				<con:request><![CDATA[
					<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:urn2="urn:oasis:names:tc:xacml:2.0:context:schema:os">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:CheckPolicyRequest>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:addressType>
               <urn1:city>?</urn1:city>
               <urn1:country>?</urn1:country>
               <urn1:state>?</urn1:state>
               <urn1:streetAddress>?</urn1:streetAddress>
               <urn1:zipCode>?</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>?</urn1:dateOfBirth>
            <urn1:explanationNonClaimantSignature>?</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>?</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>?</urn1:haveSignature>
            <urn1:haveWitnessSignature>?</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>?</urn1:description>
               <urn1:homeCommunityId>?</urn1:homeCommunityId>
               <urn1:name>?</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>?</urn1:familyName>
               <urn1:givenName>?</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:nameType>
               <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>?</urn1:areaCode>
               <urn1:countryCode>?</urn1:countryCode>
               <urn1:extension>?</urn1:extension>
               <urn1:localNumber>?</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:addressType>
               <urn1:city>?</urn1:city>
               <urn1:country>?</urn1:country>
               <urn1:state>?</urn1:state>
               <urn1:streetAddress>?</urn1:streetAddress>
               <urn1:zipCode>?</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>?</urn1:familyName>
               <urn1:givenName>?</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:nameType>
               <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>?</urn1:areaCode>
               <urn1:countryCode>?</urn1:countryCode>
               <urn1:extension>?</urn1:extension>
               <urn1:localNumber>?</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>?</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>?</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:addressType>
               <urn1:city>?</urn1:city>
               <urn1:country>?</urn1:country>
               <urn1:state>?</urn1:state>
               <urn1:streetAddress>?</urn1:streetAddress>
               <urn1:zipCode>?</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>?</urn1:familyName>
               <urn1:givenName>?</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:nameType>
               <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>?</urn1:areaCode>
               <urn1:countryCode>?</urn1:countryCode>
               <urn1:extension>?</urn1:extension>
               <urn1:localNumber>?</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>?</urn1:familyName>
                  <urn1:givenName>?</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>?</urn1:code>
                     <urn1:codeSystem>?</urn1:codeSystem>
                     <urn1:codeSystemName>?</urn1:codeSystemName>
                     <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                     <urn1:displayName>?</urn1:displayName>
                     <urn1:originalText>?</urn1:originalText>
                     <!--Zero or more repetitions:-->
                     <urn1:translation/>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
               </urn1:personName>
               <urn1:userName>?</urn1:userName>
               <urn1:org>
                  <urn1:description>?</urn1:description>
                  <urn1:homeCommunityId>?</urn1:homeCommunityId>
                  <urn1:name>?</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>?</urn1:authorized>
            <!--Optional:-->
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>?</urn1:code>
               <urn1:codeSystem>?</urn1:codeSystem>
               <urn1:codeSystemName>?</urn1:codeSystemName>
               <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
               <urn1:displayName>?</urn1:displayName>
               <urn1:originalText>?</urn1:originalText>
               <!--Zero or more repetitions:-->
               <urn1:translation/>
            </urn1:purposeOfDisclosureCoded>
            <!--Optional:-->
            <urn1:claimFormRef>?</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:878096191505</urn1:claimFormRaw>
         </urn:assertion>
         <urn:request>
            <!--1 or more repetitions:-->
            <urn2:Subject SubjectCategory="urn:oasis:names:tc:xacml:1.0:subject-category:access-subject">
               <!--Zero or more repetitions:-->
               <urn2:Attribute AttributeId="?" DataType="?" Issuer="?">
                  <!--1 or more repetitions:-->
                  <urn2:AttributeValue>
                     e
                     <!--You may enter ANY elements at this point-->
                     gero
                  </urn2:AttributeValue>
               </urn2:Attribute>
            </urn2:Subject>
            <!--1 or more repetitions:-->
            <urn2:Resource>
               <!--Optional:-->
               <urn2:ResourceContent>
                  cum
                  <!--You may enter ANY elements at this point-->
                  sonoras
               </urn2:ResourceContent>
               <!--Zero or more repetitions:-->
               <urn2:Attribute AttributeId="?" DataType="?" Issuer="?">
                  <!--1 or more repetitions:-->
                  <urn2:AttributeValue>
                     aeoliam
                     <!--You may enter ANY elements at this point-->
                     quae
                  </urn2:AttributeValue>
               </urn2:Attribute>
            </urn2:Resource>
            <urn2:Action>
               <!--Zero or more repetitions:-->
               <urn2:Attribute AttributeId="?" DataType="?" Issuer="?">
                  <!--1 or more repetitions:-->
                  <urn2:AttributeValue>
                     ventos
                     <!--You may enter ANY elements at this point-->
                     verrantque
                  </urn2:AttributeValue>
               </urn2:Attribute>
            </urn2:Action>
            <urn2:Environment>
               <!--Zero or more repetitions:-->
               <urn2:Attribute AttributeId="?" DataType="?" Issuer="?">
                  <!--1 or more repetitions:-->
                  <urn2:AttributeValue>
                     temperat
                     <!--You may enter ANY elements at this point-->
                     per
                  </urn2:AttributeValue>
               </urn2:Attribute>
            </urn2:Environment>
         </urn:request>
      </urn:CheckPolicyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
				<con:wsaConfig action="urn:gov:hhs:fha:nhinc:adapterpolicyengine/AdapterPolicyEnginePortType/CheckPolicyRequest" mustUnderstand="NONE" version="200508"/>
				<con:wsrmConfig version="1.2"/>
			</con:call>
		</con:operation>
	</con:interface>
	<con:interface anonymous="optional" bindingName="{urn:gov:hhs:fha:nhinc:nhincadapterxdr}AdapterXDR_Binding" definition="../../target/wsdl/AdapterComponentXDR.wsdl" name="AdapterXDR_Binding" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:settings/>
		
		<con:endpoints>
			<con:endpoint>http://localhost:${NhincHttpPort}/AdapterComponentXDR</con:endpoint>
			<con:endpoint>http://localhost:${HttpDefaultPort}/NhinConnect/AdapterXDR</con:endpoint>
		</con:endpoints>
		<con:operation action="tns:ProvideAndRegisterDocumentSet-b" anonymous="optional" bindingOperationName="ProvideAndRegisterDocumentSetb" inputName="" isOneWay="false" name="ProvideAndRegisterDocumentSetb" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
		</con:operation>
	</con:interface>
	<con:interface anonymous="optional" bindingName="{urn:gov:hhs:fha:nhinc:nhincentityxdr}EntityXDR_Binding" definition="../../target/wsdl/EntityXDR.wsdl" name="EntityXDR_Binding" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:settings/>

		
		<con:endpoints>
			<con:endpoint>${#Project#Endpoint-XDREntity}</con:endpoint>
			<con:endpoint>http://localhost:${HttpDefaultPort}/NhinConnect/EntityXDR</con:endpoint>
			<con:endpoint>${#Project#Endpoint-XDREntity}</con:endpoint>
		<con:endpoint>http://localhost:${HttpDefaultPort}/Gateway/DocumentSubmission/1_1/EntityService/EntityDocSubmissionUnsecured</con:endpoint></con:endpoints>
		<con:operation action="" anonymous="optional" bindingOperationName="ProvideAndRegisterDocumentSet-b" inputName="" isOneWay="false" name="ProvideAndRegisterDocumentSet-b" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
			
		<con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:${HttpDefaultPort}/Gateway/DocumentSubmission/1_1/EntityService/EntityDocSubmissionUnsecured</con:endpoint><con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonentity" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:urn2="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:urn3="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0">
   <soap:Header/>
   <soap:Body>
      <urn:RespondingGateway_ProvideAndRegisterDocumentSetRequest>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
               </urn1:addressType>
               <urn1:city>?</urn1:city>
               <urn1:country>?</urn1:country>
               <urn1:state>?</urn1:state>
               <urn1:streetAddress>?</urn1:streetAddress>
               <urn1:zipCode>?</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>?</urn1:dateOfBirth>
            <urn1:explanationNonClaimantSignature>?</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>?</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>?</urn1:haveSignature>
            <urn1:haveWitnessSignature>?</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>?</urn1:description>
               <urn1:homeCommunityId>?</urn1:homeCommunityId>
               <urn1:name>?</urn1:name>
            </urn1:homeCommunity>
            <urn1:nationalProviderId>?</urn1:nationalProviderId>
            <urn1:personName>
               <urn1:familyName>?</urn1:familyName>
               <urn1:givenName>?</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
               </urn1:nameType>
               <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
               <urn1:fullName>?</urn1:fullName>
               <urn1:prefix>?</urn1:prefix>
               <urn1:suffix>?</urn1:suffix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>?</urn1:areaCode>
               <urn1:countryCode>?</urn1:countryCode>
               <urn1:extension>?</urn1:extension>
               <urn1:localNumber>?</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
               </urn1:addressType>
               <urn1:city>?</urn1:city>
               <urn1:country>?</urn1:country>
               <urn1:state>?</urn1:state>
               <urn1:streetAddress>?</urn1:streetAddress>
               <urn1:zipCode>?</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>?</urn1:familyName>
               <urn1:givenName>?</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
               </urn1:nameType>
               <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
               <urn1:fullName>?</urn1:fullName>
               <urn1:prefix>?</urn1:prefix>
               <urn1:suffix>?</urn1:suffix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>?</urn1:areaCode>
               <urn1:countryCode>?</urn1:countryCode>
               <urn1:extension>?</urn1:extension>
               <urn1:localNumber>?</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>?</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>?</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
               </urn1:addressType>
               <urn1:city>?</urn1:city>
               <urn1:country>?</urn1:country>
               <urn1:state>?</urn1:state>
               <urn1:streetAddress>?</urn1:streetAddress>
               <urn1:zipCode>?</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>?</urn1:familyName>
               <urn1:givenName>?</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
               </urn1:nameType>
               <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
               <urn1:fullName>?</urn1:fullName>
               <urn1:prefix>?</urn1:prefix>
               <urn1:suffix>?</urn1:suffix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>?</urn1:areaCode>
               <urn1:countryCode>?</urn1:countryCode>
               <urn1:extension>?</urn1:extension>
               <urn1:localNumber>?</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>?</urn1:familyName>
                  <urn1:givenName>?</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>?</urn1:code>
                     <urn1:codeSystem>?</urn1:codeSystem>
                     <urn1:codeSystemName>?</urn1:codeSystemName>
                     <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                     <urn1:displayName>?</urn1:displayName>
                     <urn1:originalText>?</urn1:originalText>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
                  <urn1:fullName>?</urn1:fullName>
                  <urn1:prefix>?</urn1:prefix>
                  <urn1:suffix>?</urn1:suffix>
               </urn1:personName>
               <urn1:userName>?</urn1:userName>
               <urn1:org>
                  <urn1:description>?</urn1:description>
                  <urn1:homeCommunityId>?</urn1:homeCommunityId>
                  <urn1:name>?</urn1:name>
               </urn1:org>
            </urn1:userInfo>
            <urn1:authorized>?</urn1:authorized>
            <!--1 or more repetitions:-->
            <urn1:relatesToList>?</urn1:relatesToList>
         </urn:assertion>
         <urn:ProvideAndRegisterDocumentSetRequest>
            <urn2:SubmitObjectsRequest>
               <urn3:RegistryObjectList/>
            </urn2:SubmitObjectsRequest>
         </urn:ProvideAndRegisterDocumentSetRequest>
      </urn:RespondingGateway_ProvideAndRegisterDocumentSetRequest>
   </soap:Body>
</soap:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="{urn:gov:hhs:fha:nhinc:nhincentityxdr}ProvideAndRegisterDocumentSet-b"/><con:wsrmConfig version="1.2"/></con:call></con:operation>
	</con:interface>
	
	<con:interface anonymous="optional" bindingName="{urn:ihe:iti:xdr:2007}DocumentRepositoryXDR_Binding" definition="../../target/wsdl/NhinXDR.wsdl" name="DocumentRepositoryXDR_Binding" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
		<con:settings/>
		
		<con:endpoints>
			<con:endpoint>https://localhost:${HttpsDefaultPort}/XDR_Service</con:endpoint>
		</con:endpoints>
		<con:operation action="urn:ihe:iti:xdr:2007:ProvideAndRegisterDocumentSet-b" bindingOperationName="DocumentRepository_ProvideAndRegisterDocumentSet-b" inputName="" isOneWay="false" name="DocumentRepository_ProvideAndRegisterDocumentSet-b" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
		</con:operation>
		<con:operation action="urn:ihe:iti:xdr:2007:RetrieveDocumentSet" bindingOperationName="DocumentRepository_RetrieveDocumentSet" inputName="" isOneWay="false" name="DocumentRepository_RetrieveDocumentSet" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
		</con:operation>
	</con:interface>
	<con:testSuite name="EntityXDRTests TestSuite">
		<con:settings/>
		<con:runType>SEQUENTIAL</con:runType>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="1b2294ce-104b-4cd3-840e-647955e13e7b" keepSession="false" maxResults="0" name="Policy Check mock Deny" searchProperties="true">
			<con:settings/>
			<con:testStep name="ModifyInterrnalConnectionInfoForPE" type="groovy">
				<con:settings/>
				<con:config><script>import nhinc.FileUtils;
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

//def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
def destConfigFileLocation = context.findProperty("GatewayPropDir");
def NHINGatewayHost = context.findProperty("NHINGatewayHost");//**** Redbox (remove later)
//**** mockHost is localhost because Groovy script resides in local machine ****
def mockHost = context.findProperty("mockHost");
def mockPEURL = "http://" + mockHost + ":11231/mockPE";
def LocalHCID = context.findProperty( "LocalHCID" );

FileUtils.createOrUpdateConnection("internalConnectionInfo.xml", destConfigFileLocation, LocalHCID, "policyengineservice", mockPEURL, "LEVEL_a0", log);</script></con:config>
			</con:testStep>
			<con:testStep name="EntityRequestMsg - XDR" type="request">
				<con:settings/>
				<con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:interface>EntityXDR_Binding</con:interface>
					<con:operation>ProvideAndRegisterDocumentSet-b</con:operation>
					<con:request incomingWss="" name="EntityRequestMsg - XDR" outgoingWss="" wssPasswordType="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-XDREntity}</con:endpoint>
						<con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonentity" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:add="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:urn2="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:urn3="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:urn4="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:urn5="urn:ihe:iti:xds-b:2007">
   <soapenv:Header/>
   <soapenv:Body projectName="EntityXDRTests" testCase="Policy Check mock Deny">
      <urn:RespondingGateway_ProvideAndRegisterDocumentSetRequest>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Joe</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>PSYCHOTHERAPY</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <!--Optional:-->
            <!--urn1:claimFormRef>claimFormRef</urn1:claimFormRef-->
            <!--Optional:-->
            <!--urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw-->
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
         <urn:nhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>Test HCID2</urn1:description>
                  <urn1:homeCommunityId>2.2</urn1:homeCommunityId>
                  <urn1:name>Test HCID2</urn1:name>
               </urn1:homeCommunity>
            </urn1:nhinTargetCommunity>
         </urn:nhinTargetCommunities>
         <urn:ProvideAndRegisterDocumentSetRequest>
            <urn2:SubmitObjectsRequest id="123" comment="comme">
               <!--Optional:-->
               <urn4:RegistryObjectList>
                  <urn4:ExtrinsicObject id="Document01" mimeType="text/xml" objectType="urn:uuid:7edca82f-054d-47f2-a032-9b2a5b5186c1">
                     <urn4:Slot name="creationTime">
                        <urn4:ValueList>
                           <urn4:Value>20051224</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="languageCode">
                        <urn4:ValueList>
                           <urn4:Value>en-us</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="serviceStartTime">
                        <urn4:ValueList>
                           <urn4:Value>200412230800</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="serviceStopTime">
                        <urn4:ValueList>
                           <urn4:Value>200412230801</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="sourcePatientId">
                        <urn4:ValueList>
                           <urn4:Value>SELF-5^^^&amp;1.3.6.1.4.1.21367.2003.3.9&amp;ISO</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="sourcePatientInfo">
                        <urn4:ValueList>
                           <urn4:Value>PID-3|SELF-5^^^&amp;1.3.6.1.4.1.21367.2003.3.9&amp;ISO</urn4:Value>
                           <urn4:Value>PID-5|Doe^John^^^</urn4:Value>
                           <urn4:Value>PID-7|19560527</urn4:Value>
                           <urn4:Value>PID-8|M</urn4:Value>
                           <urn4:Value>PID-11|100 Main St^^Metropolis^Il^44130^USA</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Name>
                        <urn4:LocalizedString value="Physical"/>
                     </urn4:Name>
                     <urn4:Description/>
                     <urn4:Classification id="cl01" classificationScheme="urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d" classifiedObject="Document01">
                        <urn4:Slot name="authorPerson">
                           <urn4:ValueList>
                              <urn4:Value>Gerald Smitty</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorInstitution">
                           <urn4:ValueList>
                              <urn4:Value>Cleveland Clinic</urn4:Value>
                              <urn4:Value>Parma Community</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorRole">
                           <urn4:ValueList>
                              <urn4:Value>Attending</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorSpecialty">
                           <urn4:ValueList>
                              <urn4:Value>Orthopedic</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                     </urn4:Classification>
                     <urn4:Classification id="cl02" classificationScheme="urn:uuid:41a5887f-8865-4c09-adf7-e362475b143a" classifiedObject="Document01" nodeRepresentation="History and Physical">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon classCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="History and Physical"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl03" classificationScheme="urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f" classifiedObject="Document01" nodeRepresentation="1.3.6.1.4.1.21367.2006.7.101">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon confidentialityCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="Clinical-Staff"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl04" classificationScheme="urn:uuid:a09d5840-386c-46f2-b5ad-9c3699a4309d" classifiedObject="Document01" nodeRepresentation="CDAR2/IHE 1.0">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon formatCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="CDAR2/IHE 1.0"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl05" classificationScheme="urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1" classifiedObject="Document01" nodeRepresentation="Outpatient">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon healthcareFacilityTypeCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="Outpatient"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl06" classificationScheme="urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead" classifiedObject="Document01" nodeRepresentation="General Medicine">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon practiceSettingCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="General Medicine"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl07" classificationScheme="urn:uuid:f0306f51-975f-434e-a61c-c59651d33983" classifiedObject="Document01" nodeRepresentation="34108-1">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>LOINC</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="Outpatient Evaluation And Management"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:ExternalIdentifier id="ei01" registryObject="Document01" identificationScheme="urn:uuid:58a6f841-87b3-4a3e-92fd-a8ffeff98427" value="SELF-5^^^&amp;1.3.6.1.4.1.21367.2005.3.7&amp;ISO">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSDocumentEntry.patientId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                     <urn4:ExternalIdentifier id="ei02" registryObject="Document01" identificationScheme="urn:uuid:2e82c1f6-a085-4c72-9da3-8640a32e42ab" value="1.3.6.1.4.1.21367.2005.3.9999.32">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSDocumentEntry.uniqueId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                  </urn4:ExtrinsicObject>
                  <urn4:RegistryPackage id="SubmissionSet01">
                     <urn4:Slot name="submissionTime">
                        <urn4:ValueList>
                           <urn4:Value>20041225235050</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Name>
                        <urn4:LocalizedString value="Physical"/>
                     </urn4:Name>
                     <urn4:Description>
                        <urn4:LocalizedString value="Annual physical"/>
                     </urn4:Description>
                     <urn4:Classification id="cl08" classificationScheme="urn:uuid:a7058bb9-b4e4-4307-ba5b-e3f0ab85e12d" classifiedObject="SubmissionSet01">
                        <urn4:Slot name="authorPerson">
                           <urn4:ValueList>
                              <urn4:Value>Sherry Dopplemeyer</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorInstitution">
                           <urn4:ValueList>
                              <urn4:Value>Cleveland Clinic</urn4:Value>
                              <urn4:Value>Berea Community</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorRole">
                           <urn4:ValueList>
                              <urn4:Value>Purn4ary Surgon</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorSpecialty">
                           <urn4:ValueList>
                              <urn4:Value>Orthopedic</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                     </urn4:Classification>
                     <urn4:Classification id="cl09" classificationScheme="urn:uuid:aa543740-bdda-424e-8c96-df4873be8500" classifiedObject="SubmissionSet01" nodeRepresentation="History and Physical">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon contentTypeCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="History and Physical"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:ExternalIdentifier id="ei03" registryObject="SubmissionSet01" identificationScheme="urn:uuid:96fdda7c-d067-4183-912e-bf5ee74998a8" value="1.3.6.1.4.1.21367.2005.3.9999.33">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSSubmissionSet.uniqueId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                     <urn4:ExternalIdentifier id="ei04" registryObject="SubmissionSet01" identificationScheme="urn:uuid:554ac39e-e3fe-47fe-b233-965d2a147832" value="3670984664">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSSubmissionSet.sourceId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                     <urn4:ExternalIdentifier id="ei05" registryObject="SubmissionSet01" identificationScheme="urn:uuid:6b5aea1a-874d-4603-a4bc-96a0a7b38446" value="SELF-5^^^&amp;1.3.6.1.4.1.21367.2005.3.7&amp;ISO">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSSubmissionSet.patientId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                  </urn4:RegistryPackage>
                  <urn4:Classification id="cl10" classifiedObject="SubmissionSet01" classificationNode="urn:uuid:a54d6aa5-d40d-43f9-88c5-b4633d873bdd"/>
                  <urn4:Association id="as01" associationType="HasMember" sourceObject="SubmissionSet01" targetObject="Document01">
                     <urn4:Slot name="SubmissionSetStatus">
                        <urn4:ValueList>
                           <urn4:Value>Original</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                  </urn4:Association>
               </urn4:RegistryObjectList>
            </urn2:SubmitObjectsRequest>
            <!--1 or more repetitions:-->
            <urn5:Document id="Document01">UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</urn5:Document>
         </urn:ProvideAndRegisterDocumentSetRequest>
      </urn:RespondingGateway_ProvideAndRegisterDocumentSetRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns11='urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0';
//ns11:RegistryResponse[1]/ns11:RegistryErrorList[1]/ns11:RegistryError[1]/@errorCode</path>
								<content>CONNECTPolicyCheckFailed</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:wsaConfig action="tns:ProvideAndRegisterDocumentSet-b" mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="Policy Engine Mock" type="mockresponse">
				<con:settings/>
				<con:config startStep="EntityRequestMsg - XDR" xsi:type="con:MockResponseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:interface>AdapterPolicyEngineBindingSoap</con:interface>
					<con:operation>CheckPolicy</con:operation>
					<con:path>/mockPE</con:path>
					<con:port>11231</con:port>
					<con:timeout>30000</con:timeout>
					<con:response>
						<con:settings/>
						<con:responseContent><![CDATA[<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns15:CheckPolicyResponse xmlns:ns2="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:ns3="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:ns4="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:ns5="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:ns6="http://www.hhs.gov/healthit/nhin/cdc" xmlns:ns7="http://nhinc.services.com/schema/auditmessage" xmlns:ns8="http://www.w3.org/2005/08/addressing" xmlns:ns9="http://docs.oasis-open.org/wsn/b-2" xmlns:ns10="urn:ihe:iti:xds-b:2007" xmlns:ns11="urn:gov:hhs:fha:nhinc:common:subscriptionb2overridefordocuments" xmlns:ns12="http://docs.oasis-open.org/wsrf/bf-2" xmlns:ns13="http://docs.oasis-open.org/wsn/t-1" xmlns:ns14="urn:oasis:names:tc:xacml:2.0:policy:schema:os" xmlns:ns15="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:ns16="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns17="urn:gov:hhs:fha:nhinc:common:subscriptionb2overrideforcdc" xmlns:ns18="urn:oasis:names:tc:xacml:2.0:context:schema:os" xmlns:ns19="http://schemas.xmlsoap.org/ws/2004/08/addressing">
         <ns15:response>
            <ns18:Result>
               <ns18:Decision>Deny</ns18:Decision>
            </ns18:Result>
         </ns15:response>
      </ns15:CheckPolicyResponse>
   </S:Body>
</S:Envelope>]]></con:responseContent>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
					</con:response>
					<con:assertion name="AuthnStatementAuthnInstant " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='authInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authInstant'
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-instant';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementSessionIndex" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='sessionIndex';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:sessionIndex';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:session-index';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementAthnContextClassRef " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='authContextClassRef';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authContextClassRef';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-context-class-ref';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementSubjectLocalityAddress " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='subjectLocalityAddress';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityAddress';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:ip-address';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementDNSName " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='subjectLocalityDNSName';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityDNSName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:dns-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserPersonName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='personname';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:userName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserOrganizationName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user organization';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:name';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-organization-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCode" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role coded';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code';
def XacmlAttributeId='urn:oasis:names:tc:xacml:2.0:subject:role';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCodeSystem " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role system';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCodeSystemName " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role system name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCodeDiplayName " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role display name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-description';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCode" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCode';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:purposeofuse';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCodeSystem" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCodeSystem';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCodeSystemName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCodeSystemName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCodeDisplayName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCodeDisplayName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementDecision" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementDecision';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementResource" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementResource';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementAction" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementAction';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:action';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
//log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);
def ExpectedValue='action';
//log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (ExpectedValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionID " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionID';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionIssueInstant" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssueInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionVersion" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionVersion';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionIssuer" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssuer';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotBefore" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotBefore';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2001-01-01T06:00:00.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2009-05-07T02:00:17.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentReference " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentReference';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentType " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentType';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContent " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="HomeCommunityId" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='home-community-id';
def AssertionXpath='//ec:assertion/nc:homeCommunity/nc:homeCommunityId';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:home-community-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="OrganizationId" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='organizationid';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:homeCommunityId';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:organization-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="PatientId" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PatientId';
def XacmlAttributeId='http://www.hhs.gov/healthit/nhin#subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';
mockRequestHolder.namespaces['hl7'] = 'urn:hl7-org:v3';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValueExtension = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@extension"]
def ExpectedExtension = '1234';
log.info('XacmlAttributeValue(' + FieldName + '@extension)=' + XacmlValueExtension);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) => ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueExtension==ExpectedExtension);

def XacmlValueRoot = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@root"]
def ExpectedRoot = '2.2.2';
log.info('XacmlAttributeValue(' + FieldName + '@root)=' + XacmlValueRoot);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) => ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueRoot==ExpectedRoot);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'urn:hl7-org:v3#II';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionAccessConsent" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:accessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:instanceAccessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-instance-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns19='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns18:CheckPolicyRequest[1]/ns18:request[1]/ns19:Subject[2]/ns19:Attribute[1]/@AttributeId</path>
							<content>urn:gov:hhs:fha:nhinc:home-community-id</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:assertion name="assigning authority" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns18='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns15='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns15:CheckPolicyRequest[1]/ns15:request[1]/ns18:Resource[1]/ns18:Attribute[1]/ns18:AttributeValue[1]</path>
							<content>1.3.6.1.4.1.21367.2005.3.7</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:assertion name="local patient id" type="XPath Match">
						<con:configuration>
							<path>declare namespace xacml='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace adapter='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//xacml:Resource/xacml:Attribute[@AttributeId='urn:oasis:names:tc:xacml:1.0:resource:resource-id']/xacml:AttributeValue</path>
							<content>SELF-5</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
				</con:config>
			</con:testStep>
			
			<con:setupScript>nhinc.FileUtils.backupConfiguration(context.findProperty("GatewayPropDir"), log);</con:setupScript><con:properties>
				<con:property>
					<con:name>startDate</con:name>
					<con:value>2013-01-08T18:57:48Z</con:value>
				</con:property>
				<con:property>
					<con:name>endDate</con:name>
					<con:value>2013-01-08T19:07:48Z</con:value>
				</con:property>
				<con:property>
					<con:name>sigDate</con:name>
					<con:value>01/08/2013 18:57:48</con:value>
				</con:property>
				<con:property>
					<con:name>expireDate</con:name>
					<con:value>2013-02-07T00:00:00Z</con:value>
				</con:property>
			</con:properties>
			<con:reportParameters/>
			<con:tearDownScript>nhinc.FileUtils.restoreConfiguration(context.findProperty("GatewayPropDir"), log);</con:tearDownScript>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="c0fa99bf-5b63-4752-87a4-6b5968428456" keepSession="false" maxResults="0" name="Policy Check mock Permit" searchProperties="true" disabled="true">
			<con:settings/>
			<con:testStep name="ModifyInterrnalConnectionInfoForPE" type="groovy">
				<con:settings/>
				<con:config><script>def destConfigFileLocation = context.findProperty("GatewayPropDir");
def mockHost = context.findProperty("mockHost");
def mockPEURL = "http://" + mockHost + ":11231/mockPE";
def LocalHCID = context.findProperty( "LocalHCID" );

nhinc.FileUtils.createOrUpdateConnection("internalConnectionInfo.xml", destConfigFileLocation, LocalHCID, "policyengineservice", mockPEURL, "LEVEL_a0", log)</script></con:config>
			</con:testStep>
			<con:testStep name="EntityRequestMsg - XDR" type="request">
				<con:settings/>
				<con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:interface>EntityXDR_Binding</con:interface>
					<con:operation>ProvideAndRegisterDocumentSet-b</con:operation>
					<con:request incomingWss="" name="EntityRequestMsg - XDR" outgoingWss="" wssPasswordType="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-XDREntity}</con:endpoint>
						<con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonentity" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:add="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:urn2="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:urn3="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:urn4="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:urn5="urn:ihe:iti:xds-b:2007">
   <soapenv:Header/>
   <soapenv:Body projectName="EntityXDRTests" testCase="Policy Check mock Permit">
      <urn:RespondingGateway_ProvideAndRegisterDocumentSetRequest>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Joe</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>PSYCHOTHERAPY</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <!--Optional:-->
            <!--urn1:claimFormRef>claimFormRef</urn1:claimFormRef-->
            <!--Optional:-->
            <!--urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw-->
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>2009-04-16T13:10:39.093Z</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <urn1:samlAuthzDecisionStatement>
					<urn1:decision>Permit</urn1:decision>
					<urn1:resource>https://158.147.185.168:8181/SamlReceiveService/SamlProcessWS</urn1:resource>
					<urn1:action>action</urn1:action>
					<urn1:evidence>
						<urn1:assertion>
							<urn1:id>40df7c0a-ff3e-4b26-baeb-f2910f6d05a9</urn1:id>
							<urn1:issueInstant>2009-04-16T13:10:39.093Z</urn1:issueInstant>
							<urn1:version>2.0</urn1:version>
							<urn1:issuerFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</urn1:issuerFormat>
							<urn1:issuer>CN=SAML User,OU=Harris,O=HITS,L=Melbourne,ST=FL,C=US</urn1:issuer>
							<urn1:conditions>
								<urn1:notBefore>2009-04-16T13:10:39.093Z</urn1:notBefore>
								<urn1:notOnOrAfter>2009-12-31T12:00:00.000Z</urn1:notOnOrAfter>
							</urn1:conditions>
							<urn1:accessConsentPolicy>Claim-Ref-1234</urn1:accessConsentPolicy>
							<urn1:instanceAccessConsentPolicy>Claim-Instance-1</urn1:instanceAccessConsentPolicy>
						</urn1:assertion>
					</urn1:evidence>
				</urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
         <urn:nhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>Test HCID2</urn1:description>
                  <urn1:homeCommunityId>2.2</urn1:homeCommunityId>
                  <urn1:name>Test HCID2</urn1:name>
               </urn1:homeCommunity>
            </urn1:nhinTargetCommunity>
         </urn:nhinTargetCommunities>
         <urn:ProvideAndRegisterDocumentSetRequest>
            <urn2:SubmitObjectsRequest id="123" comment="comme">
               <!--Optional:-->
               <urn4:RegistryObjectList>
                  <urn4:ExtrinsicObject id="Document01" mimeType="text/xml" objectType="urn:uuid:7edca82f-054d-47f2-a032-9b2a5b5186c1">
                     <urn4:Slot name="creationTime">
                        <urn4:ValueList>
                           <urn4:Value>20051224</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="languageCode">
                        <urn4:ValueList>
                           <urn4:Value>en-us</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="serviceStartTime">
                        <urn4:ValueList>
                           <urn4:Value>200412230800</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="serviceStopTime">
                        <urn4:ValueList>
                           <urn4:Value>200412230801</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="sourcePatientId">
                        <urn4:ValueList>
                           <urn4:Value>SELF-5^^^&amp;1.3.6.1.4.1.21367.2003.3.9&amp;ISO</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="sourcePatientInfo">
                        <urn4:ValueList>
                           <urn4:Value>PID-3|SELF-5^^^&amp;1.3.6.1.4.1.21367.2003.3.9&amp;ISO</urn4:Value>
                           <urn4:Value>PID-5|Doe^John^^^</urn4:Value>
                           <urn4:Value>PID-7|19560527</urn4:Value>
                           <urn4:Value>PID-8|M</urn4:Value>
                           <urn4:Value>PID-11|100 Main St^^Metropolis^Il^44130^USA</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Name>
                        <urn4:LocalizedString value="Physical"/>
                     </urn4:Name>
                     <urn4:Description/>
                     <urn4:Classification id="cl01" classificationScheme="urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d" classifiedObject="Document01">
                        <urn4:Slot name="authorPerson">
                           <urn4:ValueList>
                              <urn4:Value>Gerald Smitty</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorInstitution">
                           <urn4:ValueList>
                              <urn4:Value>Cleveland Clinic</urn4:Value>
                              <urn4:Value>Parma Community</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorRole">
                           <urn4:ValueList>
                              <urn4:Value>Attending</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorSpecialty">
                           <urn4:ValueList>
                              <urn4:Value>Orthopedic</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                     </urn4:Classification>
                     <urn4:Classification id="cl02" classificationScheme="urn:uuid:41a5887f-8865-4c09-adf7-e362475b143a" classifiedObject="Document01" nodeRepresentation="History and Physical">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon classCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="History and Physical"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl03" classificationScheme="urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f" classifiedObject="Document01" nodeRepresentation="1.3.6.1.4.1.21367.2006.7.101">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon confidentialityCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="Clinical-Staff"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl04" classificationScheme="urn:uuid:a09d5840-386c-46f2-b5ad-9c3699a4309d" classifiedObject="Document01" nodeRepresentation="CDAR2/IHE 1.0">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon formatCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="CDAR2/IHE 1.0"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl05" classificationScheme="urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1" classifiedObject="Document01" nodeRepresentation="Outpatient">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon healthcareFacilityTypeCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="Outpatient"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl06" classificationScheme="urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead" classifiedObject="Document01" nodeRepresentation="General Medicine">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon practiceSettingCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="General Medicine"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl07" classificationScheme="urn:uuid:f0306f51-975f-434e-a61c-c59651d33983" classifiedObject="Document01" nodeRepresentation="34108-1">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>LOINC</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="Outpatient Evaluation And Management"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:ExternalIdentifier id="ei01" registryObject="Document01" identificationScheme="urn:uuid:58a6f841-87b3-4a3e-92fd-a8ffeff98427" value="SELF-5^^^&amp;1.3.6.1.4.1.21367.2005.3.7&amp;ISO">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSDocumentEntry.patientId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                     <urn4:ExternalIdentifier id="ei02" registryObject="Document01" identificationScheme="urn:uuid:2e82c1f6-a085-4c72-9da3-8640a32e42ab" value="1.3.6.1.4.1.21367.2005.3.9999.32">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSDocumentEntry.uniqueId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                  </urn4:ExtrinsicObject>
                  <urn4:RegistryPackage id="SubmissionSet01">
                     <urn4:Slot name="submissionTime">
                        <urn4:ValueList>
                           <urn4:Value>20041225235050</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Name>
                        <urn4:LocalizedString value="Physical"/>
                     </urn4:Name>
                     <urn4:Description>
                        <urn4:LocalizedString value="Annual physical"/>
                     </urn4:Description>
                     <urn4:Classification id="cl08" classificationScheme="urn:uuid:a7058bb9-b4e4-4307-ba5b-e3f0ab85e12d" classifiedObject="SubmissionSet01">
                        <urn4:Slot name="authorPerson">
                           <urn4:ValueList>
                              <urn4:Value>Sherry Dopplemeyer</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorInstitution">
                           <urn4:ValueList>
                              <urn4:Value>Cleveland Clinic</urn4:Value>
                              <urn4:Value>Berea Community</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorRole">
                           <urn4:ValueList>
                              <urn4:Value>Purn4ary Surgon</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorSpecialty">
                           <urn4:ValueList>
                              <urn4:Value>Orthopedic</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                     </urn4:Classification>
                     <urn4:Classification id="cl09" classificationScheme="urn:uuid:aa543740-bdda-424e-8c96-df4873be8500" classifiedObject="SubmissionSet01" nodeRepresentation="History and Physical">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon contentTypeCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="History and Physical"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:ExternalIdentifier id="ei03" registryObject="SubmissionSet01" identificationScheme="urn:uuid:96fdda7c-d067-4183-912e-bf5ee74998a8" value="1.3.6.1.4.1.21367.2005.3.9999.33">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSSubmissionSet.uniqueId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                     <urn4:ExternalIdentifier id="ei04" registryObject="SubmissionSet01" identificationScheme="urn:uuid:554ac39e-e3fe-47fe-b233-965d2a147832" value="3670984664">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSSubmissionSet.sourceId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                     <urn4:ExternalIdentifier id="ei05" registryObject="SubmissionSet01" identificationScheme="urn:uuid:6b5aea1a-874d-4603-a4bc-96a0a7b38446" value="SELF-5^^^&amp;1.3.6.1.4.1.21367.2005.3.7&amp;ISO">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSSubmissionSet.patientId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                  </urn4:RegistryPackage>
                  <urn4:Classification id="cl10" classifiedObject="SubmissionSet01" classificationNode="urn:uuid:a54d6aa5-d40d-43f9-88c5-b4633d873bdd"/>
                  <urn4:Association id="as01" associationType="HasMember" sourceObject="SubmissionSet01" targetObject="Document01">
                     <urn4:Slot name="SubmissionSetStatus">
                        <urn4:ValueList>
                           <urn4:Value>Original</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                  </urn4:Association>
               </urn4:RegistryObjectList>
            </urn2:SubmitObjectsRequest>
            <!--1 or more repetitions:-->
            <urn5:Document id="Document01">UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</urn5:Document>
         </urn:ProvideAndRegisterDocumentSetRequest>
      </urn:RespondingGateway_ProvideAndRegisterDocumentSetRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace ns11='urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0';
//ns11:RegistryResponse[1]/@status</path><content>urn:oasis:names:tc:ebxml-regrep:ResponseStatusType:Success</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:wsaConfig action="tns:ProvideAndRegisterDocumentSet-b" mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="Policy Engine Mock" type="mockresponse">
				<con:settings/>
				<con:config startStep="EntityRequestMsg - XDR" xsi:type="con:MockResponseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:interface>AdapterPolicyEngineBindingSoap</con:interface>
					<con:operation>CheckPolicy</con:operation>
					<con:path>/mockPE</con:path>
					<con:port>11231</con:port>
					<con:timeout>30000</con:timeout>
					<con:response>
						<con:settings/>
						<con:responseContent><![CDATA[<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns15:CheckPolicyResponse xmlns:ns2="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:ns3="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:ns4="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:ns5="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:ns6="http://www.hhs.gov/healthit/nhin/cdc" xmlns:ns7="http://nhinc.services.com/schema/auditmessage" xmlns:ns8="http://www.w3.org/2005/08/addressing" xmlns:ns9="http://docs.oasis-open.org/wsn/b-2" xmlns:ns10="urn:ihe:iti:xds-b:2007" xmlns:ns11="urn:gov:hhs:fha:nhinc:common:subscriptionb2overridefordocuments" xmlns:ns12="http://docs.oasis-open.org/wsrf/bf-2" xmlns:ns13="http://docs.oasis-open.org/wsn/t-1" xmlns:ns14="urn:oasis:names:tc:xacml:2.0:policy:schema:os" xmlns:ns15="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:ns16="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns17="urn:gov:hhs:fha:nhinc:common:subscriptionb2overrideforcdc" xmlns:ns18="urn:oasis:names:tc:xacml:2.0:context:schema:os" xmlns:ns19="http://schemas.xmlsoap.org/ws/2004/08/addressing">
         <ns15:response>
            <ns18:Result>
               <ns18:Decision>Permit</ns18:Decision>
            </ns18:Result>
         </ns15:response>
      </ns15:CheckPolicyResponse>
   </S:Body>
</S:Envelope>]]></con:responseContent>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
					</con:response>
					<con:assertion name="AuthnStatementAuthnInstant " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='authInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authInstant'
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-instant';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementSessionIndex" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='sessionIndex';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:sessionIndex';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:session-index';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementAthnContextClassRef " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='authContextClassRef';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authContextClassRef';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-context-class-ref';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementSubjectLocalityAddress " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='subjectLocalityAddress';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityAddress';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:ip-address';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementDNSName " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='subjectLocalityDNSName';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityDNSName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:dns-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserPersonName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='personname';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:userName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserOrganizationName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user organization';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:name';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-organization-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCode" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role coded';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code';
def XacmlAttributeId='urn:oasis:names:tc:xacml:2.0:subject:role';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCodeSystem " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role system';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCodeSystemName " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role system name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCodeDiplayName " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role display name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-description';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCode" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCode';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:purposeofuse';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCodeSystem" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCodeSystem';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCodeSystemName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCodeSystemName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCodeDisplayName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCodeDisplayName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementDecision" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementDecision';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementResource" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementResource';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementAction" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementAction';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:action';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
//log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);
def ExpectedValue='action';
//log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (ExpectedValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionID " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionID';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionIssueInstant" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssueInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionVersion" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionVersion';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionIssuer" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssuer';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotBefore" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotBefore';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2001-01-01T06:00:00.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2009-05-07T02:00:17.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentReference " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentReference';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentType " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentType';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContent " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="HomeCommunityId" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='home-community-id';
def AssertionXpath='//ec:assertion/nc:homeCommunity/nc:homeCommunityId';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:home-community-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="OrganizationId" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='organizationid';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:homeCommunityId';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:organization-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="PatientId" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PatientId';
def XacmlAttributeId='http://www.hhs.gov/healthit/nhin#subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';
mockRequestHolder.namespaces['hl7'] = 'urn:hl7-org:v3';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValueExtension = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@extension"]
def ExpectedExtension = '1234';
log.info('XacmlAttributeValue(' + FieldName + '@extension)=' + XacmlValueExtension);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) => ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueExtension==ExpectedExtension);

def XacmlValueRoot = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@root"]
def ExpectedRoot = '2.2.2';
log.info('XacmlAttributeValue(' + FieldName + '@root)=' + XacmlValueRoot);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) => ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueRoot==ExpectedRoot);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'urn:hl7-org:v3#II';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionAccessConsent" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:accessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:instanceAccessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-instance-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') => ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns19='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns18:CheckPolicyRequest[1]/ns18:request[1]/ns19:Subject[2]/ns19:Attribute[1]/@AttributeId</path>
							<content>urn:gov:hhs:fha:nhinc:home-community-id</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:assertion name="assigning authority" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns18='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns15='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns15:CheckPolicyRequest[1]/ns15:request[1]/ns18:Resource[1]/ns18:Attribute[1]/ns18:AttributeValue[1]</path>
							<content>1.3.6.1.4.1.21367.2005.3.7</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:assertion name="local patient id" type="XPath Match">
						<con:configuration>
							<path>declare namespace xacml='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace adapter='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//xacml:Resource/xacml:Attribute[@AttributeId='urn:oasis:names:tc:xacml:1.0:resource:resource-id']/xacml:AttributeValue</path>
							<content>SELF-5</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
				</con:config>
			</con:testStep>
			
			<con:setupScript>nhinc.FileUtils.backupConfiguration(context.findProperty("GatewayPropDir"), log);</con:setupScript><con:properties>
				<con:property>
					<con:name>startDate</con:name>
					<con:value>2012-12-18T18:59:18Z</con:value>
				</con:property>
				<con:property>
					<con:name>endDate</con:name>
					<con:value>2012-12-18T19:09:18Z</con:value>
				</con:property>
				<con:property>
					<con:name>sigDate</con:name>
					<con:value>12/18/2012 18:59:18</con:value>
				</con:property>
				<con:property>
					<con:name>expireDate</con:name>
					<con:value>2013-01-17T00:00:00Z</con:value>
				</con:property>
			</con:properties>
			<con:reportParameters/>
			<con:tearDownScript>nhinc.FileUtils.restoreConfiguration(context.findProperty("GatewayPropDir"), log);</con:tearDownScript>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="e25689da-daff-4d61-ba47-878285e9af01" keepSession="false" maxResults="0" name="Success message from NHINC - adapter" searchProperties="true">
			<con:settings/>
			<con:testStep name="EntityRequestMsg - XDR" type="request">
				<con:settings/>
				<con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:interface>EntityXDR_Binding</con:interface>
					<con:operation>ProvideAndRegisterDocumentSet-b</con:operation>
					<con:request incomingWss="" name="EntityRequestMsg - XDR" outgoingWss="" wssPasswordType="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-XDREntity}</con:endpoint>
						<con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonentity" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:add="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:urn2="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:urn3="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:urn4="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:urn5="urn:ihe:iti:xds-b:2007">
   <soap:Header/>
   <soap:Body>
      <urn:RespondingGateway_ProvideAndRegisterDocumentSetRequest>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Joe</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <!--urn1:claimFormRef>claimFormRef</urn1:claimFormRef-->
            <!--Optional:-->
            <!--urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw-->
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <!--urn1:authInstant>authInstant</urn1:authInstant-->
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <!--urn1:samlAuthzDecisionStatement>
					<urn1:decision>Permit</urn1:decision>
					<urn1:resource>https://158.147.185.168:8181/SamlReceiveService/SamlProcessWS</urn1:resource>
					<urn1:action>TestSaml</urn1:action>
					<urn1:evidence>
						<urn1:assertion>
							<urn1:id>40df7c0a-ff3e-4b26-baeb-f2910f6d05a9</urn1:id>
							<urn1:issueInstant>2009-04-16T13:10:39.093Z</urn1:issueInstant>
							<urn1:version>2.0</urn1:version>
							<urn1:issuerFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</urn1:issuerFormat>
							<urn1:issuer>CN=SAML User,OU=Harris,O=HITS,L=Melbourne,ST=FL,C=US</urn1:issuer>
							<urn1:conditions>
								<urn1:notBefore>2009-04-16T13:10:39.093Z</urn1:notBefore>
								<urn1:notOnOrAfter>2009-12-31T12:00:00.000Z</urn1:notOnOrAfter>
							</urn1:conditions>
							<urn1:accessConsentPolicy>Claim-Ref-1234</urn1:accessConsentPolicy>
							<urn1:instanceAccessConsentPolicy>Claim-Instance-1</urn1:instanceAccessConsentPolicy>
						</urn1:assertion>
					</urn1:evidence>
				</urn1:samlAuthzDecisionStatement-->
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
         <urn:nhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>Test HCID2</urn1:description>
                  <urn1:homeCommunityId>2.2</urn1:homeCommunityId>
                  <urn1:name>Test HCID2</urn1:name>
               </urn1:homeCommunity>
            </urn1:nhinTargetCommunity>
         </urn:nhinTargetCommunities>
         <urn:ProvideAndRegisterDocumentSetRequest>
            <urn2:SubmitObjectsRequest id="123" comment="comme">
               <!--Optional:-->
               <urn4:RegistryObjectList>
                  <urn4:ExtrinsicObject id="Document01" mimeType="text/xml" objectType="urn:uuid:7edca82f-054d-47f2-a032-9b2a5b5186c1">
                     <urn4:Slot name="creationTime">
                        <urn4:ValueList>
                           <urn4:Value>20051224</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="languageCode">
                        <urn4:ValueList>
                           <urn4:Value>en-us</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="serviceStartTime">
                        <urn4:ValueList>
                           <urn4:Value>200412230800</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="serviceStopTime">
                        <urn4:ValueList>
                           <urn4:Value>200412230801</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="sourcePatientId">
                        <urn4:ValueList>
                           <urn4:Value>ST-1000^^^&amp;1.3.6.1.4.1.21367.2003.3.9&amp;ISO</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="sourcePatientInfo">
                        <urn4:ValueList>
                           <urn4:Value>PID-3|ST-1000^^^&amp;1.3.6.1.4.1.21367.2003.3.9&amp;ISO</urn4:Value>
                           <urn4:Value>PID-5|Doe^John^^^</urn4:Value>
                           <urn4:Value>PID-7|19560527</urn4:Value>
                           <urn4:Value>PID-8|M</urn4:Value>
                           <urn4:Value>PID-11|100 Main St^^Metropolis^Il^44130^USA</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Name>
                        <urn4:LocalizedString value="Physical"/>
                     </urn4:Name>
                     <urn4:Description/>
                     <urn4:Classification id="cl01" classificationScheme="urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d" classifiedObject="Document01">
                        <urn4:Slot name="authorPerson">
                           <urn4:ValueList>
                              <urn4:Value>Gerald Smitty</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorInstitution">
                           <urn4:ValueList>
                              <urn4:Value>Cleveland Clinic</urn4:Value>
                              <urn4:Value>Parma Community</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorRole">
                           <urn4:ValueList>
                              <urn4:Value>Attending</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorSpecialty">
                           <urn4:ValueList>
                              <urn4:Value>Orthopedic</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                     </urn4:Classification>
                     <urn4:Classification id="cl02" classificationScheme="urn:uuid:41a5887f-8865-4c09-adf7-e362475b143a" classifiedObject="Document01" nodeRepresentation="History and Physical">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon classCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="History and Physical"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl03" classificationScheme="urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f" classifiedObject="Document01" nodeRepresentation="1.3.6.1.4.1.21367.2006.7.101">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon confidentialityCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="Clinical-Staff"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl04" classificationScheme="urn:uuid:a09d5840-386c-46f2-b5ad-9c3699a4309d" classifiedObject="Document01" nodeRepresentation="CDAR2/IHE 1.0">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon formatCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="CDAR2/IHE 1.0"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl05" classificationScheme="urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1" classifiedObject="Document01" nodeRepresentation="Outpatient">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon healthcareFacilityTypeCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="Outpatient"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl06" classificationScheme="urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead" classifiedObject="Document01" nodeRepresentation="General Medicine">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon practiceSettingCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="General Medicine"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl07" classificationScheme="urn:uuid:f0306f51-975f-434e-a61c-c59651d33983" classifiedObject="Document01" nodeRepresentation="34108-1">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>LOINC</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="Outpatient Evaluation And Management"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:ExternalIdentifier id="ei01" registryObject="Document01" identificationScheme="urn:uuid:58a6f841-87b3-4a3e-92fd-a8ffeff98427" value="SELF-5^^^&amp;1.3.6.1.4.1.21367.2005.3.7&amp;ISO">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSDocumentEntry.patientId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                     <urn4:ExternalIdentifier id="ei02" registryObject="Document01" identificationScheme="urn:uuid:2e82c1f6-a085-4c72-9da3-8640a32e42ab" value="1.3.6.1.4.1.21367.2005.3.9999.32">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSDocumentEntry.uniqueId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                  </urn4:ExtrinsicObject>
                  <urn4:RegistryPackage id="SubmissionSet01">
                     <urn4:Slot name="submissionTime">
                        <urn4:ValueList>
                           <urn4:Value>20041225235050</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Name>
                        <urn4:LocalizedString value="Physical"/>
                     </urn4:Name>
                     <urn4:Description>
                        <urn4:LocalizedString value="Annual physical"/>
                     </urn4:Description>
                     <urn4:Classification id="cl08" classificationScheme="urn:uuid:a7058bb9-b4e4-4307-ba5b-e3f0ab85e12d" classifiedObject="SubmissionSet01">
                        <urn4:Slot name="authorPerson">
                           <urn4:ValueList>
                              <urn4:Value>Sherry Dopplemeyer</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorInstitution">
                           <urn4:ValueList>
                              <urn4:Value>Cleveland Clinic</urn4:Value>
                              <urn4:Value>Berea Community</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorRole">
                           <urn4:ValueList>
                              <urn4:Value>Purn4ary Surgon</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorSpecialty">
                           <urn4:ValueList>
                              <urn4:Value>Orthopedic</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                     </urn4:Classification>
                     <urn4:Classification id="cl09" classificationScheme="urn:uuid:aa543740-bdda-424e-8c96-df4873be8500" classifiedObject="SubmissionSet01" nodeRepresentation="History and Physical">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon contentTypeCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="History and Physical"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:ExternalIdentifier id="ei03" registryObject="SubmissionSet01" identificationScheme="urn:uuid:96fdda7c-d067-4183-912e-bf5ee74998a8" value="1.3.6.1.4.1.21367.2005.3.9999.33">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSSubmissionSet.uniqueId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                     <urn4:ExternalIdentifier id="ei04" registryObject="SubmissionSet01" identificationScheme="urn:uuid:554ac39e-e3fe-47fe-b233-965d2a147832" value="3670984664">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSSubmissionSet.sourceId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                     <urn4:ExternalIdentifier id="ei05" registryObject="SubmissionSet01" identificationScheme="urn:uuid:6b5aea1a-874d-4603-a4bc-96a0a7b38446" value="SELF-5^^^&amp;1.3.6.1.4.1.21367.2005.3.7&amp;ISO">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSSubmissionSet.patientId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                  </urn4:RegistryPackage>
                  <urn4:Classification id="cl10" classifiedObject="SubmissionSet01" classificationNode="urn:uuid:a54d6aa5-d40d-43f9-88c5-b4633d873bdd"/>
                  <urn4:Association id="as01" associationType="HasMember" sourceObject="SubmissionSet01" targetObject="Document01">
                     <urn4:Slot name="SubmissionSetStatus">
                        <urn4:ValueList>
                           <urn4:Value>Original</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                  </urn4:Association>
               </urn4:RegistryObjectList>
            </urn2:SubmitObjectsRequest>
            <!--1 or more repetitions:-->
            <urn5:Document id="Document01">UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</urn5:Document>
         </urn:ProvideAndRegisterDocumentSetRequest>
      </urn:RespondingGateway_ProvideAndRegisterDocumentSetRequest>
   </soap:Body>
</soap:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns14='urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0';
//ns14:RegistryResponse[1]/@status</path>
								<content>urn:oasis:names:tc:ebxml-regrep:ResponseStatusType:Success</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:wsaConfig action="tns:ProvideAndRegisterDocumentSet-b" mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:setupScript>nhinc.FileUtils.backupConfiguration(context.findProperty("GatewayPropDir"), log);</con:setupScript><con:properties>
				<con:property>
					<con:name>startDate</con:name>
					<con:value>2013-01-08T19:09:10Z</con:value>
				</con:property>
				<con:property>
					<con:name>endDate</con:name>
					<con:value>2013-01-08T19:19:10Z</con:value>
				</con:property>
				<con:property>
					<con:name>sigDate</con:name>
					<con:value>01/08/2013 19:09:10</con:value>
				</con:property>
				<con:property>
					<con:name>expireDate</con:name>
					<con:value>2013-02-07T00:00:00Z</con:value>
				</con:property>
			</con:properties>
			<con:reportParameters/>
			<con:tearDownScript>nhinc.FileUtils.restoreConfiguration(context.findProperty("GatewayPropDir"), log);</con:tearDownScript>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="4f6537aa-52b1-417f-beb6-f55988114985" keepSession="false" maxResults="0" name="Error message from mock NHINC" searchProperties="true" disabled="true">
			<con:settings/>
			<con:testStep name="Modify InternalConnectionInfo For NHINC Mock" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

//def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");
def mockHost = context.findProperty("mockHost");
def XDRServiceURL = "https://" + NHINGatewayHost + ":8181/CONNECTNhinServicesWeb/DocumentRepositoryXDR_Service";
def mockXDRURL = "https://" + mockHost + ":11222/mockXDR";
def LocalHCID = context.findProperty( "LocalHCID" );
def RemoteHCID = context.findProperty( "RemoteHCID" );

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "serviceXDR", mockXDRURL, context, log)
//FileUtils.CreateOrUpdateConnection(destConfigFileLocation, LocalHCID, "mockxdr", mockXDRURL, context, log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="EntiityRequestMsg - XDR" type="request">
				<con:settings/>
				<con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:interface>EntityXDR_Binding</con:interface>
					<con:operation>ProvideAndRegisterDocumentSet-b</con:operation>
					<con:request incomingWss="" name="EntiityRequestMsg - XDR" outgoingWss="" wssPasswordType="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-XDREntity}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonentity" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:add="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:urn2="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:urn3="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:urn4="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:urn5="urn:ihe:iti:xds-b:2007">
   <soapenv:Header/>
   <soapenv:Body projectName="EntityXDRTests" testCase="Error message from mock NHINC">
      <urn:RespondingGateway_ProvideAndRegisterDocumentSetRequest>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Joe</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <!--urn1:claimFormRef>claimFormRef</urn1:claimFormRef-->
            <!--Optional:-->
            <!--urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw-->
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>

         <urn:nhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>Test HCID2</urn1:description>
                  <urn1:homeCommunityId>2.2</urn1:homeCommunityId>
                  <urn1:name>Test HCID2</urn1:name>
               </urn1:homeCommunity>
            </urn1:nhinTargetCommunity>
         </urn:nhinTargetCommunities>

         <urn:ProvideAndRegisterDocumentSetRequest>
            <urn2:SubmitObjectsRequest id="123" comment="comme">
               <!--Optional:-->
  
               <urn4:RegistryObjectList>
                  <urn4:ExtrinsicObject id="Document01" mimeType="text/xml" objectType="urn:uuid:7edca82f-054d-47f2-a032-9b2a5b5186c1">
                     <urn4:Slot name="creationTime">
                        <urn4:ValueList>
                           <urn4:Value>20051224</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="languageCode">
                        <urn4:ValueList>
                           <urn4:Value>en-us</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="serviceStartTime">
                        <urn4:ValueList>
                           <urn4:Value>200412230800</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="serviceStopTime">
                        <urn4:ValueList>
                           <urn4:Value>200412230801</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="sourcePatientId">
                        <urn4:ValueList>
                           <urn4:Value>ST-1000^^^&amp;1.3.6.1.4.1.21367.2003.3.9&amp;ISO</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="sourcePatientInfo">
                        <urn4:ValueList>
                           <urn4:Value>PID-3|ST-1000^^^&amp;1.3.6.1.4.1.21367.2003.3.9&amp;ISO</urn4:Value>
                           <urn4:Value>PID-5|Doe^John^^^</urn4:Value>
                           <urn4:Value>PID-7|19560527</urn4:Value>
                           <urn4:Value>PID-8|M</urn4:Value>
                           <urn4:Value>PID-11|100 Main St^^Metropolis^Il^44130^USA</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Name>
                        <urn4:LocalizedString value="Physical"/>
                     </urn4:Name>
                     <urn4:Description/>
                     <urn4:Classification id="cl01" classificationScheme="urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d" classifiedObject="Document01">
                        <urn4:Slot name="authorPerson">
                           <urn4:ValueList>
                              <urn4:Value>Gerald Smitty</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorInstitution">
                           <urn4:ValueList>
                              <urn4:Value>Cleveland Clinic</urn4:Value>
                              <urn4:Value>Parma Community</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorRole">
                           <urn4:ValueList>
                              <urn4:Value>Attending</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorSpecialty">
                           <urn4:ValueList>
                              <urn4:Value>Orthopedic</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                     </urn4:Classification>
                     <urn4:Classification id="cl02" classificationScheme="urn:uuid:41a5887f-8865-4c09-adf7-e362475b143a" classifiedObject="Document01" nodeRepresentation="History and Physical">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon classCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="History and Physical"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl03" classificationScheme="urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f" classifiedObject="Document01" nodeRepresentation="1.3.6.1.4.1.21367.2006.7.101">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon confidentialityCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="Clinical-Staff"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl04" classificationScheme="urn:uuid:a09d5840-386c-46f2-b5ad-9c3699a4309d" classifiedObject="Document01" nodeRepresentation="CDAR2/IHE 1.0">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon formatCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="CDAR2/IHE 1.0"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl05" classificationScheme="urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1" classifiedObject="Document01" nodeRepresentation="Outpatient">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon healthcareFacilityTypeCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="Outpatient"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl06" classificationScheme="urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead" classifiedObject="Document01" nodeRepresentation="General Medicine">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon practiceSettingCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="General Medicine"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl07" classificationScheme="urn:uuid:f0306f51-975f-434e-a61c-c59651d33983" classifiedObject="Document01" nodeRepresentation="34108-1">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>LOINC</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="Outpatient Evaluation And Management"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:ExternalIdentifier id="ei01" registryObject="Document01" identificationScheme="urn:uuid:58a6f841-87b3-4a3e-92fd-a8ffeff98427" value="SELF-5^^^&amp;1.3.6.1.4.1.21367.2005.3.7&amp;ISO">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSDocumentEntry.patientId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                     <urn4:ExternalIdentifier id="ei02" registryObject="Document01" identificationScheme="urn:uuid:2e82c1f6-a085-4c72-9da3-8640a32e42ab" value="1.3.6.1.4.1.21367.2005.3.9999.32">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSDocumentEntry.uniqueId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                  </urn4:ExtrinsicObject>
                  <urn4:RegistryPackage id="SubmissionSet01">
                     <urn4:Slot name="submissionTime">
                        <urn4:ValueList>
                           <urn4:Value>20041225235050</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Name>
                        <urn4:LocalizedString value="Physical"/>
                     </urn4:Name>
                     <urn4:Description>
                        <urn4:LocalizedString value="Annual physical"/>
                     </urn4:Description>
                     <urn4:Classification id="cl08" classificationScheme="urn:uuid:a7058bb9-b4e4-4307-ba5b-e3f0ab85e12d" classifiedObject="SubmissionSet01">
                        <urn4:Slot name="authorPerson">
                           <urn4:ValueList>
                              <urn4:Value>Sherry Dopplemeyer</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorInstitution">
                           <urn4:ValueList>
                              <urn4:Value>Cleveland Clinic</urn4:Value>
                              <urn4:Value>Berea Community</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorRole">
                           <urn4:ValueList>
                              <urn4:Value>Purn4ary Surgon</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorSpecialty">
                           <urn4:ValueList>
                              <urn4:Value>Orthopedic</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                     </urn4:Classification>
                     <urn4:Classification id="cl09" classificationScheme="urn:uuid:aa543740-bdda-424e-8c96-df4873be8500" classifiedObject="SubmissionSet01" nodeRepresentation="History and Physical">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon contentTypeCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="History and Physical"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:ExternalIdentifier id="ei03" registryObject="SubmissionSet01" identificationScheme="urn:uuid:96fdda7c-d067-4183-912e-bf5ee74998a8" value="1.3.6.1.4.1.21367.2005.3.9999.33">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSSubmissionSet.uniqueId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                     <urn4:ExternalIdentifier id="ei04" registryObject="SubmissionSet01" identificationScheme="urn:uuid:554ac39e-e3fe-47fe-b233-965d2a147832" value="3670984664">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSSubmissionSet.sourceId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                     <urn4:ExternalIdentifier id="ei05" registryObject="SubmissionSet01" identificationScheme="urn:uuid:6b5aea1a-874d-4603-a4bc-96a0a7b38446" value="SELF-5^^^&amp;1.3.6.1.4.1.21367.2005.3.7&amp;ISO">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSSubmissionSet.patientId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                  </urn4:RegistryPackage>
                  <urn4:Classification id="cl10" classifiedObject="SubmissionSet01" classificationNode="urn:uuid:a54d6aa5-d40d-43f9-88c5-b4633d873bdd"/>
                  <urn4:Association id="as01" associationType="HasMember" sourceObject="SubmissionSet01" targetObject="Document01">
                     <urn4:Slot name="SubmissionSetStatus">
                        <urn4:ValueList>
                           <urn4:Value>Original</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                  </urn4:Association>
               </urn4:RegistryObjectList> 

            </urn2:SubmitObjectsRequest>
            <!--1 or more repetitions:-->
            <urn5:Document id="Document01">UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</urn5:Document>
         </urn:ProvideAndRegisterDocumentSetRequest>
      </urn:RespondingGateway_ProvideAndRegisterDocumentSetRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns11='urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0';
//ns11:RegistryResponse[1]/ns11:RegistryErrorList[1]/ns11:RegistryError[1]/@errorCode</path>
								<content>XDSMissingDocument</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:wsaConfig action="tns:ProvideAndRegisterDocumentSet-b" mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="nhincXDRMock" type="mockresponse">
				<con:settings/>
				<con:config startStep="EntiityRequestMsg - XDR" xsi:type="con:MockResponseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:interface>DocumentRepositoryXDR_Binding</con:interface>
					<con:operation>DocumentRepository_ProvideAndRegisterDocumentSet-b</con:operation>
					<con:path>/mockXDR</con:path>
					<con:port>11230</con:port>
					<con:timeout>30000</con:timeout>
					<con:response encoding="" outgoingWss="WSOUTSAML">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.mock.WsdlMockResponse@encode_attachments">true</con:setting>
							<con:setting id="WsdlSettings@enable-mtom">false</con:setting>
							<con:setting id="com.eviware.soapui.impl.wsdl.mock.WsdlMockResponse@force_mtom">false</con:setting>
						</con:settings>
						<con:responseContent><![CDATA[
							<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsse11="http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd">
   <S:Header>
      <To xmlns="http://www.w3.org/2005/08/addressing">http://www.w3.org/2005/08/addressing/anonymous</To>
      <Action xmlns="http://www.w3.org/2005/08/addressing">urn:ihe:iti:xdr:2007:ProvideAndRegisterDocumentSet-bResponse</Action>
      <MessageID xmlns="http://www.w3.org/2005/08/addressing">uuid:6fff9294-3737-4c66-a627-cc6dd5863c42</MessageID>
      <RelatesTo xmlns="http://www.w3.org/2005/08/addressing">a13eafb9-ec9e-46cd-9e92-9a19be79b9e8</RelatesTo>
   </S:Header>
   <S:Body>
      <ns4:RegistryResponse status="urn:oasis:names:tc:ebxml-regrep:ResponseStatusType:Success" xmlns:ns2="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:ns3="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:ns4="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:ns5="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:ns6="urn:ihe:iti:xds-b:2007" xmlns:ns7="urn:gov:hhs:fha:nhinc:gateway:samltokendata"/>
   </S:Body>
</S:Envelope>]]></con:responseContent>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
					</con:response>
				</con:config>
			</con:testStep>
			<con:testStep name="Restore Configurations" type="groovy">
				<con:settings/>
				<con:config>
					<script>FileUtils.InitializeNHINCProperties(context, log);</script>
				</con:config>
			</con:testStep>
			<con:properties>
				<con:property>
					<con:name>startDate</con:name>
					<con:value>2010-09-02T18:34:08Z</con:value>
				</con:property>
				<con:property>
					<con:name>endDate</con:name>
					<con:value>2010-09-02T18:44:08Z</con:value>
				</con:property>
				<con:property>
					<con:name>sigDate</con:name>
					<con:value>09/02/2010 18:34:08</con:value>
				</con:property>
				<con:property>
					<con:name>expireDate</con:name>
					<con:value>2010-10-02T00:00:00Z</con:value>
				</con:property>
			</con:properties>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="7ab026d6-4438-498b-af6c-4e08d85df3b6" keepSession="false" maxResults="0" name="Success message from mock NHINC" searchProperties="true" disabled="true">
			<con:settings/>
			<con:testStep name="Modify InternalConnectionInfo For NHINC Mock" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

//def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");
def mockHost = context.findProperty("mockHost");
def XDRServiceURL = "https://" + NHINGatewayHost + ":8181/CONNECTNhinServicesWeb/DocumentRepositoryXDR_Service";
def mockXDRURL = "http://" + mockHost + ":11230/mockXDR";
def LocalHCID = context.findProperty( "LocalHCID" );
def RemoteHCID = context.findProperty( "RemoteHCID" );

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "serviceXDR", XDRServiceURL, context, log)
FileUtils.CreateOrUpdateConnection(destConfigFileLocation, LocalHCID, "mockxdr", mockXDRURL, context, log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="EntiityRequestMsg - XDR" type="request">
				<con:settings/>
				<con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:interface>EntityXDR_Binding</con:interface>
					<con:operation>ProvideAndRegisterDocumentSet-b</con:operation>
					<con:request incomingWss="" name="EntiityRequestMsg - XDR" outgoingWss="" wssPasswordType="">
						<con:settings>
							<con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
						</con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-XDREntity}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonentity" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:add="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:urn2="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:urn3="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:urn4="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:urn5="urn:ihe:iti:xds-b:2007">
   <soapenv:Header/>
   <soapenv:Body projectName="EntityXDRTests" testCase="Success message from mock NHINC">
      <urn:RespondingGateway_ProvideAndRegisterDocumentSetRequest>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Joe</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <!--urn1:claimFormRef>claimFormRef</urn1:claimFormRef-->
            <!--Optional:-->
            <!--urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw-->
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>

         <urn:nhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>Test HCID2</urn1:description>
                  <urn1:homeCommunityId>2.2</urn1:homeCommunityId>
                  <urn1:name>Test HCID2</urn1:name>
               </urn1:homeCommunity>
            </urn1:nhinTargetCommunity>
         </urn:nhinTargetCommunities>

         <urn:ProvideAndRegisterDocumentSetRequest>
            <urn2:SubmitObjectsRequest id="123" comment="comme">
               <!--Optional:-->
  
               <urn4:RegistryObjectList>
                  <urn4:ExtrinsicObject id="Document01" mimeType="text/xml" objectType="urn:uuid:7edca82f-054d-47f2-a032-9b2a5b5186c1">
                     <urn4:Slot name="creationTime">
                        <urn4:ValueList>
                           <urn4:Value>20051224</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="languageCode">
                        <urn4:ValueList>
                           <urn4:Value>en-us</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="serviceStartTime">
                        <urn4:ValueList>
                           <urn4:Value>200412230800</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="serviceStopTime">
                        <urn4:ValueList>
                           <urn4:Value>200412230801</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="sourcePatientId">
                        <urn4:ValueList>
                           <urn4:Value>ST-1000^^^&amp;1.3.6.1.4.1.21367.2003.3.9&amp;ISO</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="sourcePatientInfo">
                        <urn4:ValueList>
                           <urn4:Value>PID-3|ST-1000^^^&amp;1.3.6.1.4.1.21367.2003.3.9&amp;ISO</urn4:Value>
                           <urn4:Value>PID-5|Doe^John^^^</urn4:Value>
                           <urn4:Value>PID-7|19560527</urn4:Value>
                           <urn4:Value>PID-8|M</urn4:Value>
                           <urn4:Value>PID-11|100 Main St^^Metropolis^Il^44130^USA</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Name>
                        <urn4:LocalizedString value="Physical"/>
                     </urn4:Name>
                     <urn4:Description/>
                     <urn4:Classification id="cl01" classificationScheme="urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d" classifiedObject="Document01">
                        <urn4:Slot name="authorPerson">
                           <urn4:ValueList>
                              <urn4:Value>Gerald Smitty</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorInstitution">
                           <urn4:ValueList>
                              <urn4:Value>Cleveland Clinic</urn4:Value>
                              <urn4:Value>Parma Community</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorRole">
                           <urn4:ValueList>
                              <urn4:Value>Attending</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorSpecialty">
                           <urn4:ValueList>
                              <urn4:Value>Orthopedic</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                     </urn4:Classification>
                     <urn4:Classification id="cl02" classificationScheme="urn:uuid:41a5887f-8865-4c09-adf7-e362475b143a" classifiedObject="Document01" nodeRepresentation="History and Physical">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon classCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="History and Physical"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl03" classificationScheme="urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f" classifiedObject="Document01" nodeRepresentation="1.3.6.1.4.1.21367.2006.7.101">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon confidentialityCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="Clinical-Staff"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl04" classificationScheme="urn:uuid:a09d5840-386c-46f2-b5ad-9c3699a4309d" classifiedObject="Document01" nodeRepresentation="CDAR2/IHE 1.0">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon formatCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="CDAR2/IHE 1.0"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl05" classificationScheme="urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1" classifiedObject="Document01" nodeRepresentation="Outpatient">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon healthcareFacilityTypeCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="Outpatient"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl06" classificationScheme="urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead" classifiedObject="Document01" nodeRepresentation="General Medicine">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon practiceSettingCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="General Medicine"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl07" classificationScheme="urn:uuid:f0306f51-975f-434e-a61c-c59651d33983" classifiedObject="Document01" nodeRepresentation="34108-1">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>LOINC</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="Outpatient Evaluation And Management"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:ExternalIdentifier id="ei01" registryObject="Document01" identificationScheme="urn:uuid:58a6f841-87b3-4a3e-92fd-a8ffeff98427" value="SELF-5^^^&amp;1.3.6.1.4.1.21367.2005.3.7&amp;ISO">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSDocumentEntry.patientId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                     <urn4:ExternalIdentifier id="ei02" registryObject="Document01" identificationScheme="urn:uuid:2e82c1f6-a085-4c72-9da3-8640a32e42ab" value="1.3.6.1.4.1.21367.2005.3.9999.32">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSDocumentEntry.uniqueId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                  </urn4:ExtrinsicObject>
                  <urn4:RegistryPackage id="SubmissionSet01">
                     <urn4:Slot name="submissionTime">
                        <urn4:ValueList>
                           <urn4:Value>20041225235050</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Name>
                        <urn4:LocalizedString value="Physical"/>
                     </urn4:Name>
                     <urn4:Description>
                        <urn4:LocalizedString value="Annual physical"/>
                     </urn4:Description>
                     <urn4:Classification id="cl08" classificationScheme="urn:uuid:a7058bb9-b4e4-4307-ba5b-e3f0ab85e12d" classifiedObject="SubmissionSet01">
                        <urn4:Slot name="authorPerson">
                           <urn4:ValueList>
                              <urn4:Value>Sherry Dopplemeyer</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorInstitution">
                           <urn4:ValueList>
                              <urn4:Value>Cleveland Clinic</urn4:Value>
                              <urn4:Value>Berea Community</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorRole">
                           <urn4:ValueList>
                              <urn4:Value>Purn4ary Surgon</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorSpecialty">
                           <urn4:ValueList>
                              <urn4:Value>Orthopedic</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                     </urn4:Classification>
                     <urn4:Classification id="cl09" classificationScheme="urn:uuid:aa543740-bdda-424e-8c96-df4873be8500" classifiedObject="SubmissionSet01" nodeRepresentation="History and Physical">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon contentTypeCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="History and Physical"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:ExternalIdentifier id="ei03" registryObject="SubmissionSet01" identificationScheme="urn:uuid:96fdda7c-d067-4183-912e-bf5ee74998a8" value="1.3.6.1.4.1.21367.2005.3.9999.33">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSSubmissionSet.uniqueId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                     <urn4:ExternalIdentifier id="ei04" registryObject="SubmissionSet01" identificationScheme="urn:uuid:554ac39e-e3fe-47fe-b233-965d2a147832" value="3670984664">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSSubmissionSet.sourceId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                     <urn4:ExternalIdentifier id="ei05" registryObject="SubmissionSet01" identificationScheme="urn:uuid:6b5aea1a-874d-4603-a4bc-96a0a7b38446" value="SELF-5^^^&amp;1.3.6.1.4.1.21367.2005.3.7&amp;ISO">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSSubmissionSet.patientId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                  </urn4:RegistryPackage>
                  <urn4:Classification id="cl10" classifiedObject="SubmissionSet01" classificationNode="urn:uuid:a54d6aa5-d40d-43f9-88c5-b4633d873bdd"/>
                  <urn4:Association id="as01" associationType="HasMember" sourceObject="SubmissionSet01" targetObject="Document01">
                     <urn4:Slot name="SubmissionSetStatus">
                        <urn4:ValueList>
                           <urn4:Value>Original</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                  </urn4:Association>
               </urn4:RegistryObjectList> 

            </urn2:SubmitObjectsRequest>
            <!--1 or more repetitions:-->
            <urn5:Document id="Document01">UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</urn5:Document>
         </urn:ProvideAndRegisterDocumentSetRequest>
      </urn:RespondingGateway_ProvideAndRegisterDocumentSetRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns11='urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0';
//ns11:RegistryResponse[1]/@status</path>
								<content>urn:oasis:names:tc:ebxml-regrep:ResponseStatusType:Success</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:wsaConfig action="tns:ProvideAndRegisterDocumentSet-b" mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="nhincXDRMock" type="mockresponse">
				<con:settings/>
				<con:config startStep="EntiityRequestMsg - XDR" xsi:type="con:MockResponseStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:interface>ProxyXDR_Binding</con:interface>
					<con:operation>ProvideAndRegisterDocumentSet-b</con:operation>
					<con:path>/mockXDR</con:path>
					<con:port>11230</con:port>
					<con:timeout>30000</con:timeout>
					<con:response>
						<con:settings/>
						<con:responseContent>&lt;S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   &lt;S:Body>
      &lt;ns14:RegistryResponse status="urn:oasis:names:tc:ebxml-regrep:ResponseStatusType:Success" xmlns:ns2="urn:gov:hhs:fha:nhinc:common:subscription" xmlns:ns3="http://www.w3.org/2005/08/addressing" xmlns:ns4="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:ns5="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns6="http://docs.oasis-open.org/wsn/b-2" xmlns:ns7="http://docs.oasis-open.org/wsrf/bf-2" xmlns:ns8="http://docs.oasis-open.org/wsn/t-1" xmlns:ns9="urn:ihe:iti:xds-b:2007" xmlns:ns10="urn:gov:hhs:fha:nhinc:common:subscriptionb2overridefordocuments" xmlns:ns11="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns12="http://nhinc.services.com/schema/auditmessage" xmlns:ns13="urn:gov:hhs:fha:nhinc:gateway:samltokendata" xmlns:ns14="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:ns15="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:ns16="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:ns17="http://www.hhs.gov/healthit/nhin/cdc" xmlns:ns18="urn:gov:hhs:fha:nhinc:common:subscriptionb2overrideforcdc" xmlns:ns19="urn:gov:hhs:fha:nhinc:common:nhinccommonentity"/>
   &lt;/S:Body>
&lt;/S:Envelope></con:responseContent>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
					</con:response>
				</con:config>
			</con:testStep>
			<con:testStep name="Restore Configurations" type="groovy">
				<con:settings/>
				<con:config>
					<script>FileUtils.InitializeNHINCProperties(context, log);</script>
				</con:config>
			</con:testStep>
			<con:properties>
				<con:property>
					<con:name>startDate</con:name>
					<con:value>2012-12-16T17:02:05Z</con:value>
				</con:property>
				<con:property>
					<con:name>endDate</con:name>
					<con:value>2012-12-16T17:12:05Z</con:value>
				</con:property>
				<con:property>
					<con:name>sigDate</con:name>
					<con:value>12/16/2012 17:02:05</con:value>
				</con:property>
				<con:property>
					<con:name>expireDate</con:name>
					<con:value>2013-01-15T00:00:00Z</con:value>
				</con:property>
			</con:properties>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="a83d4d4f-cf93-41e9-abf8-19e76d2bccf0" keepSession="false" maxResults="0" name="Audit Log Check" searchProperties="true">
			<con:settings/>
			<con:testStep name="clear audit table" type="groovy"><con:settings/><con:config><script>context.withSql('AuditDB') { sql -> 
  sql.execute('delete from ' + context.findProperty('AuditTable'))
}</script></con:config></con:testStep><con:testStep name="Generate patient ID for Audit Log Query" type="groovy">
				<con:settings/>
				<con:config>
					<script>def localAA = context.findProperty('LocalAA')
def PatientID = context.findProperty('PatientId')

context.testCase.setPropertyValue('FullPatientID', "${PatientID}^^^&amp;amp;${localAA}&amp;amp;ISO");</script>
				</con:config>
			</con:testStep>
			<con:testStep name="get User ID" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def UserID = context.findProperty( "UserID" );

def nowDate = new Date();
context.testCase.setPropertyValue('XDRUserId',"${UserID}${nowDate}");</script>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityRequestMsg - XDR" type="request">
				<con:settings/>
				<con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
					<con:interface>EntityXDR_Binding</con:interface>
					<con:operation>ProvideAndRegisterDocumentSet-b</con:operation>
					<con:request incomingWss="" name="EntityRequestMsg - XDR" outgoingWss="" wssPasswordType="">
						<con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-XDREntity}</con:endpoint>
						<con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonentity" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:add="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:urn2="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:urn3="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:urn4="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:urn5="urn:ihe:iti:xds-b:2007">
   <soapenv:Header/>
   <soapenv:Body projectName="EntityXDRTests" testCase="Audit Log Check">
      <urn:RespondingGateway_ProvideAndRegisterDocumentSetRequest>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Joe</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>${#TestCase#XDRUserId}</urn1:userName>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <!--urn1:claimFormRef>claimFormRef</urn1:claimFormRef-->
            <!--Optional:-->
            <!--urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw-->
            <!--Optional:-->
            <!--urn1:samlAuthnStatement>
               
               <urn1:authInstant>authInstant</urn1:authInstant>
              
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
             
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
              
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement-->
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
					<urn1:decision>Permit</urn1:decision>
					<urn1:resource>https://158.147.185.168:8181/SamlReceiveService/SamlProcessWS</urn1:resource>
					<urn1:action>TestSaml</urn1:action>
					<urn1:evidence>
						<urn1:assertion>
							<urn1:id>40df7c0a-ff3e-4b26-baeb-f2910f6d05a9</urn1:id>
							<urn1:issueInstant>2009-04-16T13:10:39.093Z</urn1:issueInstant>
							<urn1:version>2.0</urn1:version>
							<urn1:issuerFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</urn1:issuerFormat>
							<urn1:issuer>CN=SAML User,OU=Harris,O=HITS,L=Melbourne,ST=FL,C=US</urn1:issuer>
							<urn1:conditions>
								<urn1:notBefore>2009-04-16T13:10:39.093Z</urn1:notBefore>
								<urn1:notOnOrAfter>2009-12-31T12:00:00.000Z</urn1:notOnOrAfter>
							</urn1:conditions>
							<urn1:accessConsentPolicy>Claim-Ref-1234</urn1:accessConsentPolicy>
							<urn1:instanceAccessConsentPolicy>Claim-Instance-1</urn1:instanceAccessConsentPolicy>
						</urn1:assertion>
					</urn1:evidence>
				</urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
         <urn:nhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>Test HCID2</urn1:description>
                  <urn1:homeCommunityId>2.2</urn1:homeCommunityId>
                  <urn1:name>Test HCID2</urn1:name>
               </urn1:homeCommunity>
            </urn1:nhinTargetCommunity>
         </urn:nhinTargetCommunities>
         <urn:ProvideAndRegisterDocumentSetRequest>
            <urn2:SubmitObjectsRequest id="123" comment="comme">
               <!--Optional:-->
               <urn4:RegistryObjectList>
                  <urn4:ExtrinsicObject id="Document01" mimeType="text/xml" objectType="urn:uuid:7edca82f-054d-47f2-a032-9b2a5b5186c1">
                     <urn4:Slot name="creationTime">
                        <urn4:ValueList>
                           <urn4:Value>20051224</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="languageCode">
                        <urn4:ValueList>
                           <urn4:Value>en-us</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="serviceStartTime">
                        <urn4:ValueList>
                           <urn4:Value>200412230800</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="serviceStopTime">
                        <urn4:ValueList>
                           <urn4:Value>200412230801</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="sourcePatientId">
                        <urn4:ValueList>
                           <urn4:Value>ST-1000^^^&amp;1.3.6.1.4.1.21367.2003.3.9&amp;ISO</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Slot name="sourcePatientInfo">
                        <urn4:ValueList>
                           <urn4:Value>PID-3|ST-1000^^^&amp;1.3.6.1.4.1.21367.2003.3.9&amp;ISO</urn4:Value>
                           <urn4:Value>PID-5|Doe^John^^^</urn4:Value>
                           <urn4:Value>PID-7|19560527</urn4:Value>
                           <urn4:Value>PID-8|M</urn4:Value>
                           <urn4:Value>PID-11|100 Main St^^Metropolis^Il^44130^USA</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Name>
                        <urn4:LocalizedString value="Physical"/>
                     </urn4:Name>
                     <urn4:Description/>
                     <urn4:Classification id="cl01" classificationScheme="urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d" classifiedObject="Document01">
                        <urn4:Slot name="authorPerson">
                           <urn4:ValueList>
                              <urn4:Value>Gerald Smitty</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorInstitution">
                           <urn4:ValueList>
                              <urn4:Value>Cleveland Clinic</urn4:Value>
                              <urn4:Value>Parma Community</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorRole">
                           <urn4:ValueList>
                              <urn4:Value>Attending</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorSpecialty">
                           <urn4:ValueList>
                              <urn4:Value>Orthopedic</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                     </urn4:Classification>
                     <urn4:Classification id="cl02" classificationScheme="urn:uuid:41a5887f-8865-4c09-adf7-e362475b143a" classifiedObject="Document01" nodeRepresentation="History and Physical">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon classCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="History and Physical"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl03" classificationScheme="urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f" classifiedObject="Document01" nodeRepresentation="1.3.6.1.4.1.21367.2006.7.101">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon confidentialityCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="Clinical-Staff"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl04" classificationScheme="urn:uuid:a09d5840-386c-46f2-b5ad-9c3699a4309d" classifiedObject="Document01" nodeRepresentation="CDAR2/IHE 1.0">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon formatCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="CDAR2/IHE 1.0"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl05" classificationScheme="urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1" classifiedObject="Document01" nodeRepresentation="Outpatient">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon healthcareFacilityTypeCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="Outpatient"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl06" classificationScheme="urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead" classifiedObject="Document01" nodeRepresentation="General Medicine">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon practiceSettingCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="General Medicine"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:Classification id="cl07" classificationScheme="urn:uuid:f0306f51-975f-434e-a61c-c59651d33983" classifiedObject="Document01" nodeRepresentation="34108-1">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>LOINC</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="Outpatient Evaluation And Management"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:ExternalIdentifier id="ei01" registryObject="Document01" identificationScheme="urn:uuid:58a6f841-87b3-4a3e-92fd-a8ffeff98427" value="SELF-5^^^&amp;1.3.6.1.4.1.21367.2005.3.7&amp;ISO">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSDocumentEntry.patientId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                     <urn4:ExternalIdentifier id="ei02" registryObject="Document01" identificationScheme="urn:uuid:2e82c1f6-a085-4c72-9da3-8640a32e42ab" value="1.3.6.1.4.1.21367.2005.3.9999.32">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSDocumentEntry.uniqueId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                  </urn4:ExtrinsicObject>
                  <urn4:RegistryPackage id="SubmissionSet01">
                     <urn4:Slot name="submissionTime">
                        <urn4:ValueList>
                           <urn4:Value>20041225235050</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                     <urn4:Name>
                        <urn4:LocalizedString value="Physical"/>
                     </urn4:Name>
                     <urn4:Description>
                        <urn4:LocalizedString value="Annual physical"/>
                     </urn4:Description>
                     <urn4:Classification id="cl08" classificationScheme="urn:uuid:a7058bb9-b4e4-4307-ba5b-e3f0ab85e12d" classifiedObject="SubmissionSet01">
                        <urn4:Slot name="authorPerson">
                           <urn4:ValueList>
                              <urn4:Value>Sherry Dopplemeyer</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorInstitution">
                           <urn4:ValueList>
                              <urn4:Value>Cleveland Clinic</urn4:Value>
                              <urn4:Value>Berea Community</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorRole">
                           <urn4:ValueList>
                              <urn4:Value>Purn4ary Surgon</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Slot name="authorSpecialty">
                           <urn4:ValueList>
                              <urn4:Value>Orthopedic</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                     </urn4:Classification>
                     <urn4:Classification id="cl09" classificationScheme="urn:uuid:aa543740-bdda-424e-8c96-df4873be8500" classifiedObject="SubmissionSet01" nodeRepresentation="History and Physical">
                        <urn4:Slot name="codingScheme">
                           <urn4:ValueList>
                              <urn4:Value>Connect-a-thon contentTypeCodes</urn4:Value>
                           </urn4:ValueList>
                        </urn4:Slot>
                        <urn4:Name>
                           <urn4:LocalizedString value="History and Physical"/>
                        </urn4:Name>
                     </urn4:Classification>
                     <urn4:ExternalIdentifier id="ei03" registryObject="SubmissionSet01" identificationScheme="urn:uuid:96fdda7c-d067-4183-912e-bf5ee74998a8" value="1.3.6.1.4.1.21367.2005.3.9999.33">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSSubmissionSet.uniqueId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                     <urn4:ExternalIdentifier id="ei04" registryObject="SubmissionSet01" identificationScheme="urn:uuid:554ac39e-e3fe-47fe-b233-965d2a147832" value="3670984664">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSSubmissionSet.sourceId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                     <urn4:ExternalIdentifier id="ei05" registryObject="SubmissionSet01" identificationScheme="urn:uuid:6b5aea1a-874d-4603-a4bc-96a0a7b38446" value="${#TestCase#FullPatientID}">
                        <urn4:Name>
                           <urn4:LocalizedString value="XDSSubmissionSet.patientId"/>
                        </urn4:Name>
                     </urn4:ExternalIdentifier>
                  </urn4:RegistryPackage>
                  <urn4:Classification id="cl10" classifiedObject="SubmissionSet01" classificationNode="urn:uuid:a54d6aa5-d40d-43f9-88c5-b4633d873bdd"/>
                  <urn4:Association id="as01" associationType="HasMember" sourceObject="SubmissionSet01" targetObject="Document01">
                     <urn4:Slot name="SubmissionSetStatus">
                        <urn4:ValueList>
                           <urn4:Value>Original</urn4:Value>
                        </urn4:ValueList>
                     </urn4:Slot>
                  </urn4:Association>
               </urn4:RegistryObjectList>
            </urn2:SubmitObjectsRequest>
            <!--1 or more repetitions:-->
            <urn5:Document id="Document01">UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</urn5:Document>
         </urn:ProvideAndRegisterDocumentSetRequest>
      </urn:RespondingGateway_ProvideAndRegisterDocumentSetRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
						<con:jmsPropertyConfig/>
						<con:wsaConfig action="tns:ProvideAndRegisterDocumentSet-b" mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep><con:testStep name="verify audit events" type="groovy"><con:settings/><con:config><script>def count = context.withSql('AuditDB') { sql -> 
	sql.firstRow('select count(*) from ' + context.findProperty('AuditTable')).'count(*)'
}
//log.info "Count: " + count;
assert (count > 0);</script></con:config></con:testStep>
			
			<con:setupScript>nhinc.FileUtils.backupConfiguration(context.findProperty("GatewayPropDir"), log);</con:setupScript><con:properties>
				<con:property>
					<con:name>startDate</con:name>
					<con:value>2013-01-08T19:09:36Z</con:value>
				</con:property>
				<con:property>
					<con:name>endDate</con:name>
					<con:value>2013-01-08T19:19:36Z</con:value>
				</con:property>
				<con:property>
					<con:name>sigDate</con:name>
					<con:value>01/08/2013 19:09:36</con:value>
				</con:property>
				<con:property>
					<con:name>expireDate</con:name>
					<con:value>2013-02-07T00:00:00Z</con:value>
				</con:property>
				<con:property>
					<con:name>FullPatientID</con:name>
					<con:value>XDR1^^^&amp;amp;1.1&amp;amp;ISO</con:value>
				</con:property>
				<con:property>
					<con:name>XDRUserId</con:name>
					<con:value>XDR Inbound UserTue Jan 08 19:14:36 UTC 2013</con:value>
				</con:property>
			</con:properties>
			<con:reportParameters/>
			<con:tearDownScript>nhinc.FileUtils.restoreConfiguration(context.findProperty("GatewayPropDir"), log);</con:tearDownScript>
		</con:testCase>
		<con:properties/>
		<con:reportParameters/>
	</con:testSuite>
	<con:requirements/>
	<con:properties>
		<con:property>
			<con:name>DBPort</con:name>
			<con:value>3306</con:value>
		</con:property>
		<con:property>
			<con:name>RemoteHCDescription</con:name>
			<con:value>InternalTest2</con:value>
		</con:property>
		<con:property>
			<con:name>DQDocID</con:name>
			<con:value>1.123401.11111</con:value>
		</con:property>
		<con:property>
			<con:name>NHINGatewayConfigDir</con:name>
			<con:value>C:/Sun/AppServer/domains/domain1/config/nhin</con:value>
		</con:property>
		<con:property>
			<con:name>DQPatientID</con:name>
			<con:value>D123401</con:value>
		</con:property>
		<con:property>
			<con:name>RemoteHCID</con:name>
			<con:value>2.2</con:value>
		</con:property>
		<con:property>
			<con:name>NHINGatewayHost</con:name>
			<con:value>localhost</con:value>
		</con:property>
		<con:property>
			<con:name>RemoteAA</con:name>
			<con:value>2.2</con:value>
		</con:property>
		<con:property>
			<con:name>DBHost</con:name>
			<con:value>localhost</con:value>
		</con:property>
		<con:property>
			<con:name>LocalHCID</con:name>
			<con:value>1.1</con:value>
		</con:property>
		<con:property>
			<con:name>LocalAA</con:name>
			<con:value>1.1</con:value>
		</con:property>
		<con:property>
			<con:name>Endpoint-XDRProxy</con:name>
			<con:value>http://localhost:8080/CONNECTAdapter/ProxyXDR_Service</con:value>
		</con:property>
		<con:property>
			<con:name>LocalPatientID</con:name>
			<con:value>D123401</con:value>
		</con:property>
		<con:property>
			<con:name>RemotePatientID</con:name>
			<con:value>D123401</con:value>
		</con:property>
		<con:property>
			<con:name>MPIDir</con:name>
			<con:value>C:/Sun/AppServer/domains/domain1/config</con:value>
		</con:property>
		<con:property>
			<con:name>LocalHCDescription</con:name>
			<con:value>InternalTest1</con:value>
		</con:property>
		<con:property>
			<con:name>IncorrectPatientId</con:name>
			<con:value>D1111</con:value>
		</con:property>
		<con:property>
			<con:name>DBUser</con:name>
			<con:value>nhincuser</con:value>
		</con:property>
		<con:property>
			<con:name>DBPass</con:name>
			<con:value>nhincpass</con:value>
		</con:property>
		<con:property>
			<con:name>MockHost</con:name>
			<con:value>localhost</con:value>
		</con:property>
		<con:property>
			<con:name>Endpoint-XDREntity</con:name>
			<con:value>http://localhost:8080/Gateway/DocumentSubmission/1_1/EntityService/EntityDocSubmissionUnsecured</con:value>
		</con:property>
		<con:property>
			<con:name>Endpoint-AuditLogQuery</con:name>
			<con:value>http://localhost:8080/CONNECTAdapter/EntityAuditQuery</con:value>
		</con:property>
		<con:property>
			<con:name>UserID</con:name>
			<con:value>XDR Inbound User</con:value>
		</con:property>
		<con:property>
			<con:name>PatientId</con:name>
			<con:value>XDR1</con:value>
		</con:property>
	<con:property><con:name>AuditTable</con:name><con:value>auditrepository</con:value></con:property><con:property><con:name>AuditDB</con:name><con:value>auditrepo</con:value></con:property><con:property><con:name>GatewayPropDir</con:name><con:value>c:\glassfish3\glassfish\domains\domain1\config\nhin</con:value></con:property></con:properties>
	<con:afterLoadScript>def propertiesFile = new File(new File(project.path).parent, 'EntityXDRTests-soapui-project.properties')
if (propertiesFile.exists()) {
	def props = new Properties()
	props.load(new FileReader(propertiesFile))
	props.each { key, value ->
	    project.setPropertyValue(key, value)
	}
}


TimeZone.setDefault(TimeZone.getTimeZone("UTC"))
def testRunListener = [
  afterRun: { testRunner, runContext -> },
  afterStep: { testRunner, runContext, result -> },
  beforeStep: { testRunner, runContext -> },
  beforeStep: { testRunner, runContext, testStep -> },
  beforeRun: { testRunner, runContext -> 
    use (org.codehaus.groovy.runtime.TimeCategory) {
      def startDate = 5.minutes.ago
      def endDate = 5.minutes.from.now
      def expireDate = 30.days.from.now

      def df = "yyyy-MM-dd'T'HH:mm:ss'Z'"
      def dfSig = "MM/dd/yyyy' 'HH:mm:ss"

      runContext.testCase.setPropertyValue("startDate", startDate.format(df))
      runContext.testCase.setPropertyValue("endDate", endDate.format(df))
      runContext.testCase.setPropertyValue("sigDate", startDate.format(dfSig))
      runContext.testCase.setPropertyValue("expireDate", expireDate.format(df))
    }
  }   
] as com.eviware.soapui.model.testsuite.TestRunListener

project.testSuiteList*.testCaseList.flatten()*.addTestRunListener(testRunListener)



com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.findProperty = { propertyName ->
    return delegate.getProperty(propertyName) ?:
                delegate.testCase.getPropertyValue(propertyName) ?:
                delegate.testCase.testSuite.getPropertyValue(propertyName) ?:
                delegate.testCase.testSuite.project.getPropertyValue(propertyName)
}

com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.withSql = { dbOrPropertyName, block ->
  def dbName = delegate.findProperty(dbOrPropertyName) ?: dbOrPropertyName
  def host = delegate.findProperty('DBHost')
  def port = delegate.findProperty('DBPort')
  def user = delegate.findProperty('DBUser')
  def pass = delegate.findProperty('DBPass')

  def connectString = "jdbc:mysql://${host}:${port}/${dbName}"
  def sql = groovy.sql.Sql.newInstance(connectString, user, pass, "com.mysql.jdbc.Driver");
  try {
     block(sql)
  } finally {
    sql.close()
  }
}</con:afterLoadScript>
	<con:wssContainer>
		<con:outgoing>
			<con:name>WSOUTSAML</con:name>
			<con:entry type="Timestamp">
				<con:configuration>
					<timeToLive>300</timeToLive>
					<strictTimestamp>true</strictTimestamp>
				</con:configuration>
			</con:entry>
		</con:outgoing>
	</con:wssContainer>
	<con:databaseConnectionContainer/>
	<con:reporting>
		<con:reportTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:parameters/>
	</con:reporting>

<con:sensitiveInformation/></con:soapui-project>