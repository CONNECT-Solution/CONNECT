<?xml version="1.0" encoding="UTF-8" standalone="no"?><con:soapui-project xmlns:con="http://eviware.com/soapui/config" abortOnError="false" name="EntityRespondingPDAsyncReqQueueTests" resourceRoot="" runType="SEQUENTIAL" soapui-version="3.5.1">
  <con:settings/>
  <con:interface xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" anonymous="optional" bindingName="{urn:gov:hhs:fha:nhinc:entitypatientdiscoveryasyncresp}EntityPatientDiscoveryAsyncRespBindingSoap" definition="WSDL path not set.  #EntityPatientDiscoveryAsyncResp.wsdl" name="EntityPatientDiscoveryAsyncRespBindingSoap" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface">
    <con:settings/>
    
    <con:endpoints>
      <con:endpoint>http://localhost/NhinConnect/EntityPatientDiscoveryAsyncResp</con:endpoint>
      <con:endpoint>http://localhost:8080/CONNECTGateway/EntityService/EntityPatientDiscoveryDeferredResponseUnsecured</con:endpoint>
      <con:endpoint>${#Project#Endpoint-PDAsyncEntityResp}</con:endpoint>
    </con:endpoints>
    <con:operation action="urn:ProcessPatientDiscoveryAsyncResp" anonymous="optional" bindingOperationName="ProcessPatientDiscoveryAsyncResp" inputName="ProcessPatientDiscoveryAsyncRespAsyncRequest" isOneWay="false" name="ProcessPatientDiscoveryAsyncResp" outputName="ProcessPatientDiscoveryAsyncRespAsyncResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
    </con:operation>
  </con:interface>
  <con:interface xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" anonymous="optional" bindingName="{urn:gov:hhs:fha:nhinc:entitypatientdiscoveryasyncreqqueue}EntityPatientDiscoveryAsyncReqQueueBindingSoap" definition="WSDL path not set.  #EntityPatientDiscoveryAsyncReqQueue.wsdl" name="EntityPatientDiscoveryAsyncReqQueueBindingSoap" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface">
    <con:settings/>
    
    <con:endpoints>
      <con:endpoint>http://localhost/NhinConnect/EntityPatientDiscoveryAsyncReqQueue</con:endpoint>
      <con:endpoint>${#Project#Endpoint-PDAsyncEntityReqQueue}</con:endpoint>
    </con:endpoints>
    <con:operation action="urn:AddPatientDiscoveryAsyncReq" anonymous="optional" bindingOperationName="AddPatientDiscoveryAsyncReq" inputName="AddPatientDiscoveryAsyncReqAsyncRequest" isOneWay="false" name="AddPatientDiscoveryAsyncReq" outputName="AddPatientDiscoveryAsyncReqAsyncResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
    </con:operation>
  </con:interface>
  <con:interface xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" anonymous="optional" bindingName="{urn:gov:hhs:fha:nhinc:adapterpolicyengine}AdapterPolicyEngineBindingSoap" definition="WSDL path not set.  #AdapterPolicyEngine.wsdl" name="AdapterPolicyEngineBindingSoap" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface">
    <con:settings/>
    
    <con:endpoints>
      <con:endpoint>http://localhost:${HttpDefaultPort}/NhinConnect/AdapterPolicyEngine</con:endpoint>
    </con:endpoints>
    <con:operation action="urn:CheckPolicy" anonymous="optional" bindingOperationName="CheckPolicy" inputName="CheckPolicyRequest" isOneWay="false" name="CheckPolicy" outputName="CheckPolicyResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
      <con:call name="Request 1">
        <con:settings/>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://localhost:${HttpDefaultPort}/NhinConnect/AdapterPolicyEngine</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:urn2="urn:oasis:names:tc:xacml:2.0:context:schema:os">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:CheckPolicyRequest>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:addressType>
               <urn1:city>?</urn1:city>
               <urn1:country>?</urn1:country>
               <urn1:state>?</urn1:state>
               <urn1:streetAddress>?</urn1:streetAddress>
               <urn1:zipCode>?</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>?</urn1:dateOfBirth>
            <urn1:dateOfSignature>?</urn1:dateOfSignature>
            <urn1:expirationDate>?</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>?</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>?</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>?</urn1:haveSignature>
            <urn1:haveWitnessSignature>?</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>?</urn1:description>
               <urn1:homeCommunityId>?</urn1:homeCommunityId>
               <urn1:name>?</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>?</urn1:familyName>
               <urn1:givenName>?</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:nameType>
               <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>?</urn1:areaCode>
               <urn1:countryCode>?</urn1:countryCode>
               <urn1:extension>?</urn1:extension>
               <urn1:localNumber>?</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:purposeOfDisclosure>?</urn1:purposeOfDisclosure>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:addressType>
               <urn1:city>?</urn1:city>
               <urn1:country>?</urn1:country>
               <urn1:state>?</urn1:state>
               <urn1:streetAddress>?</urn1:streetAddress>
               <urn1:zipCode>?</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>?</urn1:familyName>
               <urn1:givenName>?</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:nameType>
               <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>?</urn1:areaCode>
               <urn1:countryCode>?</urn1:countryCode>
               <urn1:extension>?</urn1:extension>
               <urn1:localNumber>?</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>?</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>?</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:addressType>
               <urn1:city>?</urn1:city>
               <urn1:country>?</urn1:country>
               <urn1:state>?</urn1:state>
               <urn1:streetAddress>?</urn1:streetAddress>
               <urn1:zipCode>?</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>?</urn1:familyName>
               <urn1:givenName>?</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:nameType>
               <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>?</urn1:areaCode>
               <urn1:countryCode>?</urn1:countryCode>
               <urn1:extension>?</urn1:extension>
               <urn1:localNumber>?</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>?</urn1:familyName>
                  <urn1:givenName>?</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>?</urn1:code>
                     <urn1:codeSystem>?</urn1:codeSystem>
                     <urn1:codeSystemName>?</urn1:codeSystemName>
                     <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                     <urn1:displayName>?</urn1:displayName>
                     <urn1:originalText>?</urn1:originalText>
                     <!--Zero or more repetitions:-->
                     <urn1:translation/>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
               </urn1:personName>
               <urn1:userName>?</urn1:userName>
               <urn1:role>?</urn1:role>
               <urn1:org>
                  <urn1:description>?</urn1:description>
                  <urn1:homeCommunityId>?</urn1:homeCommunityId>
                  <urn1:name>?</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>?</urn1:authorized>
            <!--Optional:-->
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>?</urn1:code>
               <urn1:codeSystem>?</urn1:codeSystem>
               <urn1:codeSystemName>?</urn1:codeSystemName>
               <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
               <urn1:displayName>?</urn1:displayName>
               <urn1:originalText>?</urn1:originalText>
               <!--Zero or more repetitions:-->
               <urn1:translation/>
            </urn1:purposeOfDisclosureCoded>
            <!--Optional:-->
            <urn1:claimFormRef>?</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:878096191505</urn1:claimFormRaw>
         </urn:assertion>
         <urn:request>
            <!--1 or more repetitions:-->
            <urn2:Subject SubjectCategory="urn:oasis:names:tc:xacml:1.0:subject-category:access-subject">
               <!--Zero or more repetitions:-->
               <urn2:Attribute AttributeId="?" DataType="?" Issuer="?">
                  <!--1 or more repetitions:-->
                  <urn2:AttributeValue>
                     e
                     <!--You may enter ANY elements at this point-->
                     gero
                  </urn2:AttributeValue>
               </urn2:Attribute>
            </urn2:Subject>
            <!--1 or more repetitions:-->
            <urn2:Resource>
               <!--Optional:-->
               <urn2:ResourceContent>
                  cum
                  <!--You may enter ANY elements at this point-->
                  sonoras
               </urn2:ResourceContent>
               <!--Zero or more repetitions:-->
               <urn2:Attribute AttributeId="?" DataType="?" Issuer="?">
                  <!--1 or more repetitions:-->
                  <urn2:AttributeValue>
                     aeoliam
                     <!--You may enter ANY elements at this point-->
                     quae
                  </urn2:AttributeValue>
               </urn2:Attribute>
            </urn2:Resource>
            <urn2:Action>
               <!--Zero or more repetitions:-->
               <urn2:Attribute AttributeId="?" DataType="?" Issuer="?">
                  <!--1 or more repetitions:-->
                  <urn2:AttributeValue>
                     ventos
                     <!--You may enter ANY elements at this point-->
                     verrantque
                  </urn2:AttributeValue>
               </urn2:Attribute>
            </urn2:Action>
            <urn2:Environment>
               <!--Zero or more repetitions:-->
               <urn2:Attribute AttributeId="?" DataType="?" Issuer="?">
                  <!--1 or more repetitions:-->
                  <urn2:AttributeValue>
                     temperat
                     <!--You may enter ANY elements at this point-->
                     per
                  </urn2:AttributeValue>
               </urn2:Attribute>
            </urn2:Environment>
         </urn:request>
      </urn:CheckPolicyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:wsaConfig action="urn:gov:hhs:fha:nhinc:adapterpolicyengine/AdapterPolicyEnginePortType/CheckPolicyRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
      </con:call>
    </con:operation>
  </con:interface>
  <con:interface xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" anonymous="optional" bindingName="{urn:gov:hhs:fha:nhinc:nhincproxypatientdiscoveryasyncresp}NhincProxyPatientDiscoveryAsyncRespBinding" definition="WSDL path not set.  #NhincProxyPatientDiscoveryAsyncResp.wsdl" name="NhincProxyPatientDiscoveryAsyncRespBinding" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface">
    <con:settings/>
    
    <con:endpoints>
      <con:endpoint>http://localhost/NhinConnect/NhincProxyPatientDiscoveryAsyncResp</con:endpoint>
    </con:endpoints>
    <con:operation action="urn:Proxy_ProcessPatientDiscoveryAsyncResp" anonymous="optional" bindingOperationName="Proxy_ProcessPatientDiscoveryAsyncResp" inputName="Proxy_ProcessPatientDiscoveryAsyncRespRequest" isOneWay="false" name="Proxy_ProcessPatientDiscoveryAsyncResp" outputName="Proxy_ProcessPatientDiscoveryAsyncRespResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
      <con:settings/>
    </con:operation>
  </con:interface>
  
  <con:testSuite name="EntityRespondingPDAsyncReqQueueTestSuite">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="dc793523-e460-400f-bd44-4ddb21357674" keepSession="false" maxResults="0" name="PolicyCheckMockDeny" searchProperties="true">
      <con:settings/>
      <con:testStep name="clear Correlation table" type="groovy">
        <con:settings/>
        <con:config>
          <script>context.withSql('PatientCorrelationDB') { sql -&gt; 
  sql.execute('delete from ' + context.findProperty('PatientCorrelationTable'))
}</script>
        </con:config>
      </con:testStep>
      <con:testStep name="clear AAMapping table" type="groovy">
        <con:settings/>
        <con:config>
          <script>context.withSql('AAMappingDB') { sql -&gt; 
  sql.execute('delete from ' + context.findProperty('AAMappingTable'))
}</script>
        </con:config>
      </con:testStep>
      <con:testStep name="ModifyInterrnalConnectionInfoPE" type="groovy">
        <con:settings/>
        <con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

//def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");//**** Redbox (remove later)
//**** mockHost is localhost because Groovy script resides in local machine ****
def mockHost = context.findProperty("mockHost");
def mockPEURL = "http://" + mockHost + ":11231/mockPE";
def LocalHCID = context.findProperty( "LocalHCID" );

FileUtils.CreateOrUpdateConnection("internalConnectionInfo.xml", destConfigFileLocation, LocalHCID, "policyengineservice", mockPEURL, "LEVEL_a0", context, log)</script></con:config>
      </con:testStep>
      <con:testStep name="PatientDiscoveryAsyncReqQueue" type="request">
        <con:settings/>
        <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
          <con:interface>EntityPatientDiscoveryAsyncReqQueueBindingSoap</con:interface>
          <con:operation>AddPatientDiscoveryAsyncReq</con:operation>
          <con:request name="PatientDiscoveryAsyncReqQueue" useWsAddressing="true">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/&gt;</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#Endpoint-PDAsyncEntityReqQueue}</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soap:Header/>
   <soap:Body projectName="EntityRespondingPDAsyncReqQueueTestSuite" testCase="PolicyCheckMockDeny">
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="T"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="1.1"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="2.2"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="1.1"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.16.840.1.113883.3.337" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="M"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="19990627"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">${#Project#PatientMatchFamilyName}</urn:family>
                           <urn:given partType="GIV">${#Project#PatientMatchGivenName}</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value root="1.1" extension="D11111"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>LEESBURG</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>20176</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19990627</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>2.16.840.1.113883.3.337</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>YOUNGER</urn1:familyName>
               <urn1:givenName>GALLOW</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>PSYCHOTHERAPY</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>D123401^^^&amp;amp;2.16.840.1.113883.3.337&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>2.16.840.1.113883.3.337</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
         <!--Optional:-->
         <urn:NhinTargetCommunities>
            <!--1 or more repetitions:-->
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>?</urn1:description>
                  <urn1:homeCommunityId>${#Project#RemoteHCID}</urn1:homeCommunityId>
                  <urn1:name>?</urn1:name>
               </urn1:homeCommunity>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soap:Body>
</soap:Envelope>]]></con:request>
            <con:assertion type="SOAP Fault Assertion"/>
            <con:assertion name="Verify Receiver" type="XPath Match">
              <con:configuration>
                <path>declare namespace ns3='urn:hl7-org:v3';
//ns3:MCCI_IN000002UV01[1]/ns3:receiver[1]/ns3:device[1]/ns3:asAgent[1]/ns3:representedOrganization[1]/ns3:id[1]/@root</path>
                <content>1.1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:assertion name="Verify Sender" type="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='urn:hl7-org:v3';
//ns2:MCCI_IN000002UV01[1]/ns2:sender[1]/ns2:device[1]/ns2:asAgent[1]/ns2:representedOrganization[1]/ns2:id[1]/@root</path>
                <content>2.2</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:assertion name="Verify Message" type="XPath Match">
              <con:configuration>
                <path>declare namespace ns1='urn:hl7-org:v3';
//ns1:MCCI_IN000002UV01[1]/ns1:acknowledgement[1]/ns1:acknowledgementDetail[1]/ns1:text[1]</path>
                <content>Success</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:assertion name="Verify RelatesTo" type="XPath Match">
              <con:configuration>
                <path>declare namespace ns1='http://www.w3.org/2005/08/addressing';
//ns1:RelatesTo[1]/text()</path>
                <content>uuid:5555555555.55555.555.55</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:gov:hhs:fha:nhinc:entitypatientdiscoveryasyncreqqueue:AddPatientDiscoveryAsyncReqAsyncRequest" addDefaultTo="true" messageID="uuid:5555555555.55555.555.55" mustUnderstand="TRUE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep name="Policy Engine Mock" type="mockresponse">
        <con:settings/>
        <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" startStep="PatientDiscoveryAsyncReqQueue" xsi:type="con:MockResponseStep">
          <con:interface>AdapterPolicyEngineBindingSoap</con:interface>
          <con:operation>CheckPolicy</con:operation>
          <con:path>/mockPE</con:path>
          <con:port>11231</con:port>
          <con:timeout>30000</con:timeout>
          <con:response>
            <con:settings/>
            <con:responseContent><![CDATA[<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns15:CheckPolicyResponse xmlns:ns2="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:ns3="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:ns4="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:ns5="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:ns6="http://www.hhs.gov/healthit/nhin/cdc" xmlns:ns7="http://nhinc.services.com/schema/auditmessage" xmlns:ns8="http://www.w3.org/2005/08/addressing" xmlns:ns9="http://docs.oasis-open.org/wsn/b-2" xmlns:ns10="urn:ihe:iti:xds-b:2007" xmlns:ns11="urn:gov:hhs:fha:nhinc:common:subscriptionb2overridefordocuments" xmlns:ns12="http://docs.oasis-open.org/wsrf/bf-2" xmlns:ns13="http://docs.oasis-open.org/wsn/t-1" xmlns:ns14="urn:oasis:names:tc:xacml:2.0:policy:schema:os" xmlns:ns15="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:ns16="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns17="urn:gov:hhs:fha:nhinc:common:subscriptionb2overrideforcdc" xmlns:ns18="urn:oasis:names:tc:xacml:2.0:context:schema:os" xmlns:ns19="http://schemas.xmlsoap.org/ws/2004/08/addressing">
         <ns15:response>
            <ns18:Result>
               <ns18:Decision>Deny</ns18:Decision>
            </ns18:Result>
         </ns15:response>
      </ns15:CheckPolicyResponse>
   </S:Body>
</S:Envelope>]]></con:responseContent>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
          </con:response>
          <con:assertion name="AuthnStatementAuthnInstant " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='authInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authInstant'
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-instant';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//sourceRequestHolder.namespaces['ec'] = 'hl7-org:v3';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthnStatementSessionIndex" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='sessionIndex';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:sessionIndex';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:session-index';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthnStatementAthnContextClassRef " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='authContextClassRef';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authContextClassRef';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-context-class-ref';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthnStatementSubjectLocalityAddress " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='subjectLocalityAddress';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityAddress';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:ip-address';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthnStatementDNSName " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='subjectLocalityDNSName';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityDNSName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:dns-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserPersonName" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='personname';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:userName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserOrganizationName" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='user organization';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:name';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-organization-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserRoleCode" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='user role coded';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code';
def XacmlAttributeId='urn:oasis:names:tc:xacml:2.0:subject:role';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserRoleCodeSystem " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='user role system';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserRoleCodeSystemName " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='user role system name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserRoleCodeDiplayName " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='user role display name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-description';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="PurposeForUseCode" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCode';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:purposeofuse';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="PurposeForUseCodeSystem" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCodeSystem';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="PurposeForUseCodeSystemName" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCodeSystemName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="PurposeForUseCodeDisplayName" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCodeDisplayName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementDecision" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementDecision';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementResource" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementResource';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementAction" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementAction';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:action';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
//log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);
def ExpectedValue='action';
//log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (ExpectedValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementEvidenceAssertionID " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionID';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementEvidenceAssertionIssueInstant" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssueInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementEvidenceAssertionVersion" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionVersion';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementEvidenceAssertionIssuer" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssuer';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotBefore" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotBefore';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2001-01-01T06:00:00.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2009-05-07T02:00:17.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentReference " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentReference';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentType " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentType';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContent " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="HomeCommunityId" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='home-community-id';
def AssertionXpath='//ec:assertion/nc:homeCommunity/nc:homeCommunityId';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:home-community-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="OrganizationId" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='organizationid';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:homeCommunityId';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:organization-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="PatientId" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='PatientId';
def XacmlAttributeId='http://www.hhs.gov/healthit/nhin#subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';
mockRequestHolder.namespaces['hl7'] = 'urn:hl7-org:v3';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValueExtension = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@extension"]
def ExpectedExtension = '1234';
log.info('XacmlAttributeValue(' + FieldName + '@extension)=' + XacmlValueExtension);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) =&gt; ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueExtension==ExpectedExtension);

def XacmlValueRoot = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@root"]
def ExpectedRoot = '2.2.2';
log.info('XacmlAttributeValue(' + FieldName + '@root)=' + XacmlValueRoot);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) =&gt; ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueRoot==ExpectedRoot);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'urn:hl7-org:v3#II';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionAccessConsent" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:accessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:instanceAccessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-instance-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" type="XPath Match">
            <con:configuration>
              <path>declare namespace ns19='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns18:CheckPolicyRequest[1]/ns18:request[1]/ns19:Subject[2]/ns19:Attribute[1]/@AttributeId</path>
              <content>urn:gov:hhs:fha:nhinc:home-community-id</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
          <con:assertion name="assigning authority" type="XPath Match">
            <con:configuration>
              <path>declare namespace ns11='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns9='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns9:CheckPolicyRequest[1]/ns9:request[1]/ns11:Resource[1]/ns11:Attribute[1]/ns11:AttributeValue[1]</path>
              <content>1.1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
          <con:assertion name="local patient id" type="XPath Match">
            <con:configuration>
              <path>declare namespace ns11='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns9='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns9:CheckPolicyRequest[1]/ns9:request[1]/ns11:Resource[1]/ns11:Attribute[2]/ns11:AttributeValue[1]</path>
              <content>D123401</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
        </con:config>
      </con:testStep>
      <con:testStep name="count Correlations (0)" type="groovy">
        <con:settings/>
        <con:config>
          <script>context.withSql('PatientCorrelationDB') { sql -&gt; 
  assert 0 == sql.firstRow('select count(*) from ' + context.findProperty('PatientCorrelationTable'))[0]
}</script>
        </con:config>
      </con:testStep>
      <con:testStep name="count AAMapping (1)" type="groovy">
        <con:settings/>
        <con:config>
          <script>context.withSql('AAMappingDB') { sql -&gt; 
  assert 0 == sql.firstRow('select count(*) from ' + context.findProperty('AAMappingTable'))[0]
}</script>
        </con:config>
      </con:testStep>
      <con:testStep name="Restore Configurations" type="groovy">
        <con:settings/>
        <con:config>
          <script/>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>LocalHCID</con:name>
          <con:value>1.1</con:value>
        </con:property>
        <con:property>
          <con:name>LocalAA</con:name>
          <con:value>1.1</con:value>
        </con:property>
        <con:property>
          <con:name>LocalHCDescription</con:name>
          <con:value>InternalTest1</con:value>
        </con:property>
        <con:property>
          <con:name>LocalPatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>RemoteHCID</con:name>
          <con:value>2.2</con:value>
        </con:property>
        <con:property>
          <con:name>RemoteAA</con:name>
          <con:value>2.2</con:value>
        </con:property>
        <con:property>
          <con:name>RemoteHCDescription</con:name>
          <con:value>InternalTest2</con:value>
        </con:property>
        <con:property>
          <con:name>RemotePatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>NHINGatewayConfigDir</con:name>
          <con:value>C:/Sun/AppServer/domains/domain1/config/nhin</con:value>
        </con:property>
        <con:property>
          <con:name>MPIDir</con:name>
          <con:value>C:/Sun/AppServer/domains/domain1/config</con:value>
        </con:property>
        <con:property>
          <con:name>LocalConfigDir</con:name>
          <con:value>C:/SelfTest/EndToEndSelfTest</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-DocQuery</con:name>
          <con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityDocQueryUnsecured</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-DocRetrieve</con:name>
          <con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityDocRetrieve</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-Reidentification</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntitySubjectDiscovery</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-Subscribe</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntityNotificationProducer</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-Notify</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntityNotificationConsumer</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-Unsubscribe</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntitySubscriptionManager</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-AuditLogQuery</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntityAuditQuery</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-PatientDiscoveryAsyncReq</con:name>
          <con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityPatientDiscoveryDeferredRequestUnsecured</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-PatientDiscoveryAsyncResp</con:name>
          <con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityPatientDiscoveryDeferredResponseUnsecured</con:value>
        </con:property>
        <con:property>
          <con:name>DBHost</con:name>
          <con:value>localhost</con:value>
        </con:property>
        <con:property>
          <con:name>DBPort</con:name>
          <con:value>3306</con:value>
        </con:property>
        <con:property>
          <con:name>DBUser</con:name>
          <con:value>nhincuser</con:value>
        </con:property>
        <con:property>
          <con:name>DBPass</con:name>
          <con:value>nhincpass</con:value>
        </con:property>
        <con:property>
          <con:name>PatientCorrelationDB</con:name>
          <con:value>patientcorrelationdb</con:value>
        </con:property>
        <con:property>
          <con:name>PatientCorrelationTable</con:name>
          <con:value>correlatedidentifiers</con:value>
        </con:property>
        <con:property>
          <con:name>SubscriptionDB</con:name>
          <con:value>subscriptionrepository</con:value>
        </con:property>
        <con:property>
          <con:name>SubscriptionTable</con:name>
          <con:value>subscription</con:value>
        </con:property>
        <con:property>
          <con:name>AAMappingDB</con:name>
          <con:value>assigningauthoritydb</con:value>
        </con:property>
        <con:property>
          <con:name>AAMappingTable</con:name>
          <con:value>aa_to_home_community_mapping</con:value>
        </con:property>
        <con:property>
          <con:name>AsyncMsgDB</con:name>
          <con:value>asyncmsgs</con:value>
        </con:property>
        <con:property>
          <con:name>AsyncMsgTable</con:name>
          <con:value>asyncmsgrepo</con:value>
        </con:property>
        <con:property>
          <con:name>PseudonymAA</con:name>
          <con:value>ABC</con:value>
        </con:property>
        <con:property>
          <con:name>PseudonymPatientID</con:name>
          <con:value>PSEUDO001</con:value>
        </con:property>
        <con:property>
          <con:name>RealAA</con:name>
          <con:value>1.1.1</con:value>
        </con:property>
        <con:property>
          <con:name>RealPatientID</con:name>
          <con:value>D1234010050</con:value>
        </con:property>
        <con:property>
          <con:name>DQDocID</con:name>
          <con:value>1.123401.11111</con:value>
        </con:property>
        <con:property>
          <con:name>DQPatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>DynamicDQDocID</con:name>
          <con:value>103.8.9284320.020.3590.75^1266324032288</con:value>
        </con:property>
        <con:property>
          <con:name>DRDocID</con:name>
          <con:value>1.123407.777777</con:value>
        </con:property>
        <con:property>
          <con:name>DRRepoID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NotificationEndpoint</con:name>
          <con:value>https://localhost:8181/CONNECTNhinServicesWeb/NhinService/NotificationConsumerService/HiemNotify</con:value>
        </con:property>
        <con:property>
          <con:name>SubscriptionEndpoint</con:name>
          <con:value>https://localhost:8181/CONNECTNhinServicesWeb/NhinService/NotificationProducerService/HiemSubscription</con:value>
        </con:property>
        <con:property>
          <con:name>SubscribePatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>NotifySubscriptionID</con:name>
          <con:value>-f7c1a5d:1204e50e42e:-79eb</con:value>
        </con:property>
        <con:property>
          <con:name>NotifySubscriptionManagerEndpointAddress</con:name>
          <con:value>https://localhost:8181/CONNECTNhinServicesWeb/NhinService/SubscriptionManagerService/HiemUnsubscribe</con:value>
        </con:property>
        <con:property>
          <con:name>UnSubscriptionID</con:name>
          <con:value>3e74139f-5271-4db1-98c0-88748fa3e4e3</con:value>
        </con:property>
        <con:property>
          <con:name>SubscriptionManagerEndpointAddress</con:name>
          <con:value>https://localhost:8181/CONNECTNhinServicesWeb/NhinService/SubscriptionManagerService/HiemUnsubscribe</con:value>
        </con:property>
        <con:property>
          <con:name>AQUserID</con:name>
          <con:value>kskagerb</con:value>
        </con:property>
        <con:property>
          <con:name>AQPatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-EntityXDRRequest</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntityProxyService/EntityXDRRequest</con:value>
        </con:property>
        <con:property>
          <con:name>Gender</con:name>
          <con:value>M</con:value>
        </con:property>
        <con:property>
          <con:name>BirthTime</con:name>
          <con:value>19630804</con:value>
        </con:property>
        <con:property>
          <con:name>FamilyName</con:name>
          <con:value>Younger</con:value>
        </con:property>
        <con:property>
          <con:name>GivenName</con:name>
          <con:value>Gallow</con:value>
        </con:property>
        <con:property>
          <con:name>SubjectID</con:name>
          <con:value>1111</con:value>
        </con:property>
        <con:property>
          <con:name>UniquePatientId</con:name>
          <con:value>1111^^^&amp;amp;1.1&amp;amp;ISO</con:value>
        </con:property>
        <con:property>
          <con:name>StreetAddress</con:name>
          <con:value>123 Johnson Rd</con:value>
        </con:property>
        <con:property>
          <con:name>City</con:name>
          <con:value>Melbourne</con:value>
        </con:property>
        <con:property>
          <con:name>State</con:name>
          <con:value>FL</con:value>
        </con:property>
        <con:property>
          <con:name>ZipCode</con:name>
          <con:value>12345</con:value>
        </con:property>
        <con:property>
          <con:name>Country</con:name>
          <con:value>US</con:value>
        </con:property>
        <con:property>
          <con:name>SSN</con:name>
          <con:value>123456789</con:value>
        </con:property>
        <con:property>
          <con:name>PurposeOfDisclosure</con:name>
          <con:value>Mental</con:value>
        </con:property>
        <con:property>
          <con:name>ExpirationDate</con:name>
          <con:value>20100520</con:value>
        </con:property>
        <con:property>
          <con:name>DOB</con:name>
          <con:value>19800516</con:value>
        </con:property>
        <con:property>
          <con:name>DateOfSignature</con:name>
          <con:value>20080520&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r3844</con:value>
        </con:property>
        <con:property>
          <con:name>startDate</con:name>
          <con:value>2010-08-31T17:09:20Z</con:value>
        </con:property>
        <con:property>
          <con:name>endDate</con:name>
          <con:value>2010-08-31T17:19:20Z</con:value>
        </con:property>
        <con:property>
          <con:name>sigDate</con:name>
          <con:value>08/31/2010 17:09:20</con:value>
        </con:property>
        <con:property>
          <con:name>expireDate</con:name>
          <con:value>2010-09-30T00:00:00Z</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="5842c37c-5077-4d93-bc03-76a55746abc4" keepSession="false" maxResults="0" name="PolicyCheckMockPermit-SingleMatch" searchProperties="true">
      <con:settings/>
      <con:testStep disabled="true" name="Patient Discovery Async Resp" type="request">
        <con:settings/>
        <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
          <con:interface>EntityPatientDiscoveryAsyncRespBindingSoap</con:interface>
          <con:operation>ProcessPatientDiscoveryAsyncResp</con:operation>
          <con:request name="Patient Discovery Async Resp">
            <con:settings/>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#Endpoint-PDAsyncEntityResp}</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soap:Header xmlns:add="http://www.w3.org/2005/08/addressing">
      <add:Action>urn:gov:hhs:fha:nhinc:entitypatientdiscoveryasyncresp:ProcessPatientDiscoveryAsyncRespAsyncRequest</add:Action>
      <add:MessageID>uuid:12bcfc1e-f422-4d1d-af99-ff83d050313e</add:MessageID>
      <add:RelatesTo>uuid:22222222222.22222.222.22</add:RelatesTo>
      <add:To>http://localhost:8080/CONNECTMsgProxyWeb/MsgProxy/NhincProxyPatientDiscoveryAsyncResp</add:To>
   </soap:Header>
   <soap:Body>
      <urn:RespondingGateway_PRPA_IN201306UV02Request>
         <urn:PRPA_IN201306UV02 ITSVersion="XML_1.0">
            <urn:id root="2.2" extension="-5a3e95b1:11d1fa33d45:-8e45"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201306UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="T"/>
            <urn:acceptAckCode code="AL"/>
            <!--1 or more repetitions:-->
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="1.1"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="1.1"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <urn:code codeSystem="2.16.840.1.113883.1.6" code="PRPA_TE201306UV"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="1.1"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:subject typeCode="SUBJ">
                  <urn:registrationEvent classCode="REG" moodCode="EVN">
                     <urn:id nullFlavor="NA"/>
                     <urn:statusCode code="active"/>
                     <urn:subject1 typeCode="SBJ">
                        <urn:patient classCode="PAT">
                           <urn:id extension="D123402" root="2.2"/>
                           <urn:statusCode code="SD"/>
                           <urn:patientPerson>
                              <urn:name>
                                 <urn:family partType="FAM">Younger</urn:family>
                                 <urn:given partType="GIV">Gallow</urn:given>
                              </urn:name>
                              <urn:administrativeGenderCode code="M"/>
                              <urn:birthTime value="19990627"/>
                              <urn:addr>
                                 <urn:city>LEESBURG</urn:city>
                                 <urn:state>VA</urn:state>
                                 <urn:postalCode>20176</urn:postalCode>
                              </urn:addr>
                           </urn:patientPerson>
                           <urn:providerOrganization determinerCode="" classCode="">
                              <urn:id root="2.2"/>
                              <urn:contactParty xsi:nil="true" classCode="CON" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                           </urn:providerOrganization>
                        </urn:patient>
                     </urn:subject1>
                     <urn:custodian typeCode="">
                        <urn:assignedEntity classCode="">
                           <urn:id root="2.2"/>
                        </urn:assignedEntity>
                     </urn:custodian>
                  </urn:registrationEvent>
               </urn:subject>
               <urn:queryAck>
                  <urn:queryId extension="-abd3453dcd24wkkks545" root="2.2"/>
                  <urn:queryResponseCode code="OK"/>
                  <urn:resultTotalQuantity value="1"/>
                  <urn:resultCurrentQuantity value="1"/>
                  <urn:resultRemainingQuantity value="0"/>
               </urn:queryAck>
               <urn:queryByParameter>
                  <urn:queryId extension="-abd3453dcd24wkkks545" root="2.2"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="M"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="19630804"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectId>
                        <urn:value extension="D123401" root="1.1"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">Younger</urn:family>
                           <urn:given partType="GIV">Gallow</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectName>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201306UV02>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>LEESBURG</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>20176</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19990627</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>2.16.840.1.113883.3.337</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>YOUNGER</urn1:familyName>
               <urn1:givenName>GALLOW</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:purposeOfDisclosure>Mental</urn1:purposeOfDisclosure>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>D123401^^^&amp;amp;2.16.840.1.113883.3.337&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>2.16.840.1.113883.3.337</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
         <urn:NhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>${#Project#RemoteHCDescription}</urn1:description>
                  <urn1:homeCommunityId>${#Project#RemoteHCID}</urn1:homeCommunityId>
                  <urn1:name>${#Project#RemoteHCDescription}</urn1:name>
               </urn1:homeCommunity>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
      </urn:RespondingGateway_PRPA_IN201306UV02Request>
   </soap:Body>
</soap:Envelope>]]></con:request>
            <con:assertion type="SOAP Response"/>
            <con:assertion type="SOAP Fault Assertion"/>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep name="clear Correlation table" type="groovy">
        <con:settings/>
        <con:config>
          <script>context.withSql('PatientCorrelationDB') { sql -&gt; 
  sql.execute('delete from ' + context.findProperty('PatientCorrelationTable'))
}</script>
        </con:config>
      </con:testStep>
      <con:testStep name="clear AAMapping table" type="groovy">
        <con:settings/>
        <con:config>
          <script>context.withSql('AAMappingDB') { sql -&gt; 
  sql.execute('delete from ' + context.findProperty('AAMappingTable'))
}</script>
        </con:config>
      </con:testStep>
      <con:testStep name="ModifyInterrnalConnectionInfoPE" type="groovy">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

//def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");//**** Redbox (remove later)
//**** mockHost is localhost because Groovy script resides in local machine ****
def mockHost = context.findProperty("mockHost");
def mockPEURL = "http://" + mockHost + ":11231/mockPE";
def LocalHCID = context.findProperty( "LocalHCID" );

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, LocalHCID, "policyengineservice", mockPEURL, context, log)</script>
        </con:config>
      </con:testStep>
      <con:testStep name="ModifyInternalConnectionInfoUsingTestHelper" type="groovy">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");
def mockHost = context.findProperty("mockHost");
def LocalHCID = context.findProperty( "LocalHCID" );
def RemoteHCID = context.findProperty("RemoteHCID");

def patientdiscoveryTestHelperURL = "https://" + NHINGatewayHost + ":8181/CONNECTGatewayTest/NhinPatientDiscoveryAsyncRespTestHelper";
def mockPatientDiscoveryAsyncReqQueueURL = "http://" + mockHost + ":8909/mockPDAsyncReqQueue";

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "PatientDiscoveryAsyncResp", patientdiscoveryTestHelperURL, context, log)
FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "mockpatientdiscoveryasyncresp", mockPatientDiscoveryAsyncReqQueueURL, context, log)</script>
        </con:config>
      </con:testStep>
      <con:testStep name="PatientDiscoveryAsyncReqQueue" type="request">
        <con:settings/>
        <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
          <con:interface>EntityPatientDiscoveryAsyncReqQueueBindingSoap</con:interface>
          <con:operation>AddPatientDiscoveryAsyncReq</con:operation>
          <con:request name="PatientDiscoveryAsyncReqQueue" useWsAddressing="true">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/&gt;</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#Endpoint-PDAsyncEntityReqQueue}</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soap:Header/>
   <soap:Body projectName="EntityRespondingPDAsyncReqQueueTestSuite" testCase="PolicyCheckMockPermit-SingleMatch">
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="T"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="1.1"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="2.2"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="1.1"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.16.840.1.113883.3.337" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="M"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="19990627"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">${#Project#PatientMatchFamilyName}</urn:family>
                           <urn:given partType="GIV">${#Project#PatientMatchGivenName}</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value root="1.1" extension="D11111"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>LEESBURG</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>20176</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19990627</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>2.16.840.1.113883.3.337</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>YOUNGER</urn1:familyName>
               <urn1:givenName>GALLOW</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
             <urn1:purposeOfDisclosureCoded>
               <urn1:code>PSYCHOTHERAPY</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>D123401^^^&amp;amp;2.16.840.1.113883.3.337&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>2.16.840.1.113883.3.337</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
         <!--Optional:-->
         <urn:NhinTargetCommunities>
            <!--1 or more repetitions:-->
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>?</urn1:description>
                  <urn1:homeCommunityId>${#Project#RemoteHCID}</urn1:homeCommunityId>
                  <urn1:name>?</urn1:name>
               </urn1:homeCommunity>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soap:Body>
</soap:Envelope>]]></con:request>
            <con:assertion type="SOAP Fault Assertion"/>
            <con:assertion name="Verify Receiver" type="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='urn:hl7-org:v3';
//ns2:MCCI_IN000002UV01[1]/ns2:receiver[1]/ns2:device[1]/ns2:asAgent[1]/ns2:representedOrganization[1]/ns2:id[1]/@root</path>
                <content>1.1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:assertion disabled="true" name="Verify Sender" type="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='urn:hl7-org:v3';
//ns2:MCCI_IN000002UV01[1]/ns2:sender[1]/ns2:device[1]/ns2:asAgent[1]/ns2:representedOrganization[1]/ns2:id[1]/@root</path>
                <content>1.1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:assertion name="Verify Message" type="XPath Match">
              <con:configuration>
                <path>declare namespace ns3='urn:hl7-org:v3';
//ns3:MCCI_IN000002UV01[1]/ns3:acknowledgement[1]/ns3:acknowledgementDetail[1]/ns3:text[1]/text()</path>
                <content>Success</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:assertion name="Verify RelatesTo" type="XPath Match">
              <con:configuration>
                <path>declare namespace ns1='http://www.w3.org/2005/08/addressing';
//ns1:RelatesTo[1]/text()</path>
                <content>uuid:5555555555.55555.555.55</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:gov:hhs:fha:nhinc:entitypatientdiscoveryasyncreqqueue:AddPatientDiscoveryAsyncReqAsyncRequest" addDefaultTo="true" messageID="uuid:5555555555.55555.555.55" mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep name="Policy Engine Mock" type="mockresponse">
        <con:settings/>
        <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" startStep="PatientDiscoveryAsyncReqQueue" xsi:type="con:MockResponseStep">
          <con:interface>AdapterPolicyEngineBindingSoap</con:interface>
          <con:operation>CheckPolicy</con:operation>
          <con:path>/mockPE</con:path>
          <con:port>11231</con:port>
          <con:timeout>30000</con:timeout>
          <con:response>
            <con:settings/>
            <con:responseContent><![CDATA[<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns15:CheckPolicyResponse xmlns:ns2="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:ns3="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:ns4="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:ns5="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:ns6="http://www.hhs.gov/healthit/nhin/cdc" xmlns:ns7="http://nhinc.services.com/schema/auditmessage" xmlns:ns8="http://www.w3.org/2005/08/addressing" xmlns:ns9="http://docs.oasis-open.org/wsn/b-2" xmlns:ns10="urn:ihe:iti:xds-b:2007" xmlns:ns11="urn:gov:hhs:fha:nhinc:common:subscriptionb2overridefordocuments" xmlns:ns12="http://docs.oasis-open.org/wsrf/bf-2" xmlns:ns13="http://docs.oasis-open.org/wsn/t-1" xmlns:ns14="urn:oasis:names:tc:xacml:2.0:policy:schema:os" xmlns:ns15="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:ns16="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns17="urn:gov:hhs:fha:nhinc:common:subscriptionb2overrideforcdc" xmlns:ns18="urn:oasis:names:tc:xacml:2.0:context:schema:os" xmlns:ns19="http://schemas.xmlsoap.org/ws/2004/08/addressing">
         <ns15:response>
            <ns18:Result>
               <ns18:Decision>Permit</ns18:Decision>
            </ns18:Result>
         </ns15:response>
      </ns15:CheckPolicyResponse>
   </S:Body>
</S:Envelope>]]></con:responseContent>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
          </con:response>
          <con:assertion name="AuthnStatementAuthnInstant " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='authInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authInstant'
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-instant';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//sourceRequestHolder.namespaces['ec'] = 'hl7-org:v3';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthnStatementSessionIndex" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='sessionIndex';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:sessionIndex';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:session-index';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthnStatementAthnContextClassRef " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='authContextClassRef';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authContextClassRef';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-context-class-ref';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthnStatementSubjectLocalityAddress " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='subjectLocalityAddress';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityAddress';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:ip-address';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthnStatementDNSName " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='subjectLocalityDNSName';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityDNSName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:dns-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserPersonName" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='personname';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:userName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserOrganizationName" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='user organization';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:name';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-organization-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserRoleCode" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='user role coded';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code';
def XacmlAttributeId='urn:oasis:names:tc:xacml:2.0:subject:role';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserRoleCodeSystem " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='user role system';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserRoleCodeSystemName " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='user role system name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserRoleCodeDiplayName " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='user role display name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-description';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="PurposeForUseCode" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCode';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:purposeofuse';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="PurposeForUseCodeSystem" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCodeSystem';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="PurposeForUseCodeSystemName" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCodeSystemName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="PurposeForUseCodeDisplayName" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCodeDisplayName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementDecision" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementDecision';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementResource" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementResource';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementAction" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementAction';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:action';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
//log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);
def ExpectedValue='action';
//log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (ExpectedValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementEvidenceAssertionID " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionID';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementEvidenceAssertionIssueInstant" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssueInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementEvidenceAssertionVersion" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionVersion';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementEvidenceAssertionIssuer" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssuer';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotBefore" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotBefore';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2001-01-01T06:00:00.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2009-05-07T02:00:17.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentReference " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentReference';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentType " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentType';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContent " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="HomeCommunityId" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='home-community-id';
def AssertionXpath='//ec:assertion/nc:homeCommunity/nc:homeCommunityId';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:home-community-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="OrganizationId" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='organizationid';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:homeCommunityId';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:organization-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="PatientId" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='PatientId';
def XacmlAttributeId='http://www.hhs.gov/healthit/nhin#subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';
mockRequestHolder.namespaces['hl7'] = 'urn:hl7-org:v3';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValueExtension = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@extension"]
def ExpectedExtension = '1234';
log.info('XacmlAttributeValue(' + FieldName + '@extension)=' + XacmlValueExtension);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) =&gt; ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueExtension==ExpectedExtension);

def XacmlValueRoot = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@root"]
def ExpectedRoot = '2.2.2';
log.info('XacmlAttributeValue(' + FieldName + '@root)=' + XacmlValueRoot);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) =&gt; ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueRoot==ExpectedRoot);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'urn:hl7-org:v3#II';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionAccessConsent" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:accessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:instanceAccessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-instance-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" type="XPath Match">
            <con:configuration>
              <path>declare namespace ns19='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns18:CheckPolicyRequest[1]/ns18:request[1]/ns19:Subject[2]/ns19:Attribute[1]/@AttributeId</path>
              <content>urn:gov:hhs:fha:nhinc:home-community-id</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
          <con:assertion name="assigning authority" type="XPath Match">
            <con:configuration>
              <path>declare namespace ns11='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns9='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns9:CheckPolicyRequest[1]/ns9:request[1]/ns11:Resource[1]/ns11:Attribute[1]/ns11:AttributeValue[1]</path>
              <content>1.1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
          <con:assertion name="local patient id" type="XPath Match">
            <con:configuration>
              <path>declare namespace ns11='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns9='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns9:CheckPolicyRequest[1]/ns9:request[1]/ns11:Resource[1]/ns11:Attribute[2]/ns11:AttributeValue[1]</path>
              <content>D123401</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
        </con:config>
      </con:testStep>
      <con:testStep name="PatientDiscoveryAsyncReqQueueMockResponse" type="mockresponse">
        <con:settings/>
        <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" startStep="PatientDiscoveryAsyncReqQueue" xsi:type="con:MockResponseStep">
          <con:interface>NhincProxyPatientDiscoveryAsyncRespBinding</con:interface>
          <con:operation>Proxy_ProcessPatientDiscoveryAsyncResp</con:operation>
          <con:path>/mockPDAsyncReqQueue</con:path>
          <con:port>8909</con:port>
          <con:response>
            <con:settings/>
            <con:responseContent><![CDATA[<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Header>
      <To xmlns="http://www.w3.org/2005/08/addressing">http://www.w3.org/2005/08/addressing/anonymous</To>
      <Action xmlns="http://www.w3.org/2005/08/addressing">urn:gov:hhs:fha:nhinc:entitypatientdiscoveryasyncreqqueue:AddPatientDiscoveryAsyncReqAsyncResponse</Action>
      <MessageID xmlns="http://www.w3.org/2005/08/addressing">uuid:0928e4f6-561a-4111-89b6-c0cc571c0a48</MessageID>
      <RelatesTo xmlns="http://www.w3.org/2005/08/addressing">uuid:5555555555.55555.555.55</RelatesTo>
   </S:Header>
   <S:Body>
      <ns2:MCCI_IN000002UV01 ITSVersion="XML_1.0" xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="urn:hl7-org:v3" xmlns:ns3="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:patientcorrelationfacade">
         <ns2:id extension="-5ce0b37f:12863b7180e:-7e39" root="1.1"/>
         <ns2:creationTime value="201054201755"/>
         <ns2:interactionId extension="MCCIIN000002UV01" root="2.16.840.1.113883.1.6"/>
         <ns2:processingCode code="T"/>
         <ns2:processingModeCode code="T"/>
         <ns2:acceptAckCode code="NE"/>
         <ns2:receiver typeCode="RCV">
            <ns2:device determinerCode="INSTANCE" classCode="">
               <ns2:id root="1.2.345.678.999"/>
               <ns2:asAgent classCode="AGNT">
                  <ns2:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns2:id root="1.1"/>
                  </ns2:representedOrganization>
               </ns2:asAgent>
            </ns2:device>
         </ns2:receiver>
         <ns2:sender typeCode="SND">
            <ns2:device determinerCode="INSTANCE" classCode="">
               <ns2:id root="1.2.345.678.999"/>
               <ns2:asAgent classCode="AGNT">
                  <ns2:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns2:id root="1.1"/>
                  </ns2:representedOrganization>
               </ns2:asAgent>
            </ns2:device>
         </ns2:sender>
         <ns2:acknowledgement>
            <ns2:typeCode code="CA"/>
            <ns2:targetMessage>
               <ns2:id extension="-5ce0b37f:12863b7180e:-7e40" root="1.1"/>
            </ns2:targetMessage>
            <ns2:acknowledgementDetail>
               <ns2:text>Success</ns2:text>
            </ns2:acknowledgementDetail>
         </ns2:acknowledgement>
      </ns2:MCCI_IN000002UV01>
   </S:Body>
</S:Envelope>]]></con:responseContent>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
          </con:response>
        </con:config>
      </con:testStep>
      <con:testStep name="count Correlations (1)" type="groovy">
        <con:settings/>
        <con:config>
          <script>context.withSql('PatientCorrelationDB') { sql -&gt; 
  assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('PatientCorrelationTable'))[0]
}</script>
        </con:config>
      </con:testStep>
      <con:testStep name="count AAMapping (1)" type="groovy">
        <con:settings/>
        <con:config>
          <script>context.withSql('AAMappingDB') { sql -&gt; 
  assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('AAMappingTable'))[0]
}</script>
        </con:config>
      </con:testStep>
      <con:testStep name="Restore Configurations" type="groovy">
        <con:settings/>
        <con:config>
          <script/>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>LocalHCID</con:name>
          <con:value>1.1</con:value>
        </con:property>
        <con:property>
          <con:name>LocalAA</con:name>
          <con:value>1.1</con:value>
        </con:property>
        <con:property>
          <con:name>LocalHCDescription</con:name>
          <con:value>InternalTest1</con:value>
        </con:property>
        <con:property>
          <con:name>LocalPatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>RemoteHCID</con:name>
          <con:value>2.2</con:value>
        </con:property>
        <con:property>
          <con:name>RemoteAA</con:name>
          <con:value>2.2</con:value>
        </con:property>
        <con:property>
          <con:name>RemoteHCDescription</con:name>
          <con:value>InternalTest2</con:value>
        </con:property>
        <con:property>
          <con:name>RemotePatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>NHINGatewayConfigDir</con:name>
          <con:value>C:/Sun/AppServer/domains/domain1/config/nhin</con:value>
        </con:property>
        <con:property>
          <con:name>MPIDir</con:name>
          <con:value>C:/Sun/AppServer/domains/domain1/config</con:value>
        </con:property>
        <con:property>
          <con:name>LocalConfigDir</con:name>
          <con:value>C:/SelfTest/EndToEndSelfTest</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-DocQuery</con:name>
          <con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityDocQueryUnsecured</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-DocRetrieve</con:name>
          <con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityDocRetrieve</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-Reidentification</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntitySubjectDiscovery</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-Subscribe</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntityNotificationProducer</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-Notify</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntityNotificationConsumer</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-Unsubscribe</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntitySubscriptionManager</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-AuditLogQuery</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntityAuditQuery</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-PatientDiscoveryAsyncReq</con:name>
          <con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityPatientDiscoveryDeferredRequestUnsecured</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-PatientDiscoveryAsyncResp</con:name>
          <con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityPatientDiscoveryDeferredResponseUnsecured</con:value>
        </con:property>
        <con:property>
          <con:name>DBHost</con:name>
          <con:value>localhost</con:value>
        </con:property>
        <con:property>
          <con:name>DBPort</con:name>
          <con:value>3306</con:value>
        </con:property>
        <con:property>
          <con:name>DBUser</con:name>
          <con:value>nhincuser</con:value>
        </con:property>
        <con:property>
          <con:name>DBPass</con:name>
          <con:value>nhincpass</con:value>
        </con:property>
        <con:property>
          <con:name>PatientCorrelationDB</con:name>
          <con:value>patientcorrelationdb</con:value>
        </con:property>
        <con:property>
          <con:name>PatientCorrelationTable</con:name>
          <con:value>correlatedidentifiers</con:value>
        </con:property>
        <con:property>
          <con:name>SubscriptionDB</con:name>
          <con:value>subscriptionrepository</con:value>
        </con:property>
        <con:property>
          <con:name>SubscriptionTable</con:name>
          <con:value>subscription</con:value>
        </con:property>
        <con:property>
          <con:name>AAMappingDB</con:name>
          <con:value>assigningauthoritydb</con:value>
        </con:property>
        <con:property>
          <con:name>AAMappingTable</con:name>
          <con:value>aa_to_home_community_mapping</con:value>
        </con:property>
        <con:property>
          <con:name>AsyncMsgDB</con:name>
          <con:value>asyncmsgs</con:value>
        </con:property>
        <con:property>
          <con:name>AsyncMsgTable</con:name>
          <con:value>asyncmsgrepo</con:value>
        </con:property>
        <con:property>
          <con:name>PseudonymAA</con:name>
          <con:value>ABC</con:value>
        </con:property>
        <con:property>
          <con:name>PseudonymPatientID</con:name>
          <con:value>PSEUDO001</con:value>
        </con:property>
        <con:property>
          <con:name>RealAA</con:name>
          <con:value>1.1.1</con:value>
        </con:property>
        <con:property>
          <con:name>RealPatientID</con:name>
          <con:value>D1234010050</con:value>
        </con:property>
        <con:property>
          <con:name>DQDocID</con:name>
          <con:value>1.123401.11111</con:value>
        </con:property>
        <con:property>
          <con:name>DQPatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>DynamicDQDocID</con:name>
          <con:value>103.8.9284320.020.3590.75^1266324032288</con:value>
        </con:property>
        <con:property>
          <con:name>DRDocID</con:name>
          <con:value>1.123407.777777</con:value>
        </con:property>
        <con:property>
          <con:name>DRRepoID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NotificationEndpoint</con:name>
          <con:value>https://localhost:8181/CONNECTNhinServicesWeb/NhinService/NotificationConsumerService/HiemNotify</con:value>
        </con:property>
        <con:property>
          <con:name>SubscriptionEndpoint</con:name>
          <con:value>https://localhost:8181/CONNECTNhinServicesWeb/NhinService/NotificationProducerService/HiemSubscription</con:value>
        </con:property>
        <con:property>
          <con:name>SubscribePatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>NotifySubscriptionID</con:name>
          <con:value>-f7c1a5d:1204e50e42e:-79eb</con:value>
        </con:property>
        <con:property>
          <con:name>NotifySubscriptionManagerEndpointAddress</con:name>
          <con:value>https://localhost:8181/CONNECTNhinServicesWeb/NhinService/SubscriptionManagerService/HiemUnsubscribe</con:value>
        </con:property>
        <con:property>
          <con:name>UnSubscriptionID</con:name>
          <con:value>3e74139f-5271-4db1-98c0-88748fa3e4e3</con:value>
        </con:property>
        <con:property>
          <con:name>SubscriptionManagerEndpointAddress</con:name>
          <con:value>https://localhost:8181/CONNECTNhinServicesWeb/NhinService/SubscriptionManagerService/HiemUnsubscribe</con:value>
        </con:property>
        <con:property>
          <con:name>AQUserID</con:name>
          <con:value>kskagerb</con:value>
        </con:property>
        <con:property>
          <con:name>AQPatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-EntityXDRRequest</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntityProxyService/EntityXDRRequest</con:value>
        </con:property>
        <con:property>
          <con:name>Gender</con:name>
          <con:value>M</con:value>
        </con:property>
        <con:property>
          <con:name>BirthTime</con:name>
          <con:value>19630804</con:value>
        </con:property>
        <con:property>
          <con:name>FamilyName</con:name>
          <con:value>Younger</con:value>
        </con:property>
        <con:property>
          <con:name>GivenName</con:name>
          <con:value>Gallow</con:value>
        </con:property>
        <con:property>
          <con:name>SubjectID</con:name>
          <con:value>1111</con:value>
        </con:property>
        <con:property>
          <con:name>UniquePatientId</con:name>
          <con:value>1111^^^&amp;amp;1.1&amp;amp;ISO</con:value>
        </con:property>
        <con:property>
          <con:name>StreetAddress</con:name>
          <con:value>123 Johnson Rd</con:value>
        </con:property>
        <con:property>
          <con:name>City</con:name>
          <con:value>Melbourne</con:value>
        </con:property>
        <con:property>
          <con:name>State</con:name>
          <con:value>FL</con:value>
        </con:property>
        <con:property>
          <con:name>ZipCode</con:name>
          <con:value>12345</con:value>
        </con:property>
        <con:property>
          <con:name>Country</con:name>
          <con:value>US</con:value>
        </con:property>
        <con:property>
          <con:name>SSN</con:name>
          <con:value>123456789</con:value>
        </con:property>
        <con:property>
          <con:name>PurposeOfDisclosure</con:name>
          <con:value>Mental</con:value>
        </con:property>
        <con:property>
          <con:name>ExpirationDate</con:name>
          <con:value>20100520</con:value>
        </con:property>
        <con:property>
          <con:name>DOB</con:name>
          <con:value>19800516</con:value>
        </con:property>
        <con:property>
          <con:name>DateOfSignature</con:name>
          <con:value>20080520&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r3844</con:value>
        </con:property>
        <con:property>
          <con:name>startDate</con:name>
          <con:value>2010-08-31T17:09:21Z</con:value>
        </con:property>
        <con:property>
          <con:name>endDate</con:name>
          <con:value>2010-08-31T17:19:21Z</con:value>
        </con:property>
        <con:property>
          <con:name>sigDate</con:name>
          <con:value>08/31/2010 17:09:21</con:value>
        </con:property>
        <con:property>
          <con:name>expireDate</con:name>
          <con:value>2010-09-30T00:00:00Z</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="54d35086-6b1c-432f-9fbf-35d7aaa27ee8" keepSession="false" maxResults="0" name="PDAsyncNoPatID" searchProperties="true">
      <con:settings/>
      <con:testStep name="clear Correlation table" type="groovy">
        <con:settings/>
        <con:config>
          <script>context.withSql('PatientCorrelationDB') { sql -&gt; 
  sql.execute('delete from ' + context.findProperty('PatientCorrelationTable'))
}</script>
        </con:config>
      </con:testStep>
      <con:testStep name="clear AAMapping table" type="groovy">
        <con:settings/>
        <con:config>
          <script>context.withSql('AAMappingDB') { sql -&gt; 
  sql.execute('delete from ' + context.findProperty('AAMappingTable'))
}</script>
        </con:config>
      </con:testStep>
      <con:testStep name="ModifyInterrnalConnectionInfoPE" type="groovy">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

//def destConfigFileLocation = context.findProperty("NHINGatewayConfigDir");
def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");//**** Redbox (remove later)
//**** mockHost is localhost because Groovy script resides in local machine ****
def mockHost = context.findProperty("mockHost");
def mockPEURL = "http://" + mockHost + ":11231/mockPE";
def LocalHCID = context.findProperty( "LocalHCID" );

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, LocalHCID, "policyengineservice", mockPEURL, context, log)</script>
        </con:config>
      </con:testStep>
      <con:testStep name="ModifyInternalConnectionInfoUsingTestHelper" type="groovy">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");
def mockHost = context.findProperty("mockHost");
def LocalHCID = context.findProperty( "LocalHCID" );
def RemoteHCID = context.findProperty("RemoteHCID");

def patientdiscoveryTestHelperURL = "https://" + NHINGatewayHost + ":8181/CONNECTGatewayTest/NhinPatientDiscoveryAsyncRespTestHelper";
def mockPatientDiscoveryAsyncReqQueueURL = "http://" + mockHost + ":8909/mockPDAsyncReqQueue";

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "PatientDiscoveryAsyncResp", patientdiscoveryTestHelperURL, context, log)
FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "mockpatientdiscoveryasyncresp", mockPatientDiscoveryAsyncReqQueueURL, context, log)</script>
        </con:config>
      </con:testStep>
      <con:testStep name="PatientDiscoveryAsyncReqQueue" type="request">
        <con:settings/>
        <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
          <con:interface>EntityPatientDiscoveryAsyncReqQueueBindingSoap</con:interface>
          <con:operation>AddPatientDiscoveryAsyncReq</con:operation>
          <con:request name="PatientDiscoveryAsyncReqQueue" useWsAddressing="true">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/&gt;</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#Endpoint-PDAsyncEntityReqQueue}</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soap:Header/>
   <soap:Body projectName="EntityRespondingPDAsyncReqQueueTestSuite" testCase="PDAsyncNoPatID">
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="T"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="1.1"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="2.2"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="1.1"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.16.840.1.113883.3.337" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="M"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="19990627"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">${#Project#PatientMatchFamilyName}</urn:family>
                           <urn:given partType="GIV">${#Project#PatientMatchGivenName}</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>                        
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>LEESBURG</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>20176</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19990627</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>2.16.840.1.113883.3.337</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>YOUNGER</urn1:familyName>
               <urn1:givenName>GALLOW</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
             <urn1:purposeOfDisclosureCoded>
               <urn1:code>PSYCHOTHERAPY</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>D123401^^^&amp;amp;2.16.840.1.113883.3.337&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>2.16.840.1.113883.3.337</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
         <!--Optional:-->
         <urn:NhinTargetCommunities>
            <!--1 or more repetitions:-->
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>?</urn1:description>
                  <urn1:homeCommunityId>${#Project#RemoteHCID}</urn1:homeCommunityId>
                  <urn1:name>?</urn1:name>
               </urn1:homeCommunity>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soap:Body>
</soap:Envelope>]]></con:request>
            <con:assertion type="SOAP Fault Assertion"/>
            <con:assertion name="Verify Receiver" type="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='urn:hl7-org:v3';
//ns2:MCCI_IN000002UV01[1]/ns2:receiver[1]/ns2:device[1]/ns2:asAgent[1]/ns2:representedOrganization[1]/ns2:id[1]/@root</path>
                <content>1.1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:assertion name="Verify Sender" type="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='urn:hl7-org:v3';
//ns2:MCCI_IN000002UV01[1]/ns2:sender[1]/ns2:device[1]/ns2:asAgent[1]/ns2:representedOrganization[1]/ns2:id[1]/@root</path>
                <content>1.1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:assertion name="Verify Message" type="XPath Match">
              <con:configuration>
                <path>declare namespace ns3='urn:hl7-org:v3';
//ns3:MCCI_IN000002UV01[1]/ns3:acknowledgement[1]/ns3:acknowledgementDetail[1]/ns3:text[1]/text()</path>
                <content>Success</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:assertion name="Verify RelatesTo" type="XPath Match">
              <con:configuration>
                <path>declare namespace ns1='http://www.w3.org/2005/08/addressing';
//ns1:RelatesTo[1]/text()</path>
                <content>uuid:5555555555.55555.555.55</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:gov:hhs:fha:nhinc:entitypatientdiscoveryasyncreqqueue:AddPatientDiscoveryAsyncReqAsyncRequest" addDefaultTo="true" messageID="uuid:5555555555.55555.555.55" mustUnderstand="TRUE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep name="Policy Engine Mock" type="mockresponse">
        <con:settings/>
        <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" startStep="PatientDiscoveryAsyncReqQueue" xsi:type="con:MockResponseStep">
          <con:interface>AdapterPolicyEngineBindingSoap</con:interface>
          <con:operation>CheckPolicy</con:operation>
          <con:path>/mockPE</con:path>
          <con:port>11231</con:port>
          <con:timeout>30000</con:timeout>
          <con:response>
            <con:settings/>
            <con:responseContent><![CDATA[<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns15:CheckPolicyResponse xmlns:ns2="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:ns3="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:ns4="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:ns5="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:ns6="http://www.hhs.gov/healthit/nhin/cdc" xmlns:ns7="http://nhinc.services.com/schema/auditmessage" xmlns:ns8="http://www.w3.org/2005/08/addressing" xmlns:ns9="http://docs.oasis-open.org/wsn/b-2" xmlns:ns10="urn:ihe:iti:xds-b:2007" xmlns:ns11="urn:gov:hhs:fha:nhinc:common:subscriptionb2overridefordocuments" xmlns:ns12="http://docs.oasis-open.org/wsrf/bf-2" xmlns:ns13="http://docs.oasis-open.org/wsn/t-1" xmlns:ns14="urn:oasis:names:tc:xacml:2.0:policy:schema:os" xmlns:ns15="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:ns16="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns17="urn:gov:hhs:fha:nhinc:common:subscriptionb2overrideforcdc" xmlns:ns18="urn:oasis:names:tc:xacml:2.0:context:schema:os" xmlns:ns19="http://schemas.xmlsoap.org/ws/2004/08/addressing">
         <ns15:response>
            <ns18:Result>
               <ns18:Decision>Permit</ns18:Decision>
            </ns18:Result>
         </ns15:response>
      </ns15:CheckPolicyResponse>
   </S:Body>
</S:Envelope>]]></con:responseContent>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
          </con:response>
          <con:assertion name="AuthnStatementAuthnInstant " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='authInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authInstant'
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-instant';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//sourceRequestHolder.namespaces['ec'] = 'hl7-org:v3';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthnStatementSessionIndex" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='sessionIndex';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:sessionIndex';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:session-index';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthnStatementAthnContextClassRef " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='authContextClassRef';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authContextClassRef';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-context-class-ref';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthnStatementSubjectLocalityAddress " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='subjectLocalityAddress';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityAddress';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:ip-address';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthnStatementDNSName " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='subjectLocalityDNSName';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityDNSName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:dns-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserPersonName" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='personname';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:userName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserOrganizationName" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='user organization';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:name';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-organization-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserRoleCode" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='user role coded';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code';
def XacmlAttributeId='urn:oasis:names:tc:xacml:2.0:subject:role';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserRoleCodeSystem " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='user role system';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserRoleCodeSystemName " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='user role system name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="UserRoleCodeDiplayName " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='user role display name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-description';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="PurposeForUseCode" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCode';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:purposeofuse';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="PurposeForUseCodeSystem" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCodeSystem';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="PurposeForUseCodeSystemName" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCodeSystemName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="PurposeForUseCodeDisplayName" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='PurposeForUseCodeDisplayName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementDecision" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementDecision';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementResource" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementResource';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementAction" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementAction';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:action';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
//log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);
def ExpectedValue='action';
//log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (ExpectedValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementEvidenceAssertionID " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionID';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementEvidenceAssertionIssueInstant" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssueInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementEvidenceAssertionVersion" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionVersion';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="AuthzDecisionStatementEvidenceAssertionIssuer" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssuer';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotBefore" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotBefore';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2001-01-01T06:00:00.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2009-05-07T02:00:17.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentReference " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentReference';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentType " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentType';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContent " type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="HomeCommunityId" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='home-community-id';
def AssertionXpath='//ec:assertion/nc:homeCommunity/nc:homeCommunityId';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:home-community-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion name="OrganizationId" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='organizationid';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:homeCommunityId';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:organization-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="PatientId" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='PatientId';
def XacmlAttributeId='http://www.hhs.gov/healthit/nhin#subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';
mockRequestHolder.namespaces['hl7'] = 'urn:hl7-org:v3';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValueExtension = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@extension"]
def ExpectedExtension = '1234';
log.info('XacmlAttributeValue(' + FieldName + '@extension)=' + XacmlValueExtension);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) =&gt; ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueExtension==ExpectedExtension);

def XacmlValueRoot = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@root"]
def ExpectedRoot = '2.2.2';
log.info('XacmlAttributeValue(' + FieldName + '@root)=' + XacmlValueRoot);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) =&gt; ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueRoot==ExpectedRoot);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'urn:hl7-org:v3#II';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionAccessConsent" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:accessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent" type="GroovyScriptAssertion">
            <con:configuration>
              <scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:instanceAccessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-instance-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
            </con:configuration>
          </con:assertion>
          <con:assertion disabled="true" type="XPath Match">
            <con:configuration>
              <path>declare namespace ns19='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns18:CheckPolicyRequest[1]/ns18:request[1]/ns19:Subject[2]/ns19:Attribute[1]/@AttributeId</path>
              <content>urn:gov:hhs:fha:nhinc:home-community-id</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
          <con:assertion name="assigning authority" type="XPath Match">
            <con:configuration>
              <path>declare namespace ns11='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns9='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns9:CheckPolicyRequest[1]/ns9:request[1]/ns11:Resource[1]/ns11:Attribute[1]/ns11:AttributeValue[1]</path>
              <content>1.1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
          <con:assertion name="local patient id" type="XPath Match">
            <con:configuration>
              <path>declare namespace ns11='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns9='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns9:CheckPolicyRequest[1]/ns9:request[1]/ns11:Resource[1]/ns11:Attribute[2]/ns11:AttributeValue[1]</path>
              <content>D123401</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
        </con:config>
      </con:testStep>
      <con:testStep name="PatientDiscoveryAsyncReqQueueMockResponse" type="mockresponse">
        <con:settings/>
        <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" startStep="PatientDiscoveryAsyncReqQueue" xsi:type="con:MockResponseStep">
          <con:interface>NhincProxyPatientDiscoveryAsyncRespBinding</con:interface>
          <con:operation>Proxy_ProcessPatientDiscoveryAsyncResp</con:operation>
          <con:path>/mockPDAsyncReqQueue</con:path>
          <con:port>8909</con:port>
          <con:response>
            <con:settings/>
            <con:responseContent><![CDATA[<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Header>
      <To xmlns="http://www.w3.org/2005/08/addressing">http://www.w3.org/2005/08/addressing/anonymous</To>
      <Action xmlns="http://www.w3.org/2005/08/addressing">urn:gov:hhs:fha:nhinc:entitypatientdiscoveryasyncreqqueue:AddPatientDiscoveryAsyncReqAsyncResponse</Action>
      <MessageID xmlns="http://www.w3.org/2005/08/addressing">uuid:0928e4f6-561a-4111-89b6-c0cc571c0a48</MessageID>
      <RelatesTo xmlns="http://www.w3.org/2005/08/addressing">uuid:5555555555.55555.555.55</RelatesTo>
   </S:Header>
   <S:Body>
      <ns2:MCCI_IN000002UV01 ITSVersion="XML_1.0" xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="urn:hl7-org:v3" xmlns:ns3="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:patientcorrelationfacade">
         <ns2:id extension="-5ce0b37f:12863b7180e:-7e39" root="1.1"/>
         <ns2:creationTime value="201054201755"/>
         <ns2:interactionId extension="MCCIIN000002UV01" root="2.16.840.1.113883.1.6"/>
         <ns2:processingCode code="T"/>
         <ns2:processingModeCode code="T"/>
         <ns2:acceptAckCode code="NE"/>
         <ns2:receiver typeCode="RCV">
            <ns2:device determinerCode="INSTANCE" classCode="">
               <ns2:id root="1.2.345.678.999"/>
               <ns2:asAgent classCode="AGNT">
                  <ns2:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns2:id root="1.1"/>
                  </ns2:representedOrganization>
               </ns2:asAgent>
            </ns2:device>
         </ns2:receiver>
         <ns2:sender typeCode="SND">
            <ns2:device determinerCode="INSTANCE" classCode="">
               <ns2:id root="1.2.345.678.999"/>
               <ns2:asAgent classCode="AGNT">
                  <ns2:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns2:id root="1.1"/>
                  </ns2:representedOrganization>
               </ns2:asAgent>
            </ns2:device>
         </ns2:sender>
         <ns2:acknowledgement>
            <ns2:typeCode code="CA"/>
            <ns2:targetMessage>
               <ns2:id extension="-5ce0b37f:12863b7180e:-7e40" root="1.1"/>
            </ns2:targetMessage>
            <ns2:acknowledgementDetail>
               <ns2:text>Success</ns2:text>
            </ns2:acknowledgementDetail>
         </ns2:acknowledgement>
      </ns2:MCCI_IN000002UV01>
   </S:Body>
</S:Envelope>]]></con:responseContent>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
          </con:response>
        </con:config>
      </con:testStep>
      <con:testStep name="count Correlations (0)" type="groovy">
        <con:settings/>
        <con:config>
          <script>context.withSql('PatientCorrelationDB') { sql -&gt; 
  assert 0 == sql.firstRow('select count(*) from ' + context.findProperty('PatientCorrelationTable'))[0]
}</script>
        </con:config>
      </con:testStep>
      <con:testStep name="count AAMapping (1)" type="groovy">
        <con:settings/>
        <con:config>
          <script>context.withSql('AAMappingDB') { sql -&gt; 
  assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('AAMappingTable'))[0]
}</script>
        </con:config>
      </con:testStep>
      <con:testStep name="Restore Configurations" type="groovy">
        <con:settings/>
        <con:config>
          <script/>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>LocalHCID</con:name>
          <con:value>1.1</con:value>
        </con:property>
        <con:property>
          <con:name>LocalAA</con:name>
          <con:value>1.1</con:value>
        </con:property>
        <con:property>
          <con:name>LocalHCDescription</con:name>
          <con:value>InternalTest1</con:value>
        </con:property>
        <con:property>
          <con:name>LocalPatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>RemoteHCID</con:name>
          <con:value>2.2</con:value>
        </con:property>
        <con:property>
          <con:name>RemoteAA</con:name>
          <con:value>2.2</con:value>
        </con:property>
        <con:property>
          <con:name>RemoteHCDescription</con:name>
          <con:value>InternalTest2</con:value>
        </con:property>
        <con:property>
          <con:name>RemotePatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>NHINGatewayConfigDir</con:name>
          <con:value>C:/Sun/AppServer/domains/domain1/config/nhin</con:value>
        </con:property>
        <con:property>
          <con:name>MPIDir</con:name>
          <con:value>C:/Sun/AppServer/domains/domain1/config</con:value>
        </con:property>
        <con:property>
          <con:name>LocalConfigDir</con:name>
          <con:value>C:/SelfTest/EndToEndSelfTest</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-DocQuery</con:name>
          <con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityDocQueryUnsecured</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-DocRetrieve</con:name>
          <con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityDocRetrieve</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-Reidentification</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntitySubjectDiscovery</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-Subscribe</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntityNotificationProducer</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-Notify</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntityNotificationConsumer</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-Unsubscribe</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntitySubscriptionManager</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-AuditLogQuery</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntityAuditQuery</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-PatientDiscoveryAsyncReq</con:name>
          <con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityPatientDiscoveryDeferredRequestUnsecured</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-PatientDiscoveryAsyncResp</con:name>
          <con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityPatientDiscoveryDeferredResponseUnsecured</con:value>
        </con:property>
        <con:property>
          <con:name>DBHost</con:name>
          <con:value>localhost</con:value>
        </con:property>
        <con:property>
          <con:name>DBPort</con:name>
          <con:value>3306</con:value>
        </con:property>
        <con:property>
          <con:name>DBUser</con:name>
          <con:value>nhincuser</con:value>
        </con:property>
        <con:property>
          <con:name>DBPass</con:name>
          <con:value>nhincpass</con:value>
        </con:property>
        <con:property>
          <con:name>PatientCorrelationDB</con:name>
          <con:value>patientcorrelationdb</con:value>
        </con:property>
        <con:property>
          <con:name>PatientCorrelationTable</con:name>
          <con:value>correlatedidentifiers</con:value>
        </con:property>
        <con:property>
          <con:name>SubscriptionDB</con:name>
          <con:value>subscriptionrepository</con:value>
        </con:property>
        <con:property>
          <con:name>SubscriptionTable</con:name>
          <con:value>subscription</con:value>
        </con:property>
        <con:property>
          <con:name>AAMappingDB</con:name>
          <con:value>assigningauthoritydb</con:value>
        </con:property>
        <con:property>
          <con:name>AAMappingTable</con:name>
          <con:value>aa_to_home_community_mapping</con:value>
        </con:property>
        <con:property>
          <con:name>AsyncMsgDB</con:name>
          <con:value>asyncmsgs</con:value>
        </con:property>
        <con:property>
          <con:name>AsyncMsgTable</con:name>
          <con:value>asyncmsgrepo</con:value>
        </con:property>
        <con:property>
          <con:name>PseudonymAA</con:name>
          <con:value>ABC</con:value>
        </con:property>
        <con:property>
          <con:name>PseudonymPatientID</con:name>
          <con:value>PSEUDO001</con:value>
        </con:property>
        <con:property>
          <con:name>RealAA</con:name>
          <con:value>1.1.1</con:value>
        </con:property>
        <con:property>
          <con:name>RealPatientID</con:name>
          <con:value>D1234010050</con:value>
        </con:property>
        <con:property>
          <con:name>DQDocID</con:name>
          <con:value>1.123401.11111</con:value>
        </con:property>
        <con:property>
          <con:name>DQPatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>DynamicDQDocID</con:name>
          <con:value>103.8.9284320.020.3590.75^1266324032288</con:value>
        </con:property>
        <con:property>
          <con:name>DRDocID</con:name>
          <con:value>1.123407.777777</con:value>
        </con:property>
        <con:property>
          <con:name>DRRepoID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NotificationEndpoint</con:name>
          <con:value>https://localhost:8181/CONNECTNhinServicesWeb/NhinService/NotificationConsumerService/HiemNotify</con:value>
        </con:property>
        <con:property>
          <con:name>SubscriptionEndpoint</con:name>
          <con:value>https://localhost:8181/CONNECTNhinServicesWeb/NhinService/NotificationProducerService/HiemSubscription</con:value>
        </con:property>
        <con:property>
          <con:name>SubscribePatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>NotifySubscriptionID</con:name>
          <con:value>-f7c1a5d:1204e50e42e:-79eb</con:value>
        </con:property>
        <con:property>
          <con:name>NotifySubscriptionManagerEndpointAddress</con:name>
          <con:value>https://localhost:8181/CONNECTNhinServicesWeb/NhinService/SubscriptionManagerService/HiemUnsubscribe</con:value>
        </con:property>
        <con:property>
          <con:name>UnSubscriptionID</con:name>
          <con:value>3e74139f-5271-4db1-98c0-88748fa3e4e3</con:value>
        </con:property>
        <con:property>
          <con:name>SubscriptionManagerEndpointAddress</con:name>
          <con:value>https://localhost:8181/CONNECTNhinServicesWeb/NhinService/SubscriptionManagerService/HiemUnsubscribe</con:value>
        </con:property>
        <con:property>
          <con:name>AQUserID</con:name>
          <con:value>kskagerb</con:value>
        </con:property>
        <con:property>
          <con:name>AQPatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-EntityXDRRequest</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntityProxyService/EntityXDRRequest</con:value>
        </con:property>
        <con:property>
          <con:name>Gender</con:name>
          <con:value>M</con:value>
        </con:property>
        <con:property>
          <con:name>BirthTime</con:name>
          <con:value>19630804</con:value>
        </con:property>
        <con:property>
          <con:name>FamilyName</con:name>
          <con:value>Younger</con:value>
        </con:property>
        <con:property>
          <con:name>GivenName</con:name>
          <con:value>Gallow</con:value>
        </con:property>
        <con:property>
          <con:name>SubjectID</con:name>
          <con:value>1111</con:value>
        </con:property>
        <con:property>
          <con:name>UniquePatientId</con:name>
          <con:value>1111^^^&amp;amp;1.1&amp;amp;ISO</con:value>
        </con:property>
        <con:property>
          <con:name>StreetAddress</con:name>
          <con:value>123 Johnson Rd</con:value>
        </con:property>
        <con:property>
          <con:name>City</con:name>
          <con:value>Melbourne</con:value>
        </con:property>
        <con:property>
          <con:name>State</con:name>
          <con:value>FL</con:value>
        </con:property>
        <con:property>
          <con:name>ZipCode</con:name>
          <con:value>12345</con:value>
        </con:property>
        <con:property>
          <con:name>Country</con:name>
          <con:value>US</con:value>
        </con:property>
        <con:property>
          <con:name>SSN</con:name>
          <con:value>123456789</con:value>
        </con:property>
        <con:property>
          <con:name>PurposeOfDisclosure</con:name>
          <con:value>Mental</con:value>
        </con:property>
        <con:property>
          <con:name>ExpirationDate</con:name>
          <con:value>20100520</con:value>
        </con:property>
        <con:property>
          <con:name>DOB</con:name>
          <con:value>19800516</con:value>
        </con:property>
        <con:property>
          <con:name>DateOfSignature</con:name>
          <con:value>20080520&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r3844</con:value>
        </con:property>
        <con:property>
          <con:name>startDate</con:name>
          <con:value>2010-08-31T17:09:28Z</con:value>
        </con:property>
        <con:property>
          <con:name>endDate</con:name>
          <con:value>2010-08-31T17:19:28Z</con:value>
        </con:property>
        <con:property>
          <con:name>sigDate</con:name>
          <con:value>08/31/2010 17:09:28</con:value>
        </con:property>
        <con:property>
          <con:name>expireDate</con:name>
          <con:value>2010-09-30T00:00:00Z</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="084c037f-9f92-492e-b0ad-d9d7069e5f24" keepSession="false" maxResults="0" name="PolicyCheckMockPermit-NoMatch" searchProperties="true">
      <con:settings/>
      <con:testStep name="clear Correlation table" type="groovy">
        <con:settings/>
        <con:config>
          <script>context.withSql('PatientCorrelationDB') { sql -&gt; 
  sql.execute('delete from ' + context.findProperty('PatientCorrelationTable'))
}</script>
        </con:config>
      </con:testStep>
      <con:testStep name="clear AAMapping table" type="groovy">
        <con:settings/>
        <con:config>
          <script>context.withSql('AAMappingDB') { sql -&gt; 
  sql.execute('delete from ' + context.findProperty('AAMappingTable'))
}</script>
        </con:config>
      </con:testStep>
      <con:testStep name="ModifyInternalConnectionInfoUsingTestHelper" type="groovy">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");
def mockHost = context.findProperty("mockHost");
def LocalHCID = context.findProperty( "LocalHCID" );
def RemoteHCID = context.findProperty("RemoteHCID");

def patientdiscoveryTestHelperURL = "https://" + NHINGatewayHost + ":8181/CONNECTGatewayTest/NhinPatientDiscoveryAsyncRespTestHelper";
def mockPatientDiscoveryAsyncReqQueueURL = "http://" + mockHost + ":8909/mockPDAsyncReqQueue";

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "PatientDiscoveryAsyncResp", patientdiscoveryTestHelperURL, context, log)
FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "mockpatientdiscoveryasyncresp", mockPatientDiscoveryAsyncReqQueueURL, context, log)</script>
        </con:config>
      </con:testStep>
      <con:testStep name="PatientDiscoveryAsyncReqQueue" type="request">
        <con:settings/>
        <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
          <con:interface>EntityPatientDiscoveryAsyncReqQueueBindingSoap</con:interface>
          <con:operation>AddPatientDiscoveryAsyncReq</con:operation>
          <con:request name="PatientDiscoveryAsyncReqQueue" useWsAddressing="true">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/&gt;</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#Endpoint-PDAsyncEntityReqQueue}</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soap:Header/>
   <soap:Body projectName="EntityRespondingPDAsyncReqQueueTestSuite" testCase="PolicyCheckMockPermit-NoMatch">
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="T"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="1.1"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="2.2"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="1.1"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.16.840.1.113883.3.337" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="M"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="19990627"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">${#Project#PatientNoMatchFamilyName}</urn:family>
                           <urn:given partType="GIV">${#Project#PatientNoMatchGivenName}</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value root="1.1" extension="D11111"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>LEESBURG</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>20176</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19990627</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>2.16.840.1.113883.3.337</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>YOUNGER</urn1:familyName>
               <urn1:givenName>GALLOW</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
             <urn1:purposeOfDisclosureCoded>
               <urn1:code>PSYCHOTHERAPY</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>D123401^^^&amp;amp;2.16.840.1.113883.3.337&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>2.16.840.1.113883.3.337</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
         <!--Optional:-->
         <urn:NhinTargetCommunities>
            <!--1 or more repetitions:-->
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>?</urn1:description>
                  <urn1:homeCommunityId>${#Project#RemoteHCID}</urn1:homeCommunityId>
                  <urn1:name>?</urn1:name>
               </urn1:homeCommunity>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soap:Body>
</soap:Envelope>]]></con:request>
            <con:assertion type="SOAP Fault Assertion"/>
            <con:assertion name="Verify Receiver" type="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='urn:hl7-org:v3';
//ns2:MCCI_IN000002UV01[1]/ns2:receiver[1]/ns2:device[1]/ns2:asAgent[1]/ns2:representedOrganization[1]/ns2:id[1]/@root</path>
                <content>1.1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:assertion name="Verify Sender" type="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='urn:hl7-org:v3';
//ns2:MCCI_IN000002UV01[1]/ns2:sender[1]/ns2:device[1]/ns2:asAgent[1]/ns2:representedOrganization[1]/ns2:id[1]/@root</path>
                <content>1.1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:assertion name="Verify Message" type="XPath Match">
              <con:configuration>
                <path>declare namespace ns3='urn:hl7-org:v3';
//ns3:MCCI_IN000002UV01[1]/ns3:acknowledgement[1]/ns3:acknowledgementDetail[1]/ns3:text[1]/text()</path>
                <content>Success</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:assertion name="Verify RelatesTo" type="XPath Match">
              <con:configuration>
                <path>declare namespace ns1='http://www.w3.org/2005/08/addressing';
//ns1:RelatesTo[1]/text()</path>
                <content>uuid:5555555555.55555.555.55</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:gov:hhs:fha:nhinc:entitypatientdiscoveryasyncreqqueue:AddPatientDiscoveryAsyncReqAsyncRequest" addDefaultTo="true" messageID="uuid:5555555555.55555.555.55" mustUnderstand="TRUE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep name="PatientDiscoveryAsyncReqQueueMockResponse" type="mockresponse">
        <con:settings/>
        <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" startStep="PatientDiscoveryAsyncReqQueue" xsi:type="con:MockResponseStep">
          <con:interface>NhincProxyPatientDiscoveryAsyncRespBinding</con:interface>
          <con:operation>Proxy_ProcessPatientDiscoveryAsyncResp</con:operation>
          <con:path>/mockPDAsyncReqQueue</con:path>
          <con:port>8909</con:port>
          <con:response>
            <con:settings/>
            <con:responseContent><![CDATA[<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Header>
      <To xmlns="http://www.w3.org/2005/08/addressing">http://www.w3.org/2005/08/addressing/anonymous</To>
      <Action xmlns="http://www.w3.org/2005/08/addressing">urn:gov:hhs:fha:nhinc:entitypatientdiscoveryasyncreqqueue:AddPatientDiscoveryAsyncReqAsyncResponse</Action>
      <MessageID xmlns="http://www.w3.org/2005/08/addressing">uuid:0928e4f6-561a-4111-89b6-c0cc571c0a48</MessageID>
      <RelatesTo xmlns="http://www.w3.org/2005/08/addressing">uuid:5555555555.55555.555.55</RelatesTo>
   </S:Header>
   <S:Body>
      <ns2:MCCI_IN000002UV01 ITSVersion="XML_1.0" xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="urn:hl7-org:v3" xmlns:ns3="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:patientcorrelationfacade">
         <ns2:id extension="-5ce0b37f:12863b7180e:-7e39" root="1.1"/>
         <ns2:creationTime value="201054201755"/>
         <ns2:interactionId extension="MCCIIN000002UV01" root="2.16.840.1.113883.1.6"/>
         <ns2:processingCode code="T"/>
         <ns2:processingModeCode code="T"/>
         <ns2:acceptAckCode code="NE"/>
         <ns2:receiver typeCode="RCV">
            <ns2:device determinerCode="INSTANCE" classCode="">
               <ns2:id root="1.2.345.678.999"/>
               <ns2:asAgent classCode="AGNT">
                  <ns2:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns2:id root="1.1"/>
                  </ns2:representedOrganization>
               </ns2:asAgent>
            </ns2:device>
         </ns2:receiver>
         <ns2:sender typeCode="SND">
            <ns2:device determinerCode="INSTANCE" classCode="">
               <ns2:id root="1.2.345.678.999"/>
               <ns2:asAgent classCode="AGNT">
                  <ns2:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns2:id root="1.1"/>
                  </ns2:representedOrganization>
               </ns2:asAgent>
            </ns2:device>
         </ns2:sender>
         <ns2:acknowledgement>
            <ns2:typeCode code="CA"/>
            <ns2:targetMessage>
               <ns2:id extension="-5ce0b37f:12863b7180e:-7e40" root="1.1"/>
            </ns2:targetMessage>
            <ns2:acknowledgementDetail>
               <ns2:text>Success</ns2:text>
            </ns2:acknowledgementDetail>
         </ns2:acknowledgement>
      </ns2:MCCI_IN000002UV01>
   </S:Body>
</S:Envelope>]]></con:responseContent>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
          </con:response>
        </con:config>
      </con:testStep>
      <con:testStep name="count Correlations (0)" type="groovy">
        <con:settings/>
        <con:config>
          <script>context.withSql('PatientCorrelationDB') { sql -&gt; 
  assert 0 == sql.firstRow('select count(*) from ' + context.findProperty('PatientCorrelationTable'))[0]
}</script>
        </con:config>
      </con:testStep>
      <con:testStep name="count AAMapping (1)" type="groovy">
        <con:settings/>
        <con:config>
          <script>context.withSql('AAMappingDB') { sql -&gt; 
  assert 0 == sql.firstRow('select count(*) from ' + context.findProperty('AAMappingTable'))[0]
}</script>
        </con:config>
      </con:testStep>
      <con:testStep name="Restore Configurations" type="groovy">
        <con:settings/>
        <con:config>
          <script/>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>LocalHCID</con:name>
          <con:value>1.1</con:value>
        </con:property>
        <con:property>
          <con:name>LocalAA</con:name>
          <con:value>1.1</con:value>
        </con:property>
        <con:property>
          <con:name>LocalHCDescription</con:name>
          <con:value>InternalTest1</con:value>
        </con:property>
        <con:property>
          <con:name>LocalPatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>RemoteHCID</con:name>
          <con:value>2.2</con:value>
        </con:property>
        <con:property>
          <con:name>RemoteAA</con:name>
          <con:value>2.2</con:value>
        </con:property>
        <con:property>
          <con:name>RemoteHCDescription</con:name>
          <con:value>InternalTest2</con:value>
        </con:property>
        <con:property>
          <con:name>RemotePatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>NHINGatewayConfigDir</con:name>
          <con:value>C:/Sun/AppServer/domains/domain1/config/nhin</con:value>
        </con:property>
        <con:property>
          <con:name>MPIDir</con:name>
          <con:value>C:/Sun/AppServer/domains/domain1/config</con:value>
        </con:property>
        <con:property>
          <con:name>LocalConfigDir</con:name>
          <con:value>C:/SelfTest/EndToEndSelfTest</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-DocQuery</con:name>
          <con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityDocQueryUnsecured</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-DocRetrieve</con:name>
          <con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityDocRetrieve</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-Reidentification</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntitySubjectDiscovery</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-Subscribe</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntityNotificationProducer</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-Notify</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntityNotificationConsumer</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-Unsubscribe</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntitySubscriptionManager</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-AuditLogQuery</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntityAuditQuery</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-PatientDiscoveryAsyncReq</con:name>
          <con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityPatientDiscoveryDeferredRequestUnsecured</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-PatientDiscoveryAsyncResp</con:name>
          <con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityPatientDiscoveryDeferredResponseUnsecured</con:value>
        </con:property>
        <con:property>
          <con:name>DBHost</con:name>
          <con:value>localhost</con:value>
        </con:property>
        <con:property>
          <con:name>DBPort</con:name>
          <con:value>3306</con:value>
        </con:property>
        <con:property>
          <con:name>DBUser</con:name>
          <con:value>nhincuser</con:value>
        </con:property>
        <con:property>
          <con:name>DBPass</con:name>
          <con:value>nhincpass</con:value>
        </con:property>
        <con:property>
          <con:name>PatientCorrelationDB</con:name>
          <con:value>patientcorrelationdb</con:value>
        </con:property>
        <con:property>
          <con:name>PatientCorrelationTable</con:name>
          <con:value>correlatedidentifiers</con:value>
        </con:property>
        <con:property>
          <con:name>SubscriptionDB</con:name>
          <con:value>subscriptionrepository</con:value>
        </con:property>
        <con:property>
          <con:name>SubscriptionTable</con:name>
          <con:value>subscription</con:value>
        </con:property>
        <con:property>
          <con:name>AAMappingDB</con:name>
          <con:value>assigningauthoritydb</con:value>
        </con:property>
        <con:property>
          <con:name>AAMappingTable</con:name>
          <con:value>aa_to_home_community_mapping</con:value>
        </con:property>
        <con:property>
          <con:name>AsyncMsgDB</con:name>
          <con:value>asyncmsgs</con:value>
        </con:property>
        <con:property>
          <con:name>AsyncMsgTable</con:name>
          <con:value>asyncmsgrepo</con:value>
        </con:property>
        <con:property>
          <con:name>PseudonymAA</con:name>
          <con:value>ABC</con:value>
        </con:property>
        <con:property>
          <con:name>PseudonymPatientID</con:name>
          <con:value>PSEUDO001</con:value>
        </con:property>
        <con:property>
          <con:name>RealAA</con:name>
          <con:value>1.1.1</con:value>
        </con:property>
        <con:property>
          <con:name>RealPatientID</con:name>
          <con:value>D1234010050</con:value>
        </con:property>
        <con:property>
          <con:name>DQDocID</con:name>
          <con:value>1.123401.11111</con:value>
        </con:property>
        <con:property>
          <con:name>DQPatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>DynamicDQDocID</con:name>
          <con:value>103.8.9284320.020.3590.75^1266324032288</con:value>
        </con:property>
        <con:property>
          <con:name>DRDocID</con:name>
          <con:value>1.123407.777777</con:value>
        </con:property>
        <con:property>
          <con:name>DRRepoID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NotificationEndpoint</con:name>
          <con:value>https://localhost:8181/CONNECTNhinServicesWeb/NhinService/NotificationConsumerService/HiemNotify</con:value>
        </con:property>
        <con:property>
          <con:name>SubscriptionEndpoint</con:name>
          <con:value>https://localhost:8181/CONNECTNhinServicesWeb/NhinService/NotificationProducerService/HiemSubscription</con:value>
        </con:property>
        <con:property>
          <con:name>SubscribePatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>NotifySubscriptionID</con:name>
          <con:value>-f7c1a5d:1204e50e42e:-79eb</con:value>
        </con:property>
        <con:property>
          <con:name>NotifySubscriptionManagerEndpointAddress</con:name>
          <con:value>https://localhost:8181/CONNECTNhinServicesWeb/NhinService/SubscriptionManagerService/HiemUnsubscribe</con:value>
        </con:property>
        <con:property>
          <con:name>UnSubscriptionID</con:name>
          <con:value>3e74139f-5271-4db1-98c0-88748fa3e4e3</con:value>
        </con:property>
        <con:property>
          <con:name>SubscriptionManagerEndpointAddress</con:name>
          <con:value>https://localhost:8181/CONNECTNhinServicesWeb/NhinService/SubscriptionManagerService/HiemUnsubscribe</con:value>
        </con:property>
        <con:property>
          <con:name>AQUserID</con:name>
          <con:value>kskagerb</con:value>
        </con:property>
        <con:property>
          <con:name>AQPatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-EntityXDRRequest</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntityProxyService/EntityXDRRequest</con:value>
        </con:property>
        <con:property>
          <con:name>Gender</con:name>
          <con:value>M</con:value>
        </con:property>
        <con:property>
          <con:name>BirthTime</con:name>
          <con:value>19630804</con:value>
        </con:property>
        <con:property>
          <con:name>FamilyName</con:name>
          <con:value>Younger</con:value>
        </con:property>
        <con:property>
          <con:name>GivenName</con:name>
          <con:value>Gallow</con:value>
        </con:property>
        <con:property>
          <con:name>SubjectID</con:name>
          <con:value>1111</con:value>
        </con:property>
        <con:property>
          <con:name>UniquePatientId</con:name>
          <con:value>1111^^^&amp;amp;1.1&amp;amp;ISO</con:value>
        </con:property>
        <con:property>
          <con:name>StreetAddress</con:name>
          <con:value>123 Johnson Rd</con:value>
        </con:property>
        <con:property>
          <con:name>City</con:name>
          <con:value>Melbourne</con:value>
        </con:property>
        <con:property>
          <con:name>State</con:name>
          <con:value>FL</con:value>
        </con:property>
        <con:property>
          <con:name>ZipCode</con:name>
          <con:value>12345</con:value>
        </con:property>
        <con:property>
          <con:name>Country</con:name>
          <con:value>US</con:value>
        </con:property>
        <con:property>
          <con:name>SSN</con:name>
          <con:value>123456789</con:value>
        </con:property>
        <con:property>
          <con:name>PurposeOfDisclosure</con:name>
          <con:value>Mental</con:value>
        </con:property>
        <con:property>
          <con:name>ExpirationDate</con:name>
          <con:value>20100520</con:value>
        </con:property>
        <con:property>
          <con:name>DOB</con:name>
          <con:value>19800516</con:value>
        </con:property>
        <con:property>
          <con:name>DateOfSignature</con:name>
          <con:value>20080520&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r3844</con:value>
        </con:property>
        <con:property>
          <con:name>startDate</con:name>
          <con:value>2010-08-31T17:09:36Z</con:value>
        </con:property>
        <con:property>
          <con:name>endDate</con:name>
          <con:value>2010-08-31T17:19:36Z</con:value>
        </con:property>
        <con:property>
          <con:name>sigDate</con:name>
          <con:value>08/31/2010 17:09:36</con:value>
        </con:property>
        <con:property>
          <con:name>expireDate</con:name>
          <con:value>2010-09-30T00:00:00Z</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" id="8b925dba-1266-4e96-add9-7ca8db04651c" keepSession="false" maxResults="0" name="EntityPDAsyncReqQueryAuditLog" searchProperties="true">
      <con:settings/>
      <con:testStep disabled="true" name="Patient Discovery Async Resp" type="request">
        <con:settings/>
        <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
          <con:interface>EntityPatientDiscoveryAsyncRespBindingSoap</con:interface>
          <con:operation>ProcessPatientDiscoveryAsyncResp</con:operation>
          <con:request name="Patient Discovery Async Resp">
            <con:settings/>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#Endpoint-PDAsyncEntityResp}</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soap:Header xmlns:add="http://www.w3.org/2005/08/addressing">
      <add:Action>urn:gov:hhs:fha:nhinc:entitypatientdiscoveryasyncresp:ProcessPatientDiscoveryAsyncRespAsyncRequest</add:Action>
      <add:MessageID>uuid:12bcfc1e-f422-4d1d-af99-ff83d050313e</add:MessageID>
      <add:RelatesTo>uuid:22222222222.22222.222.22</add:RelatesTo>
      <add:To>http://localhost:8080/CONNECTMsgProxyWeb/MsgProxy/NhincProxyPatientDiscoveryAsyncResp</add:To>
   </soap:Header>
   <soap:Body>
      <urn:RespondingGateway_PRPA_IN201306UV02Request>
         <urn:PRPA_IN201306UV02 ITSVersion="XML_1.0">
            <urn:id root="2.2" extension="-5a3e95b1:11d1fa33d45:-8e45"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201306UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="T"/>
            <urn:acceptAckCode code="AL"/>
            <!--1 or more repetitions:-->
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="1.1"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="1.1"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <urn:code codeSystem="2.16.840.1.113883.1.6" code="PRPA_TE201306UV"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="1.1"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:subject typeCode="SUBJ">
                  <urn:registrationEvent classCode="REG" moodCode="EVN">
                     <urn:id nullFlavor="NA"/>
                     <urn:statusCode code="active"/>
                     <urn:subject1 typeCode="SBJ">
                        <urn:patient classCode="PAT">
                           <urn:id extension="D123402" root="2.2"/>
                           <urn:statusCode code="SD"/>
                           <urn:patientPerson>
                              <urn:name>
                                 <urn:family partType="FAM">Younger</urn:family>
                                 <urn:given partType="GIV">Gallow</urn:given>
                              </urn:name>
                              <urn:administrativeGenderCode code="M"/>
                              <urn:birthTime value="19990627"/>
                              <urn:addr>
                                 <urn:city>LEESBURG</urn:city>
                                 <urn:state>VA</urn:state>
                                 <urn:postalCode>20176</urn:postalCode>
                              </urn:addr>
                           </urn:patientPerson>
                           <urn:providerOrganization determinerCode="" classCode="">
                              <urn:id root="2.2"/>
                              <urn:contactParty xsi:nil="true" classCode="CON" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                           </urn:providerOrganization>
                        </urn:patient>
                     </urn:subject1>
                     <urn:custodian typeCode="">
                        <urn:assignedEntity classCode="">
                           <urn:id root="2.2"/>
                        </urn:assignedEntity>
                     </urn:custodian>
                  </urn:registrationEvent>
               </urn:subject>
               <urn:queryAck>
                  <urn:queryId extension="-abd3453dcd24wkkks545" root="2.2"/>
                  <urn:queryResponseCode code="OK"/>
                  <urn:resultTotalQuantity value="1"/>
                  <urn:resultCurrentQuantity value="1"/>
                  <urn:resultRemainingQuantity value="0"/>
               </urn:queryAck>
               <urn:queryByParameter>
                  <urn:queryId extension="-abd3453dcd24wkkks545" root="2.2"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="M"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="19630804"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectId>
                        <urn:value extension="D123401" root="1.1"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">Younger</urn:family>
                           <urn:given partType="GIV">Gallow</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectName>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201306UV02>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>LEESBURG</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>20176</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19990627</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>2.16.840.1.113883.3.337</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>YOUNGER</urn1:familyName>
               <urn1:givenName>GALLOW</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:purposeOfDisclosure>Mental</urn1:purposeOfDisclosure>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>D123401^^^&amp;amp;2.16.840.1.113883.3.337&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>2.16.840.1.113883.3.337</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
         <urn:NhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>${#Project#RemoteHCDescription}</urn1:description>
                  <urn1:homeCommunityId>${#Project#RemoteHCID}</urn1:homeCommunityId>
                  <urn1:name>${#Project#RemoteHCDescription}</urn1:name>
               </urn1:homeCommunity>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
      </urn:RespondingGateway_PRPA_IN201306UV02Request>
   </soap:Body>
</soap:Envelope>]]></con:request>
            <con:assertion type="SOAP Response"/>
            <con:assertion type="SOAP Fault Assertion"/>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep name="clear audit table" type="groovy"><con:settings/><con:config><script>context.withSql('AuditDB') { sql -&gt; 
  sql.execute('delete from ' + context.findProperty('AuditTable'))
}</script></con:config></con:testStep>
      <con:testStep name="clear Correlation table" type="groovy">
        <con:settings/>
        <con:config>
          <script>context.withSql('PatientCorrelationDB') { sql -&gt; 
  sql.execute('delete from ' + context.findProperty('PatientCorrelationTable'))
}</script>
        </con:config>
      </con:testStep>
      <con:testStep name="clear AAMapping table" type="groovy">
        <con:settings/>
        <con:config>
          <script>context.withSql('AAMappingDB') { sql -&gt; 
  sql.execute('delete from ' + context.findProperty('AAMappingTable'))
}</script>
        </con:config>
      </con:testStep>
      <con:testStep name="Generate patient ID for Audit Log Query" type="groovy">
        <con:settings/>
        <con:config>
          <script>def localAA = context.findProperty('LocalAA')
def PatientID = context.findProperty('PDPatientID')

context.testCase.setPropertyValue('FullPatientID', "${PatientID}^^^&amp;amp;${localAA}&amp;amp;ISO");</script>
        </con:config>
      </con:testStep>
      <con:testStep name="get User ID" type="groovy">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def UserID = context.findProperty( "PDUserID" );

def nowDate = new Date();
context.testCase.setPropertyValue('AsyncPDUserID',"${UserID}${nowDate}");</script>
        </con:config>
      </con:testStep>
      <con:testStep name="ModifyInternalConnectionInfoUsingTestHelper" type="groovy">
        <con:settings/>
        <con:config>
          <script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

def destConfigFileLocation = System.env['NHINC_PROPERTIES_DIR'];
def NHINGatewayHost = context.findProperty("NHINGatewayHost");
def mockHost = context.findProperty("mockHost");
def LocalHCID = context.findProperty( "LocalHCID" );
def RemoteHCID = context.findProperty("RemoteHCID");

def patientdiscoveryTestHelperURL = "https://" + NHINGatewayHost + ":8181/CONNECTGatewayTest/NhinPatientDiscoveryAsyncRespTestHelper";
def mockPatientDiscoveryAsyncReqQueueURL = "http://" + mockHost + ":8909/mockPDAsyncReqQueue";

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "PatientDiscoveryAsyncResp", patientdiscoveryTestHelperURL, context, log)
FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "mockpatientdiscoveryasyncresp", mockPatientDiscoveryAsyncReqQueueURL, context, log)</script>
        </con:config>
      </con:testStep>
      <con:testStep name="PatientDiscoveryAsyncReqQueue" type="request">
        <con:settings/>
        <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
          <con:interface>EntityPatientDiscoveryAsyncReqQueueBindingSoap</con:interface>
          <con:operation>AddPatientDiscoveryAsyncReq</con:operation>
          <con:request name="PatientDiscoveryAsyncReqQueue" useWsAddressing="true">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/&gt;</con:setting>
            </con:settings>
            <con:encoding>UTF-8</con:encoding>
            <con:endpoint>${#Project#Endpoint-PDAsyncEntityReqQueue}</con:endpoint>
            <con:request><![CDATA[<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soap:Header/>
   <soap:Body projectName="EntityRespondingPDAsyncReqQueueTestSuite" testCase="EntityPDAsyncReqQueryAuditLog">
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="T"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="1.1"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="2.2"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="1.1"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.16.840.1.113883.3.337" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="M"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="19990627"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">${#Project#PatientMatchFamilyName}</urn:family>
                           <urn:given partType="GIV">${#Project#PatientMatchGivenName}</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value root="1.1" extension="D11111"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>LEESBURG</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>20176</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19990627</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>2.16.840.1.113883.3.337</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>YOUNGER</urn1:familyName>
               <urn1:givenName>GALLOW</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
             <urn1:purposeOfDisclosureCoded>
               <urn1:code>PSYCHOTHERAPY</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>D123401^^^&amp;amp;2.16.840.1.113883.3.337&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>${#TestCase#AsyncPDUserID}</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>2.16.840.1.113883.3.337</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
         <!--Optional:-->
         <urn:NhinTargetCommunities>
            <!--1 or more repetitions:-->
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>?</urn1:description>
                  <urn1:homeCommunityId>${#Project#RemoteHCID}</urn1:homeCommunityId>
                  <urn1:name>?</urn1:name>
               </urn1:homeCommunity>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soap:Body>
</soap:Envelope>]]></con:request>
            <con:assertion type="SOAP Fault Assertion"/>
            <con:assertion name="Verify Receiver" type="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='urn:hl7-org:v3';
//ns2:MCCI_IN000002UV01[1]/ns2:receiver[1]/ns2:device[1]/ns2:asAgent[1]/ns2:representedOrganization[1]/ns2:id[1]/@root</path>
                <content>1.1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:assertion name="Verify Sender" type="XPath Match">
              <con:configuration>
                <path>declare namespace ns2='urn:hl7-org:v3';
//ns2:MCCI_IN000002UV01[1]/ns2:sender[1]/ns2:device[1]/ns2:asAgent[1]/ns2:representedOrganization[1]/ns2:id[1]/@root</path>
                <content>1.1</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:assertion name="Verify Message" type="XPath Match">
              <con:configuration>
                <path>declare namespace ns3='urn:hl7-org:v3';
//ns3:MCCI_IN000002UV01[1]/ns3:acknowledgement[1]/ns3:acknowledgementDetail[1]/ns3:text[1]/text()</path>
                <content>Success</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:assertion name="Verify RelatesTo" type="XPath Match">
              <con:configuration>
                <path>declare namespace ns1='http://www.w3.org/2005/08/addressing';
//ns1:RelatesTo[1]/text()</path>
                <content>uuid:5555555555.55555.555.55</content>
                <allowWildcards>false</allowWildcards>
                <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
              </con:configuration>
            </con:assertion>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:wsaConfig action="urn:gov:hhs:fha:nhinc:entitypatientdiscoveryasyncreqqueue:AddPatientDiscoveryAsyncReqAsyncRequest" addDefaultTo="true" messageID="uuid:5555555555.55555.555.55" mustUnderstand="TRUE" version="200508"/>
            <con:wsrmConfig version="1.2"/>
          </con:request>
        </con:config>
      </con:testStep>
      <con:testStep name="PatientDiscoveryAsyncReqQueueMockResponse" type="mockresponse">
        <con:settings/>
        <con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" startStep="PatientDiscoveryAsyncReqQueue" xsi:type="con:MockResponseStep">
          <con:interface>NhincProxyPatientDiscoveryAsyncRespBinding</con:interface>
          <con:operation>Proxy_ProcessPatientDiscoveryAsyncResp</con:operation>
          <con:path>/mockPDAsyncReqQueue</con:path>
          <con:port>8909</con:port>
          <con:response>
            <con:settings/>
            <con:responseContent><![CDATA[<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Header>
      <To xmlns="http://www.w3.org/2005/08/addressing">http://www.w3.org/2005/08/addressing/anonymous</To>
      <Action xmlns="http://www.w3.org/2005/08/addressing">urn:gov:hhs:fha:nhinc:entitypatientdiscoveryasyncreqqueue:AddPatientDiscoveryAsyncReqAsyncResponse</Action>
      <MessageID xmlns="http://www.w3.org/2005/08/addressing">uuid:0928e4f6-561a-4111-89b6-c0cc571c0a48</MessageID>
      <RelatesTo xmlns="http://www.w3.org/2005/08/addressing">uuid:5555555555.55555.555.55</RelatesTo>
   </S:Header>
   <S:Body>
      <ns2:MCCI_IN000002UV01 ITSVersion="XML_1.0" xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="urn:hl7-org:v3" xmlns:ns3="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:patientcorrelationfacade">
         <ns2:id extension="-5ce0b37f:12863b7180e:-7e39" root="1.1"/>
         <ns2:creationTime value="201054201755"/>
         <ns2:interactionId extension="MCCIIN000002UV01" root="2.16.840.1.113883.1.6"/>
         <ns2:processingCode code="T"/>
         <ns2:processingModeCode code="T"/>
         <ns2:acceptAckCode code="NE"/>
         <ns2:receiver typeCode="RCV">
            <ns2:device determinerCode="INSTANCE" classCode="">
               <ns2:id root="1.2.345.678.999"/>
               <ns2:asAgent classCode="AGNT">
                  <ns2:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns2:id root="1.1"/>
                  </ns2:representedOrganization>
               </ns2:asAgent>
            </ns2:device>
         </ns2:receiver>
         <ns2:sender typeCode="SND">
            <ns2:device determinerCode="INSTANCE" classCode="">
               <ns2:id root="1.2.345.678.999"/>
               <ns2:asAgent classCode="AGNT">
                  <ns2:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns2:id root="1.1"/>
                  </ns2:representedOrganization>
               </ns2:asAgent>
            </ns2:device>
         </ns2:sender>
         <ns2:acknowledgement>
            <ns2:typeCode code="CA"/>
            <ns2:targetMessage>
               <ns2:id extension="-5ce0b37f:12863b7180e:-7e40" root="1.1"/>
            </ns2:targetMessage>
            <ns2:acknowledgementDetail>
               <ns2:text>Success</ns2:text>
            </ns2:acknowledgementDetail>
         </ns2:acknowledgement>
      </ns2:MCCI_IN000002UV01>
   </S:Body>
</S:Envelope>]]></con:responseContent>
            <con:wsaConfig mustUnderstand="NONE" version="200508"/>
          </con:response>
        </con:config>
      </con:testStep>
      
      <con:testStep name="count Correlations (1)" type="groovy">
        <con:settings/>
        <con:config>
          <script>context.withSql('PatientCorrelationDB') { sql -&gt; 
  assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('PatientCorrelationTable'))[0]
}</script>
        </con:config>
      </con:testStep>
      <con:testStep name="count AAMapping (1)" type="groovy">
        <con:settings/>
        <con:config>
          <script>context.withSql('AAMappingDB') { sql -&gt; 
  assert 1 == sql.firstRow('select count(*) from ' + context.findProperty('AAMappingTable'))[0]
}</script>
        </con:config>
      </con:testStep>
      <con:testStep name="verify audit events" type="groovy"><con:settings/><con:config><script>def count = context.withSql('AuditDB') { sql -&gt; 
	sql.firstRow('select count(*) from ' + context.findProperty('AuditTable')).'count(*)'
}
//log.info "Count: " + count;
assert (count &gt; 0);</script></con:config></con:testStep><con:testStep name="Restore Configurations" type="groovy">
        <con:settings/>
        <con:config>
          <script/>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>LocalHCID</con:name>
          <con:value>1.1</con:value>
        </con:property>
        <con:property>
          <con:name>LocalAA</con:name>
          <con:value>1.1</con:value>
        </con:property>
        <con:property>
          <con:name>LocalHCDescription</con:name>
          <con:value>InternalTest1</con:value>
        </con:property>
        <con:property>
          <con:name>LocalPatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>RemoteHCID</con:name>
          <con:value>2.2</con:value>
        </con:property>
        <con:property>
          <con:name>RemoteAA</con:name>
          <con:value>2.2</con:value>
        </con:property>
        <con:property>
          <con:name>RemoteHCDescription</con:name>
          <con:value>InternalTest2</con:value>
        </con:property>
        <con:property>
          <con:name>RemotePatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>NHINGatewayConfigDir</con:name>
          <con:value>C:/Sun/AppServer/domains/domain1/config/nhin</con:value>
        </con:property>
        <con:property>
          <con:name>MPIDir</con:name>
          <con:value>C:/Sun/AppServer/domains/domain1/config</con:value>
        </con:property>
        <con:property>
          <con:name>LocalConfigDir</con:name>
          <con:value>C:/SelfTest/EndToEndSelfTest</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-DocQuery</con:name>
          <con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityDocQueryUnsecured</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-DocRetrieve</con:name>
          <con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityDocRetrieve</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-Reidentification</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntitySubjectDiscovery</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-Subscribe</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntityNotificationProducer</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-Notify</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntityNotificationConsumer</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-Unsubscribe</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntitySubscriptionManager</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-AuditLogQuery</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntityAuditQuery</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-PatientDiscoveryAsyncReq</con:name>
          <con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityPatientDiscoveryDeferredRequestUnsecured</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-PatientDiscoveryAsyncResp</con:name>
          <con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityPatientDiscoveryDeferredResponseUnsecured</con:value>
        </con:property>
        <con:property>
          <con:name>DBHost</con:name>
          <con:value>localhost</con:value>
        </con:property>
        <con:property>
          <con:name>DBPort</con:name>
          <con:value>3306</con:value>
        </con:property>
        <con:property>
          <con:name>DBUser</con:name>
          <con:value>nhincuser</con:value>
        </con:property>
        <con:property>
          <con:name>DBPass</con:name>
          <con:value>nhincpass</con:value>
        </con:property>
        <con:property>
          <con:name>PatientCorrelationDB</con:name>
          <con:value>patientcorrelationdb</con:value>
        </con:property>
        <con:property>
          <con:name>PatientCorrelationTable</con:name>
          <con:value>correlatedidentifiers</con:value>
        </con:property>
        <con:property>
          <con:name>SubscriptionDB</con:name>
          <con:value>subscriptionrepository</con:value>
        </con:property>
        <con:property>
          <con:name>SubscriptionTable</con:name>
          <con:value>subscription</con:value>
        </con:property>
        <con:property>
          <con:name>AAMappingDB</con:name>
          <con:value>assigningauthoritydb</con:value>
        </con:property>
        <con:property>
          <con:name>AAMappingTable</con:name>
          <con:value>aa_to_home_community_mapping</con:value>
        </con:property>
        <con:property>
          <con:name>AsyncMsgDB</con:name>
          <con:value>asyncmsgs</con:value>
        </con:property>
        <con:property>
          <con:name>AsyncMsgTable</con:name>
          <con:value>asyncmsgrepo</con:value>
        </con:property>
        <con:property>
          <con:name>PseudonymAA</con:name>
          <con:value>ABC</con:value>
        </con:property>
        <con:property>
          <con:name>PseudonymPatientID</con:name>
          <con:value>PSEUDO001</con:value>
        </con:property>
        <con:property>
          <con:name>RealAA</con:name>
          <con:value>1.1.1</con:value>
        </con:property>
        <con:property>
          <con:name>RealPatientID</con:name>
          <con:value>D1234010050</con:value>
        </con:property>
        <con:property>
          <con:name>DQDocID</con:name>
          <con:value>1.123401.11111</con:value>
        </con:property>
        <con:property>
          <con:name>DQPatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>DynamicDQDocID</con:name>
          <con:value>103.8.9284320.020.3590.75^1266324032288</con:value>
        </con:property>
        <con:property>
          <con:name>DRDocID</con:name>
          <con:value>1.123407.777777</con:value>
        </con:property>
        <con:property>
          <con:name>DRRepoID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NotificationEndpoint</con:name>
          <con:value>https://localhost:8181/CONNECTNhinServicesWeb/NhinService/NotificationConsumerService/HiemNotify</con:value>
        </con:property>
        <con:property>
          <con:name>SubscriptionEndpoint</con:name>
          <con:value>https://localhost:8181/CONNECTNhinServicesWeb/NhinService/NotificationProducerService/HiemSubscription</con:value>
        </con:property>
        <con:property>
          <con:name>SubscribePatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>NotifySubscriptionID</con:name>
          <con:value>-f7c1a5d:1204e50e42e:-79eb</con:value>
        </con:property>
        <con:property>
          <con:name>NotifySubscriptionManagerEndpointAddress</con:name>
          <con:value>https://localhost:8181/CONNECTNhinServicesWeb/NhinService/SubscriptionManagerService/HiemUnsubscribe</con:value>
        </con:property>
        <con:property>
          <con:name>UnSubscriptionID</con:name>
          <con:value>3e74139f-5271-4db1-98c0-88748fa3e4e3</con:value>
        </con:property>
        <con:property>
          <con:name>SubscriptionManagerEndpointAddress</con:name>
          <con:value>https://localhost:8181/CONNECTNhinServicesWeb/NhinService/SubscriptionManagerService/HiemUnsubscribe</con:value>
        </con:property>
        <con:property>
          <con:name>AQUserID</con:name>
          <con:value>kskagerb</con:value>
        </con:property>
        <con:property>
          <con:name>AQPatientID</con:name>
          <con:value>D123401</con:value>
        </con:property>
        <con:property>
          <con:name>Endpoint-EntityXDRRequest</con:name>
          <con:value>http://localhost:8080/CONNECTAdapter/EntityProxyService/EntityXDRRequest</con:value>
        </con:property>
        <con:property>
          <con:name>Gender</con:name>
          <con:value>M</con:value>
        </con:property>
        <con:property>
          <con:name>BirthTime</con:name>
          <con:value>19630804</con:value>
        </con:property>
        <con:property>
          <con:name>FamilyName</con:name>
          <con:value>Younger</con:value>
        </con:property>
        <con:property>
          <con:name>GivenName</con:name>
          <con:value>Gallow</con:value>
        </con:property>
        <con:property>
          <con:name>SubjectID</con:name>
          <con:value>1111</con:value>
        </con:property>
        <con:property>
          <con:name>UniquePatientId</con:name>
          <con:value>1111^^^&amp;amp;1.1&amp;amp;ISO</con:value>
        </con:property>
        <con:property>
          <con:name>StreetAddress</con:name>
          <con:value>123 Johnson Rd</con:value>
        </con:property>
        <con:property>
          <con:name>City</con:name>
          <con:value>Melbourne</con:value>
        </con:property>
        <con:property>
          <con:name>State</con:name>
          <con:value>FL</con:value>
        </con:property>
        <con:property>
          <con:name>ZipCode</con:name>
          <con:value>12345</con:value>
        </con:property>
        <con:property>
          <con:name>Country</con:name>
          <con:value>US</con:value>
        </con:property>
        <con:property>
          <con:name>SSN</con:name>
          <con:value>123456789</con:value>
        </con:property>
        <con:property>
          <con:name>PurposeOfDisclosure</con:name>
          <con:value>Mental</con:value>
        </con:property>
        <con:property>
          <con:name>ExpirationDate</con:name>
          <con:value>20100520</con:value>
        </con:property>
        <con:property>
          <con:name>DOB</con:name>
          <con:value>19800516</con:value>
        </con:property>
        <con:property>
          <con:name>DateOfSignature</con:name>
          <con:value>20080520&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r3844</con:value>
        </con:property>
        <con:property>
          <con:name>startDate</con:name>
          <con:value>2010-08-31T17:09:43Z</con:value>
        </con:property>
        <con:property>
          <con:name>endDate</con:name>
          <con:value>2010-08-31T17:19:43Z</con:value>
        </con:property>
        <con:property>
          <con:name>sigDate</con:name>
          <con:value>08/31/2010 17:09:43</con:value>
        </con:property>
        <con:property>
          <con:name>expireDate</con:name>
          <con:value>2010-09-30T00:00:00Z</con:value>
        </con:property>
        <con:property>
          <con:name>FullPatientID</con:name>
          <con:value>D11111^^^&amp;amp;1.1&amp;amp;ISO</con:value>
        </con:property>
        <con:property>
          <con:name>AsyncPDUserID</con:name>
          <con:value>PDAsyncUserTue Aug 31 17:14:43 UTC 2010</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript></con:testCase>
    <con:properties/>
    <con:reportParameters/>
  </con:testSuite>
  <con:requirements/>
  <con:properties>
    <con:property>
      <con:name>DBPort</con:name>
      <con:value>3306</con:value>
    </con:property>
    <con:property>
      <con:name>RemoteHCDescription</con:name>
      <con:value>InternalTest2</con:value>
    </con:property>
    <con:property>
      <con:name>DQDocID</con:name>
      <con:value>1.123401.11111</con:value>
    </con:property>
    <con:property>
      <con:name>DQPatientID</con:name>
      <con:value>D123401</con:value>
    </con:property>
    <con:property>
      <con:name>NHINGatewayConfigDir</con:name>
      <con:value>C:/Sun/AppServer/domains/domain1/config/nhin</con:value>
    </con:property>
    <con:property>
      <con:name>RemoteHCID</con:name>
      <con:value>2.2</con:value>
    </con:property>
    <con:property>
      <con:name>NHINGatewayHost</con:name>
      <con:value>localhost</con:value>
    </con:property>
    <con:property>
      <con:name>RemoteAA</con:name>
      <con:value>2.2</con:value>
    </con:property>
    <con:property>
      <con:name>DBHost</con:name>
      <con:value>localhost</con:value>
    </con:property>
    <con:property>
      <con:name>LocalHCID</con:name>
      <con:value>1.1</con:value>
    </con:property>
    <con:property>
      <con:name>LocalAA</con:name>
      <con:value>1.1</con:value>
    </con:property>
    <con:property>
      <con:name>Endpoint-AuditLogQuery</con:name>
      <con:value>http://localhost:8080/CONNECTAdapter/EntityAuditQuery</con:value>
    </con:property>
    <con:property>
      <con:name>LocalPatientID</con:name>
      <con:value>D123401</con:value>
    </con:property>
    <con:property>
      <con:name>RemotePatientID</con:name>
      <con:value>D123401</con:value>
    </con:property>
    <con:property>
      <con:name>MPIDir</con:name>
      <con:value>C:/Sun/AppServer/domains/domain1/config</con:value>
    </con:property>
    <con:property>
      <con:name>RemoteMockHCID2</con:name>
      <con:value>7.7</con:value>
    </con:property>
    <con:property>
      <con:name>RemoteMockHCID1</con:name>
      <con:value>6.6</con:value>
    </con:property>
    <con:property>
      <con:name>LocalHCDescription</con:name>
      <con:value>InternalTest1</con:value>
    </con:property>
    <con:property>
      <con:name>PDPatientID</con:name>
      <con:value>D11111</con:value>
    </con:property>
    <con:property>
      <con:name>Endpoint-PDAsyncEntityResp</con:name>
      <con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityPatientDiscoveryDeferredResponseUnsecured</con:value>
    </con:property>
    <con:property>
      <con:name>IncorrectPatientId</con:name>
      <con:value>D1111</con:value>
    </con:property>
    <con:property>
      <con:name>DBUser</con:name>
      <con:value>nhincuser</con:value>
    </con:property>
    <con:property>
      <con:name>DBPass</con:name>
      <con:value>nhincpass</con:value>
    </con:property>
    <con:property>
      <con:name>MockHost</con:name>
      <con:value>localhost</con:value>
    </con:property>
    <con:property>
      <con:name>PDUserID</con:name>
      <con:value>PDAsyncUser</con:value>
    </con:property>
    <con:property>
      <con:name>PatientId</con:name>
      <con:value>PDAsync1</con:value>
    </con:property>
    <con:property>
      <con:name>Endpoint-PDAsyncEntityReqQueue</con:name>
      <con:value>http://localhost:8080/Gateway/PatientDiscovery/1_0/EntityService/EntityPatientDiscoveryDeferredRequestUnsecured</con:value>
    </con:property>
    <con:property>
      <con:name>AsyncMsgsDB</con:name>
      <con:value>asyncmsgs</con:value>
    </con:property>
    <con:property>
      <con:name>PatientCorrelationDB</con:name>
      <con:value>patientcorrelationdb</con:value>
    </con:property>
    <con:property>
      <con:name>AsyncMsgRepoTable</con:name>
      <con:value>asyncmsgrepo</con:value>
    </con:property>
    <con:property>
      <con:name>PatientCorrelationTable</con:name>
      <con:value>correlatedidentifiers</con:value>
    </con:property>
    <con:property>
      <con:name>AAMappingDB</con:name>
      <con:value>assigningauthoritydb</con:value>
    </con:property>
    <con:property>
      <con:name>AAMappingTable</con:name>
      <con:value>aa_to_home_community_mapping</con:value>
    </con:property>
    <con:property>
      <con:name>PatientMatchGivenName</con:name>
      <con:value>Gallow</con:value>
    </con:property>
    <con:property>
      <con:name>PatientMatchFamilyName</con:name>
      <con:value>Younger</con:value>
    </con:property>
    <con:property>
      <con:name>PatientNoMatchGivenName</con:name>
      <con:value>Kate</con:value>
    </con:property>
    <con:property>
      <con:name>PatientNoMatchFamilyName</con:name>
      <con:value>Winslet</con:value>
    </con:property>
  <con:property><con:name>AuditTable</con:name><con:value>auditrepository</con:value></con:property><con:property><con:name>AuditDB</con:name><con:value>auditrepo</con:value></con:property></con:properties>
  <con:afterLoadScript>def propertiesFile = new File(new File(project.path).parent, 'EntityRespondingPDAsyncReqQueueTests-soapui-project.properties')
if (propertiesFile.exists()) {
	def props = new Properties()
	props.load(new FileReader(propertiesFile))
	props.each { key, value -&gt;
	    project.setPropertyValue(key, value)
	}
}

TimeZone.setDefault(TimeZone.getTimeZone("UTC"))
def testRunListener = [
  afterRun: { testRunner, runContext -&gt; },
  afterStep: { testRunner, runContext, result -&gt; },
  beforeStep: { testRunner, runContext -&gt; },
  beforeStep: { testRunner, runContext, testStep -&gt; },
  beforeRun: { testRunner, runContext -&gt; 
    use (org.codehaus.groovy.runtime.TimeCategory) {
      def startDate = 5.minutes.ago
      def endDate = 5.minutes.from.now
      def expireDate = 30.days.from.now

      def df = "yyyy-MM-dd'T'HH:mm:ss'Z'"
      def dfSig = "MM/dd/yyyy' 'HH:mm:ss"

      runContext.testCase.setPropertyValue("startDate", startDate.format(df))
      runContext.testCase.setPropertyValue("endDate", endDate.format(df))
      runContext.testCase.setPropertyValue("sigDate", startDate.format(dfSig))
      runContext.testCase.setPropertyValue("expireDate", expireDate.format(df))
    }
  }   
] as com.eviware.soapui.model.testsuite.TestRunListener

project.testSuiteList*.testCaseList.flatten()*.addTestRunListener(testRunListener)

com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.findProperty = { propertyName -&gt;
    return delegate.getProperty(propertyName) ?:
                delegate.testCase.getPropertyValue(propertyName) ?:
                delegate.testCase.testSuite.getPropertyValue(propertyName) ?:
                delegate.testCase.testSuite.project.getPropertyValue(propertyName)
}

com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.withSql = { dbOrPropertyName, block -&gt;
  def dbName = delegate.findProperty(dbOrPropertyName) ?: dbOrPropertyName
  def host = delegate.findProperty('DBHost')
  def port = delegate.findProperty('DBPort')
  def user = delegate.findProperty('DBUser')
  def pass = delegate.findProperty('DBPass')
  
  def connectString = "jdbc:mysql://${host}:${port}/${dbName}"
  def sql = groovy.sql.Sql.newInstance(connectString, user, pass, "com.mysql.jdbc.Driver");
  try {
     block(sql)
  } finally {
    sql.close()
  }
}</con:afterLoadScript>
  <con:wssContainer/>
  <con:databaseConnectionContainer/>
  <con:reporting>
    <con:reportTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:xmlTemplates/>
    <con:parameters/>
  </con:reporting>
  <con:eventHandlers name="TestSuiteRunListener.beforeTestCase" target="" type="TestSuiteRunListener.beforeTestCase">
    <con:script>FileUtils.backupConfiguration(context, log);</con:script>
  </con:eventHandlers>
  <con:eventHandlers name="TestSuiteRunListener.afterTestCase" type="TestSuiteRunListener.afterTestCase">
    <con:script>FileUtils.restoreConfiguration(context, log);</con:script>
  </con:eventHandlers>
</con:soapui-project>