<?xml version="1.0" encoding="UTF-8" standalone="no"?><con:soapui-project xmlns:con="http://eviware.com/soapui/config" abortOnError="false" name="AdapterPIP" resourceRoot="${projectDir}" runType="SEQUENTIAL" soapui-version="3.5.1">
	<con:settings/>
	<con:interface xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" anonymous="optional" bindingName="{urn:gov:hhs:fha:nhinc:adapterpip}AdapterPIPBindingSoap" definition="WSDL path not set.  #AdapterPIP.wsdl" name="AdapterPIPBindingSoap" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface">
		<con:settings/>
		
		<con:endpoints>
			<con:endpoint>http://localhost:${HttpDefaultPort}/NhinConnect/AdapterPIP</con:endpoint>
		</con:endpoints>
		<con:operation action="urn:RetrievePtConsentByPtDocId" anonymous="optional" bindingOperationName="RetrievePtConsentByPtDocId" inputName="RetrievePtConsentByPtDocIdRequest" isOneWay="false" name="RetrievePtConsentByPtDocId" outputName="RetrievePtConsentByPtDocIdResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
		</con:operation>
		<con:operation action="urn:RetrievePtConsentByPtId" anonymous="optional" bindingOperationName="RetrievePtConsentByPtId" inputName="RetrievePtConsentByPtIdRequest" isOneWay="false" name="RetrievePtConsentByPtId" outputName="RetrievePtConsentByPtIdResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
		</con:operation>
		<con:operation action="urn:StorePtConsent" anonymous="optional" bindingOperationName="StorePtConsent" inputName="StorePtConsentRequest" isOneWay="false" name="StorePtConsent" outputName="StorePtConsentResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
		</con:operation>
	</con:interface>
	<con:interface xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" anonymous="optional" bindingName="{urn:ihe:iti:xds-b:2007}DocumentRegistry_Binding_Soap" definition="WSDL path not set.  #AdapterComponentDocRegistry.wsdl" name="DocumentRegistry_Binding_Soap" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface">
		<con:settings/>
		
		<con:endpoints>
			<con:endpoint>http://localhost:${NhincHttpPort}/DocumentRegistry_Service</con:endpoint>
		</con:endpoints>
		<con:operation action="urn:hl7-org:v3:PRPA_IN201301UV02" anonymous="optional" bindingOperationName="DocumentRegistry_PRPA_IN201301UV02" inputName="" isOneWay="false" name="DocumentRegistry_PRPA_IN201301UV02" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
		</con:operation>
		<con:operation action="urn:hl7-org:v3:PRPA_IN201302UV02" anonymous="optional" bindingOperationName="DocumentRegistry_PRPA_IN201302UV02" inputName="" isOneWay="false" name="DocumentRegistry_PRPA_IN201302UV02" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
		</con:operation>
		<con:operation action="urn:hl7-org:v3:PRPA_IN201304UV02" anonymous="optional" bindingOperationName="DocumentRegistry_PRPA_IN201304UV02" inputName="" isOneWay="false" name="DocumentRegistry_PRPA_IN201304UV02" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
		</con:operation>
		<con:operation action="urn:ihe:iti:2007:RegisterDocumentSet-b" anonymous="optional" bindingOperationName="DocumentRegistry_RegisterDocumentSet-b" inputName="" isOneWay="false" name="DocumentRegistry_RegisterDocumentSet-b" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
		</con:operation>
		<con:operation action="urn:ihe:iti:2007:RegistryStoredQuery" anonymous="optional" bindingOperationName="DocumentRegistry_RegistryStoredQuery" inputName="" isOneWay="false" name="DocumentRegistry_RegistryStoredQuery" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
		</con:operation>
	</con:interface>
	<con:testSuite name="AdapterPIP TestSuite">
		<con:settings/>
		<con:runType>SEQUENTIAL</con:runType>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="307dbfd7-1e55-41c4-b691-2b2c8f6e6764" keepSession="false" maxResults="0" name="RetrievePtConsentByPtId - false" searchProperties="true">
			<con:settings/>
			<con:testStep name="StorePtConsent - false" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>StorePtConsent</con:operation>
					<con:request name="StorePtConsent - false">
						<con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/&gt;</con:setting></con:settings>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-AdapterPIP}</con:endpoint>
						<con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtId - false">
      <urn:StorePtConsentRequest>
         <urn:patientPreferences>
            <urn:patientId>${#Project#PatientId}</urn:patientId>
            <urn:assigningAuthority>1.1</urn:assigningAuthority>
            <urn:optIn>false</urn:optIn>
         </urn:patientPreferences>
      </urn:StorePtConsentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="RetrievePtConsentByPtId" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>RetrievePtConsentByPtId</con:operation>
					<con:request name="RetrievePtConsentByPtId">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-AdapterPIP}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtId - false">
      <urn:RetrievePtConsentByPtIdRequest>
         <urn:patientId>${#Project#PatientId}</urn:patientId>
         <urn:assigningAuthority>1.1</urn:assigningAuthority>
      </urn:RetrievePtConsentByPtIdRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns17='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns17:RetrievePtConsentByPtIdResponse[1]/ns17:patientPreferences[1]/ns17:optIn[1]</path>
								<content>false</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="Remove Documents" type="groovy">
				<con:settings/>
				<con:config>
					<script>def table = context.findProperty('DocumentTable')
//def col = context.findProperty('col')
def val = context.findProperty('PatientId')

context.withSql('DocRepositoryDB') { sql -&gt; 
sql.execute("delete from " + table + " where SourcePatientId='" + val + "'")
}

					</script>
				</con:config>
			</con:testStep>
			<con:properties>
				<con:property>
					<con:name>startDate</con:name>
					<con:value>2012-03-02T17:24:52Z</con:value>
				</con:property>
				<con:property>
					<con:name>endDate</con:name>
					<con:value>2012-03-02T17:34:52Z</con:value>
				</con:property>
				<con:property>
					<con:name>sigDate</con:name>
					<con:value>03/02/2012 17:24:52</con:value>
				</con:property>
				<con:property>
					<con:name>expireDate</con:name>
					<con:value>2012-04-01T00:00:00Z</con:value>
				</con:property>
			</con:properties>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="5af1f737-f656-481f-8713-93ddb6717594" keepSession="false" maxResults="0" name="RetrievePtConsentByPtId - true" searchProperties="true">
			<con:settings/>
			<con:testStep name="StorePtConsent - true" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>StorePtConsent</con:operation>
					<con:request name="StorePtConsent - true">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-AdapterPIP}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtId - true">
      <urn:StorePtConsentRequest>
         <urn:patientPreferences>
            <urn:patientId>${#Project#PatientId}</urn:patientId>
            <urn:assigningAuthority>1.1</urn:assigningAuthority>
            <urn:optIn>true</urn:optIn>
         </urn:patientPreferences>
      </urn:StorePtConsentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="RetrievePtConsentByPtId" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>RetrievePtConsentByPtId</con:operation>
					<con:request name="RetrievePtConsentByPtId">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-AdapterPIP}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtId - true">
      <urn:RetrievePtConsentByPtIdRequest>
         <urn:patientId>${#Project#PatientId}</urn:patientId>
         <urn:assigningAuthority>1.1</urn:assigningAuthority>
      </urn:RetrievePtConsentByPtIdRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns17='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns17:RetrievePtConsentByPtIdResponse[1]/ns17:patientPreferences[1]/ns17:optIn[1]</path>
								<content>true</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="Remove Documents" type="groovy">
				<con:settings/>
				<con:config>
					<script>def table = context.findProperty('DocumentTable')
def val = context.findProperty('PatientId')

context.withSql('DocRepositoryDB') { sql -&gt; 
sql.execute("delete from " + table + " where SourcePatientId='" + val + "'")
}


					</script>
				</con:config>
			</con:testStep>
			<con:properties>
				<con:property>
					<con:name>startDate</con:name>
					<con:value>2012-03-02T17:23:14Z</con:value>
				</con:property>
				<con:property>
					<con:name>endDate</con:name>
					<con:value>2012-03-02T17:33:14Z</con:value>
				</con:property>
				<con:property>
					<con:name>sigDate</con:name>
					<con:value>03/02/2012 17:23:14</con:value>
				</con:property>
				<con:property>
					<con:name>expireDate</con:name>
					<con:value>2012-04-01T00:00:00Z</con:value>
				</con:property>
			</con:properties>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="91f703c8-bff1-40c2-ad94-85bc2f009ce5" keepSession="false" maxResults="0" name="RetrievePtConsentByPtDocId - false" searchProperties="true">
			<con:settings/>
			<con:testStep name="StorePtConsent - true" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>StorePtConsent</con:operation>
					<con:request name="StorePtConsent - true">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-AdapterPIP}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtDocId - false">
      <urn:StorePtConsentRequest>
         <urn:patientPreferences>
            <urn:patientId>${#Project#PatientId}</urn:patientId>
            <urn:assigningAuthority>1.1</urn:assigningAuthority>
            <urn:optIn>true</urn:optIn>
         </urn:patientPreferences>
      </urn:StorePtConsentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="RetrievePtConsentByPtId" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>RetrievePtConsentByPtId</con:operation>
					<con:request name="RetrievePtConsentByPtId">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-AdapterPIP}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtDocId - false">
      <urn:RetrievePtConsentByPtIdRequest>
         <urn:patientId>${#Project#PatientId}</urn:patientId>
         <urn:assigningAuthority>1.1</urn:assigningAuthority>
      </urn:RetrievePtConsentByPtIdRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns17='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns17:RetrievePtConsentByPtIdResponse[1]/ns17:patientPreferences[1]/ns17:optIn[1]</path>
								<content>true</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="Remove Documents" type="groovy">
				<con:settings/>
				<con:config>
					<script>def table = context.findProperty('DocumentTable')
def val = context.findProperty('PatientId')

context.withSql('DocRepositoryDB') { sql -&gt; 
sql.execute("delete from " + table + " where SourcePatientId='" + val + "'")
}


					</script>
				</con:config>
			</con:testStep>
			<con:properties>
				<con:property>
					<con:name>startDate</con:name>
					<con:value>2012-03-02T17:23:14Z</con:value>
				</con:property>
				<con:property>
					<con:name>endDate</con:name>
					<con:value>2012-03-02T17:33:14Z</con:value>
				</con:property>
				<con:property>
					<con:name>sigDate</con:name>
					<con:value>03/02/2012 17:23:14</con:value>
				</con:property>
				<con:property>
					<con:name>expireDate</con:name>
					<con:value>2012-04-01T00:00:00Z</con:value>
				</con:property>
			</con:properties>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="906e451c-08ff-481f-8f77-294108064ab4" keepSession="false" maxResults="0" name="RetrievePtConsentByPtId - minimaldoc" searchProperties="true">
			<con:settings/>
			<con:testStep name="Clear Docs For Patient" type="groovy">
				<con:settings/>
				<con:config>
					<script>def table = context.findProperty('DocumentTable')
def val = context.findProperty('PatientId')

context.withSql('DocRepositoryDB') { sql -&gt; 
sql.execute("delete from " + table + " where SourcePatientId='" + val + "'")
}



					</script>
				</con:config>
			</con:testStep>
			<con:testStep name="StorePtConsent - minimal" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>StorePtConsent</con:operation>
					<con:request name="StorePtConsent - minimal">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-AdapterPIP}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtId - minimaldoc">
      <urn:StorePtConsentRequest>
         <urn:patientPreferences>
            <urn:patientId>${#Project#PatientId}</urn:patientId>
            <urn:assigningAuthority>1.1</urn:assigningAuthority>
            <urn:optIn>false</urn:optIn>
            <urn:fineGrainedPolicyMetadata>
               <urn:policyOID>policy_oid</urn:policyOID>
               <urn:authorPerson>author_person</urn:authorPerson>
            </urn:fineGrainedPolicyMetadata>
         </urn:patientPreferences>
      </urn:StorePtConsentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="RetrievePtConsentByPtId" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>RetrievePtConsentByPtId</con:operation>
					<con:request name="RetrievePtConsentByPtId">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-AdapterPIP}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtId - minimaldoc">
      <urn:RetrievePtConsentByPtIdRequest>
         <urn:patientId>${#Project#PatientId}</urn:patientId>
         <urn:assigningAuthority>1.1</urn:assigningAuthority>
      </urn:RetrievePtConsentByPtIdRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns17='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns17:RetrievePtConsentByPtIdResponse[1]/ns17:patientPreferences[1]/ns17:optIn[1]</path>
								<content>${StorePtConsent - minimal#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:optIn[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns18:RetrievePtConsentByPtIdResponse[1]/ns18:patientPreferences[1]/ns18:patientId[1]</path>
								<content>${StorePtConsent - minimal#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:patientId[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns18:RetrievePtConsentByPtIdResponse[1]/ns18:patientPreferences[1]/ns18:assigningAuthority[1]</path>
								<content>${StorePtConsent - minimal#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:assigningAuthority[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="QueryByPatientId" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>RetrievePtConsentByPtDocId</con:operation>
					<con:request name="QueryByPatientId">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-DocRegistry}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:urn1="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtId - minimaldoc">
      <urn:AdhocQueryRequest id="?" comment="?" federated="false" federation="?" startIndex="0" maxResults="-1">
         <urn:ResponseOption returnType="LeafClass" returnComposedObjects="true"/>
         <urn1:AdhocQuery id="urn:uuid:14d4debf-8f97-4251-9a74-a90016b0af0d" home="1.1">
            <urn1:Slot name="$XDSDocumentEntryPatientId">
               <urn1:ValueList>
                  <urn1:Value>${#Project#PatientId}^^^&amp;1.1&amp;ISO</urn1:Value>
               </urn1:ValueList>
            </urn1:Slot>
         </urn1:AdhocQuery>
      </urn:AdhocQueryRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Slot[@name='languageCode']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>en-US</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Slot[@name='sourcePatientId']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>${StorePtConsent - minimal#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:patientId[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Consent to Share Information</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d']/ns2:Slot[@name='authorPerson']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>${StorePtConsent - minimal#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:authorPerson[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[1]/ns3:Classification[2]/@nodeRepresentation</path>
								<content>57017-6</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:41a5887f-8865-4c09-adf7-e362475b143a']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>2.16.840.1.113883.6.1</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:41a5887f-8865-4c09-adf7-e362475b143a']/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Privacy Policy</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/@mimeType</path>
								<content>text/xml</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f']/@nodeRepresentation</path>
								<content>R</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>2.16.840.1.113883.5.25</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f']/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Restricted</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1']/@nodeRepresentation</path>
								<content>385432009</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>2.16.840.1.113883.6.96</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1']/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Not Applicable</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead']/@nodeRepresentation</path>
								<content>385432009</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>2.16.840.1.113883.6.96</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead']/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Not Applicable</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f0306f51-975f-434e-a61c-c59651d33983']/@nodeRepresentation</path>
								<content>57017-6</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f0306f51-975f-434e-a61c-c59651d33983']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>2.16.840.1.113883.6.1</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f0306f51-975f-434e-a61c-c59651d33983']/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Privacy Policy</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[1]/ns3:ExternalIdentifier[@identificationScheme='urn:uuid:58a6f841-87b3-4a3e-92fd-a8ffeff98427']/@value</path>
								<content>'ADPTPIPTST98769876Z^^^&amp;1.1&amp;ISO'</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[1]/@status</path>
								<content>Approved</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="Remove Documents" type="groovy">
				<con:settings/>
				<con:config>
					<script>def table = context.findProperty('DocumentTable')
def val = context.findProperty('PatientId')

context.withSql('DocRepositoryDB') { sql -&gt; 
sql.execute("delete from " + table + " where SourcePatientId='" + val + "'")
}



					</script>
				</con:config>
			</con:testStep>
			<con:properties>
				<con:property>
					<con:name>startDate</con:name>
					<con:value>2012-03-02T17:23:15Z</con:value>
				</con:property>
				<con:property>
					<con:name>endDate</con:name>
					<con:value>2012-03-02T17:33:15Z</con:value>
				</con:property>
				<con:property>
					<con:name>sigDate</con:name>
					<con:value>03/02/2012 17:23:15</con:value>
				</con:property>
				<con:property>
					<con:name>expireDate</con:name>
					<con:value>2012-04-01T00:00:00Z</con:value>
				</con:property>
			</con:properties>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="8e4b91e7-1377-408c-acba-bdda1c301c41" keepSession="false" maxResults="0" name="RetrievePtConsentByPtId - fulldoc" searchProperties="true">
			<con:settings/>
			<con:testStep name="Clear Docs For Patient" type="groovy">
				<con:settings/>
				<con:config>
					<script>def table = context.findProperty('DocumentTable')
def val = context.findProperty('PatientId')
def eventtable = context.findProperty('EventCodeTable')
def eventval = context.findProperty('EventCode')

context.withSql('DocRepositoryDB') { sql -&gt; 
sql.execute("delete from " + table + " where SourcePatientId = '" + val + "'")
sql.execute("delete from " + eventtable + " where EventCode like '%" + eventval + "%'")
}



					</script>
				</con:config>
			</con:testStep>
			<con:testStep name="StorePtConsent - full" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>StorePtConsent</con:operation>
					<con:request name="StorePtConsent - full">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-AdapterPIP}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtId - fulldoc">
      <urn:StorePtConsentRequest>
         <urn:patientPreferences>
            <urn:patientId>${#Project#PatientId}</urn:patientId>
            <urn:assigningAuthority>1.1</urn:assigningAuthority>
            <urn:optIn>false</urn:optIn>
            <urn:fineGrainedPolicyMetadata>
               <urn:policyOID>policy_oid</urn:policyOID>
               <urn:authorPerson>author_person</urn:authorPerson>
               <urn:authorInstitution>author_institution</urn:authorInstitution>
               <urn:authorRole>author_role</urn:authorRole>
               <urn:authorSpecialty>author_specialty</urn:authorSpecialty>
               <urn:availabilityStatus>Approved</urn:availabilityStatus>
               <urn:classCode>class_code</urn:classCode>
               <urn:classCodeScheme>class_code_scheme</urn:classCodeScheme>
               <urn:classCodeDisplayName>class_code_display_name</urn:classCodeDisplayName>
               <urn:comments>le_comments</urn:comments>
               <urn:confidentialityCode>confidentiality_code</urn:confidentialityCode>
               <urn:confidentialityCodeScheme>confidentiality_code_scheme</urn:confidentialityCodeScheme>
               <urn:confidentialityCodeDisplayName>confidentiality_code_display_name</urn:confidentialityCodeDisplayName>
               <urn:creationTime>20091123211427</urn:creationTime>
               <urn:formatCode>format_code</urn:formatCode>
               <urn:formatCodeScheme>format_code_scheme</urn:formatCodeScheme>
               <urn:formatCodeDisplayName>format_code_display_name</urn:formatCodeDisplayName>
               <urn:hash>le_hash</urn:hash>
               <urn:healthcareFacilityCode>healthcare_facility_code</urn:healthcareFacilityCode>
               <urn:healthcareFacilityCodeScheme>healthcare_facility_code_scheme</urn:healthcareFacilityCodeScheme>
               <urn:healthcareFacilityCodeDisplayName>healthcare_facility_code_display_name</urn:healthcareFacilityCodeDisplayName>
               <urn:languageCode>language_code</urn:languageCode>
               <urn:legalAuthenticator>legal_authenticator</urn:legalAuthenticator>
               <urn:mimeType>text/xml</urn:mimeType>
               <urn:practiceSettingCode>practice_setting_code</urn:practiceSettingCode>
               <urn:practiceSettingCodeScheme>practice_setting_code_scheme</urn:practiceSettingCodeScheme>
               <urn:practiceSettingCodeDisplayName>practice_setting_code_display_name</urn:practiceSettingCodeDisplayName>
               <urn:serviceStartTime>20090923221427</urn:serviceStartTime>
               <urn:serviceStopTime>20100823231427</urn:serviceStopTime>
               <urn:size>123</urn:size>
               <urn:sourcePatientId>${#Project#PatientId}</urn:sourcePatientId>
               <urn:Pid3>pid3_value</urn:Pid3>
               <urn:Pid5>pid5_value</urn:Pid5>
               <urn:Pid7>pid7_value</urn:Pid7>
               <urn:Pid8>pid8_value</urn:Pid8>
               <urn:Pid11>pid11_value</urn:Pid11>
               <urn:documentTitle>document_title</urn:documentTitle>
               <urn:typeCode>type_code</urn:typeCode>
               <urn:typeCodeScheme>type_code_scheme</urn:typeCodeScheme>
               <urn:typeCodeDisplayName>type_code_display_name</urn:typeCodeDisplayName>
               <urn:documentUniqueId>document_unique_id</urn:documentUniqueId>
               <urn:documentURI>document_uri</urn:documentURI>
               <urn:eventCodes>
                  <urn1:code>urn:oid:zptcstfulldoc_event_code_1</urn1:code>
                  <urn1:codeSystem>event_code_1_scheme</urn1:codeSystem>
                  <urn1:displayName>event_code_1_display_name</urn1:displayName>
               </urn:eventCodes>
               <urn:eventCodes>
                  <urn1:code>urn:oid:zptcstfulldoc_event_code_2</urn1:code>
                  <urn1:codeSystem>event_code_2_scheme</urn1:codeSystem>
                  <urn1:displayName>event_code_2_display_name</urn1:displayName>
               </urn:eventCodes>
            </urn:fineGrainedPolicyMetadata>
         </urn:patientPreferences>
      </urn:StorePtConsentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="RetrievePtConsentByPtId" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>RetrievePtConsentByPtId</con:operation>
					<con:request name="RetrievePtConsentByPtId">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-AdapterPIP}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtId - fulldoc">
      <urn:RetrievePtConsentByPtIdRequest>
         <urn:patientId>${#Project#PatientId}</urn:patientId>
         <urn:assigningAuthority>1.1</urn:assigningAuthority>
      </urn:RetrievePtConsentByPtIdRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns17='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns17:RetrievePtConsentByPtIdResponse[1]/ns17:patientPreferences[1]/ns17:optIn[1]</path>
								<content>${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:optIn[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns18:RetrievePtConsentByPtIdResponse[1]/ns18:patientPreferences[1]/ns18:patientId[1]</path>
								<content>${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:patientId[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns18:RetrievePtConsentByPtIdResponse[1]/ns18:patientPreferences[1]/ns18:assigningAuthority[1]</path>
								<content>${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:assigningAuthority[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="QueryByPatientId" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>RetrievePtConsentByPtDocId</con:operation>
					<con:request name="QueryByPatientId">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-DocRegistry}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:urn1="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtId - fulldoc">
      <urn:AdhocQueryRequest id="?" comment="?" federated="false" federation="?" startIndex="0" maxResults="-1">
         <urn:ResponseOption returnType="LeafClass" returnComposedObjects="true"/>
         <urn1:AdhocQuery id="urn:uuid:14d4debf-8f97-4251-9a74-a90016b0af0d" home="1.1">
            <urn1:Slot name="$XDSDocumentEntryPatientId">
               <urn1:ValueList>
                  <urn1:Value>${#Project#PatientId}^^^&amp;1.1&amp;ISO</urn1:Value>
               </urn1:ValueList>
            </urn1:Slot>
         </urn1:AdhocQuery>
      </urn:AdhocQueryRequest>
   <urn2:RetrievePtConsentByPtDocIdRequest xmlns:urn2="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter"/></soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Slot[@name='languageCode']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:languageCode[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Slot[@name='legalAuthenticator']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:legalAuthenticator[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Slot[@name='sourcePatientId']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:sourcePatientId[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Slot[@name='sourcePatientInfo']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>PID-3|${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:Pid3[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Slot[@name='sourcePatientInfo']/ns2:ValueList[1]/ns2:Value[2]</path>
								<content>PID-5|${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:Pid5[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Slot[@name='sourcePatientInfo']/ns2:ValueList[1]/ns2:Value[3]</path>
								<content>PID-7|${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:Pid7[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Slot[@name='sourcePatientInfo']/ns2:ValueList[1]/ns2:Value[4]</path>
								<content>PID-8|${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:Pid8[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Slot[@name='sourcePatientInfo']/ns2:ValueList[1]/ns2:Value[5]</path>
								<content>PID-11|${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:Pid11[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:documentTitle[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Description[1]/ns2:LocalizedString[1]/@value</path>
								<content>${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:comments[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d']/ns2:Slot[@name='authorPerson']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:authorPerson[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d']/ns2:Slot[@name='authorInstitution']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:authorInstitution[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d']/ns2:Slot[@name='authorRole']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:authorRole[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d']/ns2:Slot[@name='authorSpecialty']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:authorSpecialty[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[1]/ns3:Classification[2]/@nodeRepresentation</path>
								<content>57017-6</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:41a5887f-8865-4c09-adf7-e362475b143a']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>2.16.840.1.113883.6.1</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:41a5887f-8865-4c09-adf7-e362475b143a']/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Privacy Policy</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/@mimeType</path>
								<content>${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:mimeType[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f']/@nodeRepresentation</path>
								<content>${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:confidentialityCode[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:confidentialityCodeScheme[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f']/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:confidentialityCodeDisplayName[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:2c6b8cb7-8b2a-4051-b291-b1ae6a575ef4']/@nodeRepresentation</path>
								<content>${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:eventCodes[1]/urn1:code[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:2c6b8cb7-8b2a-4051-b291-b1ae6a575ef4']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>N/A</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:2c6b8cb7-8b2a-4051-b291-b1ae6a575ef4']/@nodeRepresentation</path>
								<content>${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:eventCodes[2]/urn1:code[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:2c6b8cb7-8b2a-4051-b291-b1ae6a575ef4']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>N/A</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1']/@nodeRepresentation</path>
								<content>385432009</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>2.16.840.1.113883.6.96</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1']/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Not Applicable</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead']/@nodeRepresentation</path>
								<content>385432009</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>2.16.840.1.113883.6.96</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead']/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Not Applicable</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f0306f51-975f-434e-a61c-c59651d33983']/@nodeRepresentation</path>
								<content>57017-6</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f0306f51-975f-434e-a61c-c59651d33983']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>2.16.840.1.113883.6.1</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f0306f51-975f-434e-a61c-c59651d33983']/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Privacy Policy</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[1]/ns3:ExternalIdentifier[@identificationScheme='urn:uuid:58a6f841-87b3-4a3e-92fd-a8ffeff98427']/@value</path>
								<content>'ADPTPIPTST98769876Z^^^&amp;1.1&amp;ISO'</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[1]/ns3:Classification[@classificationScheme='urn:uuid:a09d5840-386c-46f2-b5ad-9c3699a4309d']/@nodeRepresentation</path>
								<content>urn:nhin:names:acp:XACML</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[1]/ns3:Classification[@classificationScheme='urn:uuid:a09d5840-386c-46f2-b5ad-9c3699a4309d']/ns3:Slot[@name='codingScheme']/ns3:ValueList[1]/ns3:Value[1]</path>
								<content>1.3.6.1.4.1.19376.1.2.3</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns6='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns8='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns8:AdhocQueryResponse[1]/ns6:RegistryObjectList[1]/ns6:ExtrinsicObject[1]/@status</path>
								<content>Approved</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="Creation Time" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Slot[@name='creationTime']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:creationTime[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="Service Start Time" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Slot[@name='serviceStartTime']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:serviceStartTime[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="Service Stop Time" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Slot[@name='serviceStopTime']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>${StorePtConsent - full#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:serviceStopTime[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="Remove Documents" type="groovy">
				<con:settings/>
				<con:config>
					<script>def table = context.findProperty('DocumentTable')
def val = context.findProperty('PatientId')
def eventtable = context.findProperty('EventCodeTable')
def eventval = context.findProperty('EventCode')

context.withSql('DocRepositoryDB') { sql -&gt; 
sql.execute("delete from " + table + " where SourcePatientId = '" + val + "'")
sql.execute("delete from " + eventtable + " where EventCode like '%" + eventval + "%'")
}



					</script>
				</con:config>
			</con:testStep>
			<con:properties>
				<con:property>
					<con:name>startDate</con:name>
					<con:value>2012-03-02T17:23:15Z</con:value>
				</con:property>
				<con:property>
					<con:name>endDate</con:name>
					<con:value>2012-03-02T17:33:15Z</con:value>
				</con:property>
				<con:property>
					<con:name>sigDate</con:name>
					<con:value>03/02/2012 17:23:15</con:value>
				</con:property>
				<con:property>
					<con:name>expireDate</con:name>
					<con:value>2012-04-01T00:00:00Z</con:value>
				</con:property>
			</con:properties>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="27913681-6c52-4c8e-8171-46601ae30b5a" keepSession="false" maxResults="0" name="RetrievePtConsentByPtId - pdfdoc -minimaldoc" searchProperties="true">
			<con:settings/>
			<con:testStep name="Clear Docs For Patient" type="groovy">
				<con:settings/>
				<con:config>
					<script>def table = context.findProperty('DocumentTable')
def val = context.findProperty('PatientId')

context.withSql('DocRepositoryDB') { sql -&gt; 
sql.execute("delete from " + table + " where SourcePatientId='" + val + "'")
}

					</script>
				</con:config>
			</con:testStep>
			<con:testStep name="StorePtConsent - fine\binary" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>StorePtConsent</con:operation>
					<con:request name="StorePtConsent - fine\binary">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-AdapterPIP}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtId - pdfdoc -minimaldoc">
      <urn:StorePtConsentRequest>
         <urn:patientPreferences>
            <urn:patientId>${#Project#PatientId}</urn:patientId>
            <urn:assigningAuthority>1.1</urn:assigningAuthority>
            <urn:optIn>false</urn:optIn>
            <urn:fineGrainedPolicyCriteria>
               <urn:fineGrainedPolicyCriterion>
                  <urn:sequentialId>1</urn:sequentialId>
                  <urn:policyOID>defaultFineOID_1</urn:policyOID>
                  <urn:permit>true</urn:permit>
               </urn:fineGrainedPolicyCriterion>
               <urn:fineGrainedPolicyCriterion>
                  <urn:sequentialId>2</urn:sequentialId>
                  <urn:policyOID>defaultFineOID_2</urn:policyOID>
                  <urn:permit>true</urn:permit>
               </urn:fineGrainedPolicyCriterion>
            </urn:fineGrainedPolicyCriteria>
            <urn:binaryDocumentPolicyCriteria>
               <urn:binaryDocumentPolicyCriterion>
                  <urn:policyOID>defaultBinaryOID_1</urn:policyOID>
                  <urn:documentUniqueId>99.999.9.9</urn:documentUniqueId>
                  <urn:documentTitle>Binary Doc 99</urn:documentTitle>
                  <urn:effectiveTime>2009-12-01T00:00:00.000-05:00</urn:effectiveTime>
                  <urn:binaryDocument></urn:binaryDocument>
                  <urn:storeAction>add</urn:storeAction>
               </urn:binaryDocumentPolicyCriterion>
               <urn:binaryDocumentPolicyCriterion>
                  <urn:policyOID>defaultBinaryOID_2</urn:policyOID>
                  <urn:documentUniqueId>88.888.8.8</urn:documentUniqueId>
                  <urn:documentTitle>Binary Doc 88</urn:documentTitle>
                  <urn:effectiveTime>2009-12-01T00:00:00.000-05:00</urn:effectiveTime>
                  <urn:binaryDocument>SlZCRVJpMHhMalVOQ2lXMXRiVzFEUW94SURBZ2IySnFEUW84UEM5VWVYQmxMME5oZEdGc2IyY3ZVR0ZuWlhNZ01pQXdJRkl2VEdGdVp5aGxiaTFWVXlrZ0wxTjBjblZqZEZSeVpXVlNiMjkwSURnZ01DQlNMMDFoY210SmJtWnZQRHd2VFdGeWEyVmtJSFJ5ZFdVK1BqNCtEUXBsYm1Sdlltb05DaklnTUNCdlltb05Danc4TDFSNWNHVXZVR0ZuWlhNdlEyOTFiblFnTVM5TGFXUnpXeUF6SURBZ1VsMGdQajROQ21WdVpHOWlhZzBLTXlBd0lHOWlhZzBLUER3dlZIbHdaUzlRWVdkbEwxQmhjbVZ1ZENBeUlEQWdVaTlTWlhOdmRYSmpaWE04UEM5R2IyNTBQRHd2UmpFZ05TQXdJRkkrUGk5UWNtOWpVMlYwV3k5UVJFWXZWR1Y0ZEM5SmJXRm5aVUl2U1cxaFoyVkRMMGx0WVdkbFNWMGdQajR2VFdWa2FXRkNiM2hiSURBZ01DQTJNVElnTnpreVhTQXZRMjl1ZEdWdWRITWdOQ0F3SUZJdlIzSnZkWEE4UEM5VWVYQmxMMGR5YjNWd0wxTXZWSEpoYm5Od1lYSmxibU41TDBOVEwwUmxkbWxqWlZKSFFqNCtMMVJoWW5NdlV5OVRkSEoxWTNSUVlYSmxiblJ6SURBK1BnMEtaVzVrYjJKcURRbzBJREFnYjJKcURRbzhQQzlHYVd4MFpYSXZSbXhoZEdWRVpXTnZaR1V2VEdWdVozUm9JREUxT1Q0K0RRcHpkSEpsWVcwTkNuaWNUWTA5QzhJd0dJVDNRUDdEamU4N05FMXFhZzJVRHYwU2hZSkR0dUlnV2orRzZ0RDYvMDBIb2R4eEhOekJnL2lFUEkrNzZsQkRGd1hLdWtMcHBZaGJBMk9VdHZCM0tReDBrRUdXS0oxWVpOcXBOQ3lqRkJxUEpmWlM5T1NmcnduQkY3Q2plZUJvUTlNY0trNXNxZWJJVW9zYkcwc2ZqbEs2ZmtmZTBmQm1rOUNzK0F4L2xLSUo2QVgvQnhxWHFhMWJBM3ZDNm91bXEvQUR6dHNvOWcwS1pXNWtjM1J5WldGdERRcGxibVJ2WW1vTkNqVWdNQ0J2WW1vTkNqdzhMMVI1Y0dVdlJtOXVkQzlUZFdKMGVYQmxMMVJ5ZFdWVWVYQmxMMDVoYldVdlJqRXZRbUZ6WlVadmJuUXZRVUpEUkVWRkswTmhiR2xpY21rdlJXNWpiMlJwYm1jdlYybHVRVzV6YVVWdVkyOWthVzVuTDBadmJuUkVaWE5qY21sd2RHOXlJRFlnTUNCU0wwWnBjbk4wUTJoaGNpQXpNaTlNWVhOMFEyaGhjaUF4TVRjdlYybGtkR2h6SURFMElEQWdVajQrRFFwbGJtUnZZbW9OQ2pZZ01DQnZZbW9OQ2p3OEwxUjVjR1V2Um05dWRFUmxjMk55YVhCMGIzSXZSbTl1ZEU1aGJXVXZRVUpEUkVWRkswTmhiR2xpY21rdlJteGhaM01nTXpJdlNYUmhiR2xqUVc1bmJHVWdNQzlCYzJObGJuUWdOelV3TDBSbGMyTmxiblFnTFRJMU1DOURZWEJJWldsbmFIUWdOelV3TDBGMloxZHBaSFJvSURVd015OU5ZWGhYYVdSMGFDQXhOamt3TDBadmJuUlhaV2xuYUhRZ05EQXdMMWhJWldsbmFIUWdNalV3TDFOMFpXMVdJRFV3TDBadmJuUkNRbTk0V3lBdE5EYzJJQzB5TlRBZ01USXhOQ0EzTlRCZElDOUdiMjUwUm1sc1pUSWdNVFVnTUNCU1BqNE5DbVZ1Wkc5aWFnMEtOeUF3SUc5aWFnMEtQRHd2UVhWMGFHOXlLSGRsYzNSaVpYSm5LUzlEY21WaGRHOXlLUDcvQUUwQWFRQmpBSElBYndCekFHOEFaZ0IwQUs0QUlBQlBBR1lBWmdCcEFHTUFaUUFnQUZjQWJ3QnlBR1FBSUFBeUFEQUFNQUEzS1M5RGNtVmhkR2x2YmtSaGRHVW9SRG95TURBNU1UQXlOakU0TXpNek5pa2dMMDF2WkVSaGRHVW9SRG95TURBNU1UQXlOakU0TXpNek5pa2dMMUJ5YjJSMVkyVnlLUDcvQUUwQWFRQmpBSElBYndCekFHOEFaZ0IwQUs0QUlBQlBBR1lBWmdCcEFHTUFaUUFnQUZjQWJ3QnlBR1FBSUFBeUFEQUFNQUEzS1Q0K0RRcGxibVJ2WW1vTkNqRXpJREFnYjJKcURRbzhQQzlVZVhCbEwwOWlhbE4wYlM5T0lEVXZSbWx5YzNRZ01qa3ZSbWxzZEdWeUwwWnNZWFJsUkdWamIyUmxMMHhsYm1kMGFDQXhORE0rUGcwS2MzUnlaV0Z0RFFwNG5FMk9UUXFETUJDRjk0SjNlRGVZakdrbEJmRUNnb1RvVGx3VUdicHFMV21FZXZ0MnJHQ1hNKzk3UDh3d1lBTjdoa1BwY0FHZkxMZ0FseVdxaXJ5S0JvRTY4dFFNTUNQSTMyRDFWOWQ1dGlGdUp6cVpra0tzb1dIRUR2VHJVNmhMY1psU0gwWENQQ2Z5MXlpUDdmeFdxbHR0NW1mN0UxdDVwMFpXOEI3Vkx2ZlhvSXVMbytIb3k3TVB6bHd6VkEwS1pXNWtjM1J5WldGdERRcGxibVJ2WW1vTkNqRTBJREFnYjJKcURRcGJJREl5TmlBd0lEQWdNQ0F3SURBZ01DQXdJREFnTUNBd0lEQWdNQ0F3SURJMU1pQXdJREFnTUNBd0lEQWdNQ0F3SURBZ01DQXdJREFnTUNBd0lEQWdNQ0F3SURBZ01DQXdJREFnTUNBMk1UVWdNQ0EwTlRrZ01DQXdJREFnTUNBd0lEQWdNQ0F3SURBZ05URTNJREFnTUNBd0lEUTROeUF3SURBZ01DQXdJREFnTUNBd0lEQWdNQ0F3SURBZ01DQTBOemtnTUNBME1qTWdOVEkxSURRNU9DQXdJREFnTlRJMUlESXpNQ0F3SURBZ01DQTNPVGtnTlRJMUlEVXlOeUF3SURBZ01DQXpPVEVnTXpNMUlEVXlOVjBnRFFwbGJtUnZZbW9OQ2pFMUlEQWdiMkpxRFFvOFBDOUdhV3gwWlhJdlJteGhkR1ZFWldOdlpHVXZUR1Z1WjNSb0lEVXdPVFF5TDB4bGJtZDBhREVnT1RZM01EQStQZzBLYzNSeVpXRnREUXA0bk94Y0NYaFRWZG8rNTk1c2JaSW1hZE0yYlpvbWFXaEthVXVCRm1qWkdycFN5bGJhUUZ1MmxpNFVCVUYyRUxDS2F4VkZjZDkzSFhGSkEwaFJSOUhCZlIzSEdXZDBkTVJ4d1FYRVhRVGEvNzMzeTRHQzZNenZNL1BQNy9QTWJkLzd2dWM3eXozcmQ3OUFnSEhHV0R4dUdqYWx0S2F5SW5mVmpwbU16MjVoekZsWFZseGFxMTNBT3huYnZKWXg3Uk5seFJOS1B0dTc0VG5HTnRrWms5c3JTc3ZLbVYvVGh2S2xhQ1cxWXNya21yRzdmYldNWFJ0ZzdMNzNLbXFDeFYrK2F1eGl2THdmWXc3UDVKcmNJUXZhbDNRenh2K004bzNOQzVzV082M0ZLRzhMTVNiZDFyeGltZWZCelRzT01qWldlVjUwMitKNUM3LzlkcUtKTVR2S1JDWFBhMXE2bUtVd0g1NnZRWDNydkFXcjI5ejN2djRRWStVWE1EWjRkbnRyVTh0NzVRKytqL1puSW45WU93em1CNktISW4wRjB2M2FGeTViOVVZNEFYMlRDaGl6ckRpMWRjbHAyWi9rMkJqcnVBOWxQQXNXTlRkWmw2V2kvWlY3R1RQc1h0aTBhbkhHd2ZSeHlFT2ZtZWUwcG9XdC92YkpCeGc3NjBYR1loSVdMMXE2ck5mSnptUHMwdmVWL01WTFdoZjNmdkxodTR5NUZ1TnhScWJNclpZeFhVWk8xaHpMcUc5WWtvRXAxeU9mcm4xUjRTZUs5MFlkSHR5ek5Pb2gvVTFJUmpHSjBZVjZPdGJEK083b1NjaS9PT29odGFVK2w5eWdXRFJOYkRQYVg4VmsxTFN5WE5iS21NK0I1MHJJbFRWNnZnbTVCdTIxMmp3MG1Vb3N2OHJPazVpQlNSYXRKRWthV2RMY3dxVFBBOHh6aG1oN1lvM0h3MkE0cEtFKzZHK1MvQjdHYmxhZnUwTWJvNHdVcmNjYzZ3MS9oZjNMTDgxbjdMNWZVaysrLzVmVisvOTBhZEwrOTJPUVAyU1dmMGRmL3FsbmY0M2Q5MHZxdmNBV25zeXVhV1czSGxldTQvajBUN1kzNWVUbE5LdU8yZmxuUDk4VzhtMy96TFA2WGpvZHUxVnoyVTg4KzE3VzlyOXBTMzdxcC9zblQyYVZKN1hYd3l2MmZlWkdPcTMvRjVmOFJ6YnpGOVdieXhwT1p0Y3ZJcnVPRTJ2eVdlTng5UTZ4V2Iva2ViL1dDK08vVm1qK0ozYnV2L05adWhaMmJkL24vYWd2QlNkZnMxOXl5VjVXZlRLNzlvSGo3ZElEelB1amZpei9zZTFrWmJSeFZFNzNsMzljWGltRHNWL3hqOHI5T3k3cFBsYXE4aVJXS24zQXhrbmRyT0pvM3Nkc0FXOW1UWDNMYTZheEJkS0hLc3FPYTJjUUsrWi9aejZsenY5TnovOS9YVGdmakwvOG4rN0ZmNi8vWHYrOS9udlJKVjNQbzM4eXI1SHQrOGs4TGJ2NjM5T2ovMTYvOGt1T0lDWHlwd0lQSWNYVnRJWmRwN0lWRmhOaW5vR0lLOHJaRkZhTCtLR1Z6V2VMMkhKMmkrZk0zbDZtZklidm05dk0ydkZaYktuSWxRZjB2dDc3THRPanBhT2ZSbnFiOXpUaE9jZDkwbUN4TElFNWp0cGtlVHkzOG1TZXlodjRMTDZjcitEcitDWitIZCtPY1A0enRjUVhKLzVKQnRKUzVNODlKUGJ6RnhmUCtNbUpxZnNITGZTOUhJRC9KUGJwRVc3NXlXNmduelJLTllXUlJ1enFlQ09hUnYxcnVlUi9iWE9CaXBZNXMyZk5uTkZRWHhlc3JabGFQV1h5cElrVHFzWlhqcXNvTHlzdEtSNGJLQm96ZXRUSUVZVUZ3NGNOelIyWWs5M2ZuOTdQbCtaMjJHMVdpOWtZSFdYUTY3UWFXZUlzdTh4WDN1Z0orUnRER3I5djNMZ2NKZTFyZ3FHcGo2RXg1SUdwL1BneUlVK2pXc3h6Zk1rQVNyYWRVREpBSlFOSFMzS3JaeFFibFpQdEtmTjVRaStWK2p6ZHZLRzZEbnBqcWEvZUU5cW42b21xMXZqVmhCa0pyeGMxUEdXTzlsSlBpRGQ2eWtMbEs5bzd5eHBMMFY2WE1ickVWOUlhblpQTnVxS05rRWFvVUgvZjRpN2Vmd3hYaGRTL2JFU1h4QXhtNWJFaE9iMnNxU1UwcGJxdXJOVHA5ZGFyTmxhaXRoWFNsWVQwYWx1ZStVcWYyVVdlcnV4ZG5SZDNXOW5jeGl4VGk2K2xhV1pkU0c1Q3BVNjVyTFB6L0pBdEs1VHBLdzFscm5uZmdTRzNocko5cFdXaExCOGFxNXA2OUFFOHBFMjMranlkM3pCMDNyZnZzK010VFJHTEx0MzZEVk9rTXNTajA0UjhvUm42aGg1aWZGNnYwcGVMdWdOc0xoS2hqdW82U252WVhHZVlCWEt6NmtOU281S3pTK1RFQjVXY0RwRnp0SHFqejZzc1ZWbGo1SGRGdXlQVU1kZVRrNDNaVjMvVDhZdDhUMGoyTjg1dGJsZTRxYlhUVjFwSzgxWmJGd3FVUWdTYUltTXQ2eHFVaS9KTmpSakVmR1VhcXV0Q3ViN0ZJYnV2bUFyQTRGSFdZSDVOblZvbFVpMWtMd214eHVaSXJWQnVXYW5TTDA5WloyTXBkVkJweTFkZHQ1UGw5YjdibGU5eGJzMWorYXhlNlVjb29RU0w0aS9yckd0cEM3a2JuUzNZbjIyZU9xYzNGS2pIOU5YNzZscnJsVlh5V1VPWjcrSnhYdldKYWkyTTdZVFNvckF5Y24yNndWTW5PZVY2WmJWZzhKVGo1aXNlaFF3cmxrdE5LaXRhUE1wVHg1MU1GTU5USWlVVWRWdzdTTWpwSmVPVUxGbXBXakxPNmEzMzB2VXpYWEpHK3FSTkR4bjZ0R1dGNFdpZjZEay8yVFVxclhRbzAxUFdXdHFuZzhjMXFvMTBNTkxheWZzcEtYTVJlVEJxR0pUbEhDZXk1SFNjWE5na05LT2FsRlYwZUVKc2lxZk8xK3FyOTJFUEJhYlVLV05UNWxwZDM2b2FYMVYxUTUyNjJwRmRVbnRjaXZJTEtCVmlYbVNMaEZTQ1BWaWU1UlRMcXFZcjFQVFI1TGdUc2l0RnRxZlQ0S3VxNlZRYTkwVWFaQjZjSUF4YTU2OXN1cWdnTmg5SHN4emV6VmZlNVBOWVBlV2RUZDI5SFhNN3V3S0J6c1ZsamUwamxEWjhsUzJkdnBxNlVVNjFyMVByMWpuWEtJK0taVlc4cXJZNEp4dStwN2pMeHkrbzdncndDMm9hNm5aYUVTRmNVRnNYbHJoVTBsaGMzOVVQZVhVN1BYRHVxbFZTcklwUlNYaVVoTkxTVkNRTWFubm56Z0JqSFdxdVJqV282ZVp1emxTYlFkZzRhKzZXeUdZVk5nazJEZGtDcWsyNXNFaU9ka3d4M0cyWnAwVlpuclgxN1oyTjljcmhZZ2xZU3Z6eUVQZU5ZU0hKTjZhTFN6cFRLTnJYV2h3eStvb1ZlNUZpTHlLN1RySHJzVEY0QXNma0tENnBzOUVIUDRVTlZjZWNuTGFpckRUcDZlN3RyYTN6dnVUY1YrL0ZWcHNKTk5TRm9yTGcrN1hwNDFHdVFrRWp6QldoanVZbXBSOHNXS2ZVMWFkWE50ZGoyNG9HVWFReUZJVVdvaUl0b0VTNVdrZlpqcWpVakxYQkFxcjFPNUFJZGRTSDZyT1VoOWJOcjFlM3N6WEV4dmxHWU5tcFRhMWZlVkJ1Zldlc2I0aDZObkVVb3RQUFZ5Z0tmV00xZFdSeElvbUgxZE1rNlUzb2ViTVBXYzJOSHN5MmhqWFhZS3VUTDQxMmtxVVZMbEhqYjFVUjdZeGtNbVZZY3JyUkhCMktHb2dHOGF0bzQwRGxTR3JUOWZYMTFIazFkWDZrQUo1dERSblJJMytmcVl4VXdPd2dxMUxwQzM3UFIxZVZvazhvelZSM3M2bStWZkFzU3FmVmx2VElEcG5USzV2Zy9LbStFUlpmZ2Foc1VIeUVNZExHYnJMcWxaR2JNTzl5ZW0xMzc5MisxZDQrVjA2MlQzazVLQnVUT1hkaVk3UDZ6aE1Ob1JsWk9kbUdFNjFtMWR6WmFUQ2Z2QUxObDhGOGxCV2pwd3h2RGNiQ1ViS25XenBuVzVTRGo0ZllJTVRaUXB3bFJJY1Fad3F4WG9oMVFxd1Y0Z3doMWdpeFdvaFZRcXdVWW9VUXk0VllKc1JTSVU0WFlyRVFpNFE0VFlpRlFpd1E0bFFoVGhGaXZoRHRRc3dUb2sySVZpRmFoR2dXWXE0UVRVSTBDakZIaU5sQ3pCSmlwaEF6aEdnUW9sNklPaUdtQ3pGTmlLQVF0VUxVQ0RGVmlHb2hwZ2d4V1loSlFrd1VZb0lRVlVLTUY2SlNpSEZDVkFoUkxrU1pFS1ZDbEFoUkxNUllJUUpDRkFreFJvalJRb3dTWXFRUUk0UW9GS0pBaU9GQ0RCTmlxQkQ1UXVRSk1VU0l3VUlNRWlKWGlJRkM1QWlSTFVTV0VBT0V5QlNpdnhBWlF2aUZTQmVpbnhBK0lkS0U4QXJoRWNJdFJLb1FMaUZTaEhBS2tTeEVraEFPSVJLRlNCQWlYZ2k3RUhGQ3hBcGhFOElxaEVXSUdDSE1RcGlFTUFvUkxVU1VFQVloOUVMb2hOQUtvUkZDRmtJU2dndkJJb0wzQ3RFanhCRWhEZ3R4U0lnZmhEZ294UGRDZkNmRXQwSjhJOFRYUW53bHhKZENmQ0hFQVNFK0YySy9FUHVFK0V5SVQ0WDRSSWlQaGRncnhFZENmQ2pFQjBLOEw4VGZoWGhQaUQxQ3ZDdkUzNFI0UjRpM2hmaXJFRzhKOGFZUWZ4SGl6MEs4SWNTZmhQaWpFSzhMOFFjaFhoUGk5MEs4S3NRclFyd3N4RXRDdkNqRUMwSThMOFJ6UWp3cnhETkNQQzNFVTBMc0Z1SjNRandweEJOQzdCTGljU0VlRStLM1Fqd3F4Q05DUEN6RVRpRzZoZGdoeEVOQ2JCZGlteEJiaFFnTDBTVkVTSWdIaFhoQWlQdUZ1RStJTFVMY0s4UnZoTGhIaUx1RnVFdUlPNFc0UTRqYmhiaE5pRnVGdUVXSW00VzRTWWdiaGJoQmlPdUZ1RTZJYTRXNFJvaXJoYmhLaUN1RnVFS0l6VUpjTHNSbFFtd1M0bEloTGhGaW94QVhDM0dSRUoxQ1hDakVCVUtjTDhSNVFwd3JoQWg3dUFoN3VBaDd1QWg3dUFoN3VBaDd1QWg3dUFoN3VBaDd1QWg3dUFoN3VBaDd1QWg3dUFoN3VBaDd1QWg3dUFoN3VBaDcrQkloUlB6RFJmekRSZnpEUmZ6RFJmekRSZnpEUmZ6RFJmekRSZnpEUmZ6RFJmekRSZnpEUmZ6RFJmekRSZnpEUmZ6RFJmekRSZnpEUmZ6RFJmekRSZnpEUmZ6RFJmekRSZnpEUmZ6RFJmekRSZnpEUmZ6RFJmekRSZnpEUmZ6RFJmekRSZGpEUmRqRFJkakRSYlREUmJURFJiVERSYlREUmJURFJiVERSYlREUmJURFJiVERTN1lxQWxGek9IV01HekZ6T0RVZWREYWx6Z3FuamdCMVVPcE1vdlhoVkJOb0hhWFdFcDFCdElab2RkZzFGclFxN0NvQnJTUmFRYlNjOHBaUmFpblJFaktlSG5ZVmd4WVRMU0k2allvc0pGcEFkR280cFF4MEN0RjhvbmFpZVVSdDRaUlNVQ3VsV29pYWllWVNOUkUxRXMwaG1rMzFabEZxSnRFTW9nYWllcUk2b3VsRTA0aUNSTFZFTlVSVGlhcUpwaEJOSnBwRU5KRm9BbEVWMGZpd3N4SlVTVFF1N0J3UHFpQXFEenVyUUdWaDV3UlFLVkVKVVRIbGphVjZBYUlpcWplR2FEVFJLQ281a21nRVZTOGtLaUFhVGpTTWFDZzFsaytVUjYwTUlScE1OSWdheXlVYVNQVnlpTEtKc29nR0VHVVM5U2ZLb0tiOVJPblVaajhpSDFFYU5lMGw4bEE5TjFFcWtZc29oY2hKbEJ4T25nUktJbktFa3llREVva1N5QmhQWkNkakhGRXNrWTN5ckVRV01zWVFtWWxNbEdja2lpYUtvandEa1o1SUYwNmFBdEtHazZwQkdpS1pqQktsT0JGVGlmY1M5YWhGK0JGS0hTWTZSUFFENVIyazFQZEUzeEY5Uy9STjJGRUwranJzcUFGOVJha3ZpYjRnT2tCNW4xTnFQOUUrb3M4bzcxT2lUOGo0TWRGZW9vK0lQcVFpSDFEcWZVcjluVkx2RWUwaGVwZnkva2IwRGhuZkp2b3IwVnRFYjFLUnYxRHF6MFJ2aEJPbmcvNFVUcHdHK2lQUjYyVDhBOUZyUkw4bmVwV0t2RUwwTWhsZklucVI2QVdpNTZuSWMwVFBrdkVab3FlSm5pTGFUZlE3S3Zra3BaNGcya1gwT09VOVJ2UmJNajVLOUFqUncwUTdpYnFwNUE1S1BVUzBuV2diMGRad1FoRW9IRTZZQWVvaUNoRTlTUFFBMGYxRTl4RnRJYm8zbkFCL3pYOURyZHhEZERmbDNVVjBKOUVkUkxjVDNVWjBLOUV0UkRkVFl6ZFJLemNTM1VCNTF4TmRSM1F0MFRWVTRXcEtYVVYwSmRFVmxMZVpXcm1jNkRMSzIwUjBLZEVsUkJ1SkxxYVNGMUdxaytoQ29ndUl6aWM2THh6ZkJEbzNIRDhYZEE3UmhuQjhHK2hzb3JQQzhVRlFSemdlenBpZkdZNGZCbHBQdEk2cXI2VjZaeEN0Q2NlM2dGWlQ5VlZFSzRsV0VDMG5Xa2EwbEpwZVF0VlBKMW9jam04R0xhTEdUcU9TQzRrV0VKMUtkQXJSZktyWFRqU1BldFpHMVZ1SldxaGtNOUZjb2lhaVJxSTVSTE5wMExPb1p6T0padENnRzZqcGVucFFIZEYwNnU0MGVsQ1FXcWtscWlHYVNsUWR0Z2RBVThKMjVRbVR3M1psZTA4SzJ6ZUFKb2J0T2FBSlZLU0thSHpZanJpQVYxSnFIRkVGR2N2RDl2V2dzckQ5ZkZCcDJING1xQ1JzN3dBVmgyUExRV09KQWtSRlJHUENzWGkvODlHVUdoVzIxWU5HRW8wSTI1U3RVVWhVRUxaVmdJYUhiWFdnWVdGYkEyZ281ZVVUNVlWdDJhQWhWSEp3MktZTWJGRFlwcHpOWEtLQlZEMkhucEJObEVXTkRTREtwTWI2RTJVUStZblN3elpsbHZvUithak5OR3JUUzQxNXFCVTNVU3JWY3hHbEVEbUprb21Td3RaWklFZllPaHVVR0xiT0FTVVF4UlBaaWVLSVlxbUNqU3BZeVdnaGlpRXlFNW1vcEpGS1JwTXhpc2hBcENmU1VVa3RsZFNRVVNhU2lEZ1JDL1JhNXJvVjlGaWEzVWNzTGU3RDBJZUFINENEc0gwUDIzZkF0OEEzd05ld2Z3VjhpYnd2a0Q0QWZBN3NCL2JCL2hud0tmSStRZnBqWUMvd0VmQmh6RHozQnpIdDd2ZUJ2d1B2QVh0Z2V4ZjhOK0FkNEcyay93cCtDM2dUK0F2d1ovT3A3amZNZzkxL0F2L1J2TUQ5dXRudi9nUHdHdlR2elZudVY0RlhnSmVSL3hKc0w1b1h1bCtBZmg3Nk9laG56YWU0bnpIUGR6OXRibmMvWlo3bjNvMjZ2ME43VHdKUEFJSGVYYmcvRGp3Ry9OWjB1dnRSMHhMM0k2YWw3b2ROeTl3N2dXNWdCK3dQQWR1UnR3MTVXMkVMQTExQUNIalF1TnI5Z0hHTiszN2pXdmQ5eG5YdUxjYjE3bnVCM3dEM0FIY0Rkd0YzR25QY2Q0QnZCMjVEblZ2QnR4aFBkZDhNZlJQMGpjQU4wTmVqcmV2UTFyVm82eHJZcmdhdUFxNEVyZ0EyQTVlajNtVm9iMVAwSlBlbDBaUGRsMFRQYzIrTXZ0TjljZlRkN25QbGRQYzVjb0Y3QXk5d254M3NDSjYxcFNONFpuQmRjUDJXZFVIak9tNWM1MXhYdGU2TWRWdld2YlV1TUZFWHZUYTRKbmpHbGpYQjFjR1Z3VlZiVmdaWGJGa2UxQ3kzTDErMlhQNTZPZCt5bkpjdTU0T1djNGt0dHk3M0xKZE55NEpMZ2t1M0xBbXlKVk9XZEN3SkxkR01EQzE1ZDRuRWx2RG83dDVkVzVjNFU4dkJnYlZMek5ieTA0T0xnb3UzTEFxZTFyWXdlQXE2TmI5Z1hyQjl5N3hnVzBGTHNIVkxTN0M1WUc2d3FhQXhPS2RnVm5EMmxsbkJtUVVOd1JsYkdvTDFCWFhCNlNnL3JhQTJHTnhTRzZ3cHFBNU8zVklkbkZ3d0tUZ0o5b2tGVmNFSlc2cUM0d3ZHQlN1M2pBdFdGSlFIeXpCa2xtSk44YVRJVnFVRGsxTFFFK2JreFlPY0FlZTd6Z05PRFhPR25MdWNjcXdsMlowc1pWcVNlTW5rSkw0bzZjeWtTNU5raStNVmh4UndaR2FYV3hKZlNmeGI0dWVKbXJoQVl1YkFjcFpnVGZBa3lQSEsyQkltMXBhclhGUktQSGlvT3RhSkNUNS91U1dlVytMZDhWS1pPNTR6Mjd1MkF6WTUvbkhySzFiSll1RVdTNjlGQ2xoUTNCTGpqcEdVVzIrTUhJZ1pQTHpjWW5hYkplWFdhNVlUQW1aWWxCWXpURk5xeXkxR3QxRUtGaGtuRzZXQXNhaWtQR0RNR1ZUT1pPN2hYUGs2ajRmTEJwVGR4dVBkNWZLalhQbXlrWlp4dnFtcnRpWXJxNnJid0taV2hReFRab1Q0QmFIMEd1VWVxRzRJNlM0SXNXRERqTG91emkrcDcrSlNTVzNJcnZ4RnJabytkK05HNWlxdUNybHE2c0x5TGJlNGl1dXJRaDJLRGdSVTNhdG9oaUwxV2JPWExsK2FsYlZzTm02emx5N0xVbitSNHN1VlZKWmlWSDZYTGtOYStWbXVwbG5XejE1VUREUm5LYTVsRWR1eW42LzAvLzNpLytrTy9QcXZMcVo4djJCc3IzUU9hNUUyQUdjRFp3RWR3Sm5BZW1BZHNCWTRBMWdEckFaV0FTdUJGY0J5WUJtd0ZEZ2RXQXdzQWs0REZnSUxnRk9CVTRENVFEc3dEMmdEV29FV29CbVlDelFCamNBY1lEWXdDNWdKekFBYWdIcWdEcGdPVEFPQ1FDMVFBMHdGcW9FcHdHUmdFakFSbUFCVUFlT0JTbUFjVUFHVUEyVkFLVkFDRkFOamdRQlFCSXdCUmdPamdKSEFDS0FRS0FDR0E4T0FvVUEra0FjTUFRWURnNEJjWUNDUUEyUURXY0FBSUJQb0QyUUFmaUFkNkFmNGdEVEFDM2dBTjVBS3VJQVV3QWtrQTBtQUEwZ0VFb0I0d0E3RUFiR0FEYkFDRmlBR01BTW13QWhFQTFHQUFkQURPa0FMYU1iMjRpNERFc0FCeGxvNGJMd0hPQUljQmc0QlB3QUhnZStCNzRCdmdXK0FyNEd2Z0MrQkw0QUR3T2ZBZm1BZjhCbndLZkFKOERHd0YvZ0krQkQ0QUhnZitEdndIckFIZUJmNEcvQU84RGJ3VitBdDRFM2dMOENmZ1RlQVB3Ri9CRjRIL2dDOEJ2d2VlQlY0QlhnWmVBbDRFWGdCZUI1NERuZ1dlQVo0R25nSzJBMzhEbmdTZUFMWUJUd09QQWI4Rm5nVWVBUjRHTmdKZEFNN2dJZUE3Y0EyWUNzUUJycUFFUEFnOEFCd1AzQWZzQVc0Ri9nTmNBOXdOM0FYY0Nkd0IzQTdjQnR3SzNBTGNETndFM0FqY0FOd1BYQWRjQzF3RFhBMWNCVndKWEFGc0JtNEhMZ00yQVJjQ2x3Q2JBUXVCaTRDT29FTGdRdUE4NEh6Z0hOWnk5Z09qdlBQY2Y0NXpqL0grZWM0L3h6bm4rUDhjNXgvanZQUGNmNDV6ai9IK2VjNC94em5uK1A4YzV4L2p2UFBjZjc1RWdBK2dNTUhjUGdBRGgvQTRRTTRmQUNIRCtEd0FSdytnTU1IY1BnQURoL0E0UU00ZkFDSEQrRHdBUncrZ01NSGNQZ0FEaC9BNFFNNGZBQ0hEK0R3QVJ3K2dNTUhjUGdBRGgvQTRRTTRmQUNIRCtEd0FSem5uK1A4YzV4L2pyUFBjZlk1emo3SDJlYzQreHhubitQc2M1eDlqclBQY2ZiLzAzNzRWMzdWLzZjNzhDdS9ISE5tTThhVWYvZmZzL200TDA5UFlhZXdwYXdEUCtleGpXd3plNXk5eGVheURWRFhzbHZZWGV3M0xNU2VZTSt4Ti82VjM5anVXYTFkeUV6eURxWmpjWXoxL3RDN3IrY3VvRnNiMDhleUdhazRqZWVZcGRmYXUvOEUyLzZlemIzV25tNWRMSXRXNjVxbDEyRDlpaC9wL1FFdldLUjdoeWxwNlh4b2kxcmpDLzFOUFEvMjNIM0NIRlN6QmphRHpXU3pXQ05yd3ZoYldEdWJqNWs1bFMxZ0M5bHBhdW8wNU0zRHZRMnBPZXEvWVdoUjliRlNpOWhpWUFsYnhwYXpGZmhaREwwMGtsTHlUbGZUeTlsSy9LeGlxOWthZGdaYnk5WkY3aXRWeTFya3JGSFRxNEQxN0V5c3pGbnNiRlVKSnNzR2RnNDdGNnQyUHJ1QVhmaXpxUXVQcWs1MkVic1k2M3dKdS9RbjljYmpVcHZ3Y3htN0hQdmhDbllsdTRwZGczMXhQYnZoQk92VnF2MDZkaE83R1h0R3lic1NscHRWcGVRK3lwNW0yOWtEN0VIMmtEcVh6WmcxbWhFeEwyM3FIQzdHSEt6RkNEZjA2VEhOMzhxanM3VWVZMWZHMWhrWjZTcll6KzVUWTBWa0hwV1NHMUNTV3FGMVVGcFpkOEpNYk1JWVNCOGJFYVd1Vk1kL3pOcDNWbjdPS3ViamhqNHpjNzJhVXRTSjFwL1NWN0ViY1FKdnhWMlpWVVhkQmszcVpsWDN0ZDkwdE93dGF2cDJkZ2U3RTJ0eHQ2b0VrK1V1Nkx2WlBUamI5N0l0N0Q3OEhOTjlGZkVEN0g1MTVVS3NpNFhaVnJZTksva1EyOEc2VmZ2UDVaM012alZpRHgrMTdHUVBzMGV3UXg1anUrQnBuc1NQc1B3V3RzY2oxdDJxamRKUHN0OGhyWlNpMU5Qc0dYaW81OWtMN0VYMkNuc0txWmZWKzdOSXZjcGVZMzlnYjNBejFPL1p4N2dmQWRUL0o2Vm5xZndhdkliTTlLeVFUV1NUMkl4SG1SbnY5d1EyZ20vZkhsOWFhc2pSUDRaM3Q4UThlUHNiOFBHOEpHRFJTT1lkeWNsRnZoMURkUnRsVzJVM3o5bFdwTitJdUxib3lEdEhYczQ5OHM2KzJNTGNmVHozN1QzdjdMRis4Ykt0TURkdnordDdCZy9pTnE5TmhUMUcwdXZ0T2wvYVFHbG9objlZWHQ2UU1kTFFmTDh2TFVaU2JmbkRobytSODRha1NySmRXTVpJU3ByTHJ4MXVrQ2NmMFVucmZVWFQ4clNweVJhN1dhZVZVaHl4T2FQU3JUVXowa2NOZE9sbHZVN1dHdlQ5aHhlblZTMG9TM3RUYjNQRko3aGlEWVpZVjBLOHk2WS84cFkyNW9jdnRUR0hTalFMRGwwaDYwYk9MT29uWHhOdGtEUTZYWGVxSTJuQVNHL2xORXVjVldPTXM5b1NEUHBZbTZsLzZjd2o1OFduS0cya3hNZFRXMGNtWWxydVkweHpLV1l3bHJuWnlvQ3J5TXZqSEZZK01jNXF3YzF1eGkzV2hKdkRpTnNqK1BEQ1dITHYzcTBva2R6ZGUyQ3JKY0ptbGIvZGFsSjU3MWFVVG40RUh6T2ltSU9id2pIVnptN3U3OUxXc3FKOVJaalhQZXJyN0hXaXdZTm1LZlBwODZiNWg5cnloK1Y1TVUzNi9JR1N6MmRUcGxWejZiUTdEOXpWc3o4eE16T1JwOSt6OThicTdmbUw3ajN2d2E2MTl5NHBsSzY3NTlDZFU5MFptck16M05OdjMzdnQvTzNuakQ5c0c5UHhoUEl2dis3ci9VR3V4Y2d5Mk13dWZWdzM5VG91MHV1NFNLL2pJcjJPaS9RNnJsdXliVGU3V0twTDM4MU5XK1Bpa25UZHZQL1d0T3FrSUNzcWl1eUwzTjIyUXVyOEVHd0t0Zk0ycGR2eEpNV2FpOUhJdFpwb3M3N0h6M2ZwemRFYVZRY01kayt5STgxdXlFeVV5bFhyN3JnVW02Rm5uTjdxakk5ejJxS09mS0EzNjdWYTNEUVBaTGl4V01xL2RWTkc5QXhHbE1JeTJhcXVmcnJJbUhTUk1la2lZOUpGeHFTTGpFbUhNUVVTYlM1bFhWM0t1cnFzSmpPZjRQSWd6Nlg4SlRlenBYZno2SzA2bmNuWHpZMWI0NnROZlFaTHkyUTlmcnkrRXdlcDZiTms4ak9CbGZldjJod1Y1MDFLOHRvTkE1SjUvSUNKOHhkT3lOdytjdnFzN0p1dm56U3Z2Sis4dWVtRzAwYjFERFNZbEZHYURKcDcrNmZwRTR0bXJwNCsrWlQ4bUNNSCsxYzBLMnRvd1lqZndJalRXT3NPUndCamM5aVk4a2R1VU95Zkh2N0QySWkyM2wzYmtXZlR4U3JMNllxTWNBalB6ZnBDSGRoVFdkYmRXVWNYOCtqZ3ZPTHNxdXY0aGliS2JPaTV3bUQzSmlsckIyVTJhTFc0eWVjWXpGR1JOVHgwMDlFeHpUWFlVdUxpNkxBcDYyZkZhTjdYK0ZrLzFwOVZiWGNrWnBqODVtNkpCNklTL1I3WWpQN29ibWxrd01yODZhNEJHZCtiVExHdTF0aDJiVHQ2V3FTc2hTMjJrQ2ZsT2w3Zll5c3NqQzFNdHI1Tll2Q2c5SVFFbmVxTU1qSzgraGpabCtiM0R4dk9WUStrU2RUN1pLLzhwbDYyK3IzZWRMdEJudDRUbUtxSmp1dVg0dkxGU0FZK1gyTnlaS1FtK1J5eFJvTzhUbnFRenh1VmtCeWprWFdtcUgyZlJwa01zalltSlY1K3loaWpsem1ja3NuUTBST3RyTXpDM2dQeUJzMGdOcFNORER0WVJyYzBKaEJ0U2ppVTZ5cHlTYTYwYmg0Yk1OcmFwTzg5Z3djTmxnWm5kL09oWGZyNThLK3Z6OXFuM3VBRVh0K05udHRqTkgzOG95WStNdk9LSjQyM3AwcktkbEw5NkFaRGNuN2xyT0VMd21lV1YzUnNYWkE3ZmZ6STVDaU5QbHB2OUJmTkNwUXZyYzdPbmJheWN2VDAwZjNOT29OV3ZzYmxUZmFteEZWYytOelpaNzE0eVhocmlqZlo1NDFOdGhuYy9WS0h6N3RxMXR5cld2SlNmYWs2VzRxeUxyY3lKaDlHUktyNHdMUkhXWnhVcUxnNXlSNklpbkljakdseEh0VE9FNTVMZlEyb0orRGs3a28rWE5uNTdNWkQ5bjc5N056VytjU0cwbEQvNFBrTEx0dlVkbDU5dHVTKytNWHp4cnE4OGgxZVY5azVqNitmZXZHOEVZZjNEMjY5V3BsUHBROHg2RU0yRzl5VmpPbTBCK3hSbmpoUEhJdEsvczd2MXlWOWIyN0orRjVIL2FDRCtWSmhZVzZ1ZGM4UWRSYVA5NS94UC9KSjZ2Nk4wZWlOdWlNZktaMlRZdlZHdlFacGZVOGpuNmZIMnNzRzZHdjUzVHJZU3pGVmV1b29IRkpzYkpMRjBQT2kzcG9jWjB1eTZudnUxRnVUbEI0alBqK0FIdnZZd0M2dFRlbHhiSXJSNkdRcFR1MUJteTFSYzhqVGt0aCt2Tk9rN25LOE9YL0dZU1pJQnl5V250VjhzYzZrOU5DazY5bGtnQ3R4d0pWZ1VnOWFMUEpiL1R3OTJ3eldwTGpZWkhTczFrQWpNY2pQZTExZVJqM0RXZld6WEpiZjVUTXBYM3BKN0dkVXZsck5FZ2UwOWxQMlp0U1BEbGVSNHVtR0hKdE9PdjU5dWtZYk1SNDJJZVUzRFBIb2w4ZXU3MG1GUDFkN0NOL2dTUExZRGZ3OXZkM2pTUExHR3hMRlJQT25lMFlJTFg5NWRQcWIrWTFDUi9yT3E5RDNlQmEzRTN2VHZpM2EycXIyRXB1dmI5ZEVKM2lWZUhTVThrQTgrdWdENWE5MHBIUzl2WENBUC9DWjJuTWxQMkkzeG5TUzN4WjVtcllWYTFqQUtyWmx4K2RrT0xwNWJ5QXF6WndiblpPVGxoK3RwR3dzYldoTFRvSlJkdmxiWE8zV3lKUVZ4U1lXMHBURkZvN09qUzBzeE16QkcvWHRvWTlIbkJJLy9tMmhkRHVSNXluK0tXOUlRcnkyVlIvblNVenl4T3Fsbm9zMHZ2NElVcUxrbm1zbGZhd25LY2tkcS9jN0ZyaXp2WTRvbnFuaFEweEozc3lVdHFSK3g4YTQ4dkE1SnBPc2k5TEphdzlmZU5UNlRKckhsTnpmZVNSZmVqWjFRTExSa3hiWkZRY3dzeU94WDcyeHlsZGlValNEdXZrTEFUTkxHZFpxSEpDbzdGZDVIbTJJd3VQMmcwNDU3aG5jNzgvdzJaVTk4S1BoeENVa0pPWU5sSTh0aTN3Z0xYbXAyMi90MmR0L2NnYm5FdGZiVWhJY0xtVTRhMjFPTzE3MVdjRk1pZVBTeGFZa09sdzJYWEdheCsyVmpGWFhUVWdiWHpVKzdjaGpmUWRqc0Rpc1BmMnFiNTNhUHhpYzFwOS9BeitzMGVDbWVLKzIzdjJhVXMwUWZKck9ZQm1QTTdzMEVndWNpbnMwUytLV3NLVU5MM1ZMbDNiK2oxeFluN2hVOVdCOWZLNm1kT3laajY1WnMrT01VY1VkajY1WnZuMXRJT3dkdjZxdWJuV1Z6MU1GWGpQQks2V2UvY3BsazByUGYvNjg5Uzl0bWxSNjN0T1gxbTFlTUNxd2FIUDFqS3NXaml4ZWZLWHFXVEhucDJCL3VWZ1d5Kzd5Nng2UjdNeUd6bzNDcE5zeXZ0RnFUZW5meHJlWTJ2dUdHeEVmY1pJb0l5RXhWZGJuK3pQOGZ1RnRUOGx2dnJUMUNuRUMvQTV1OXBWNlJzd0lwRzB0SGhPZm0zRDVUU01yQnlkSkg5U2NQU08zNTdLK0U2clRtL0ltdFk0Zk45ZW0xZllzZEErdlVrNURaZTkrNlRCbXNvcFY3V1RGVXV4MmY3NC9QOGFsZkVlUXhXQ3JtQU5SaFdNT3VrcTBXVzA0R3JhSFBIR0Q0cVE0bkJtek9yM3F5dzFiNThqcjZqaGlGZjk4Yks1MVlxN3B3OExSdE82RWQ1NU9Panl5N1pLYXZEa1RobHIxV2ttQ1l6UG1sRGVOeXBrdzNKMVYzakNyb1dKQS9zeTE0d1pNTFJrY28rWkg2YU15UjAvTnl3aGtPN0lyR21ZM1ZHVHpqUEhMSm1mSE9sT3NSbXU4MWU2eVI3bDhyb1RNa2Y3TTBibnBBL0xLbXNZRzVvL1B0Q1lrV1l3Mmh6VU9yOFZrVjNKOGVwNHJhOHpBalA1RFNtY3IvMmNEVm00TVZzN0QzRjFNQStlNU5jR2lzWGJ6bUszT2x1ajJTUEMwKzR1bmhEdi9pWkJwakNXbVowOVVyRGNwMlkyQWFZOTQwVWg3bGNXUTMwcjNIajc3NkxLc045andybkhhOUhxYkV6MjR1WGUvdkIvbk5ZdjFlNVI1cERqczZnVEp2ajNhMzJwdGRSN2Iwa1VuYnVsanJqcXltZnVjeXYyalQ3dHA3cHdiRm8zQWxuRWtlK01NdnJJNWhZV3pTNzJHT0kvRDVZN1Q4K3VXWFQyL0lLLzF5ak9seGNKN0hybWhxYlUwTGEyMHVVNWFKR3pZMnpONzk4bEY4dk1zandWWUtPQ3hGTHVMYzR0bFkxUml2Z25SWjc0VjRXYSs4ckVwMzJxeDhnbjUzZnk3QUQ2TVpGZ1lOekVsQ21jamxJQVZSVWNvZ2FvNXdrYmliVXFkRWQyU0lXQzNKVDdGOHEzNTBzaGQrWnpsOC96OGdXTUhkSE5ud1BKcUdrOUwwN2crR1RoKzlGOU5FelVzTnhJYnpGSWl4ZHhacDgrZUpUNXI3YzZhUFV0NSthb2hQSnowN0Zud2FUb2xUaHc2bEp5MHVtSjVReU51SUdMUnFKT21wNDJaa0RkazJIQzV5SnJpVEhiSGpMeXN1bUpwZGM2WVpmZk1YNXN3ZUZMaDZLYkt3U2FEQ1JHWnMzaGFXMzdUQmJYK096YVd0aFM3NjZlTVhUVGFZVExoczRXcG9hZzh2Ynh0N0lURjQ5UEw4NmNNZFdKVDRpVnVTWElsKzF4eDJjSDF0YnNUYzRveXkydUtTN0g2RFpoZGovd2M0c3NMdTFLVW1GOEo5Y0h2S2pQRmxCbkNUQ0h1cE04QUdaSFBBT0Q5eXBSbVJLWVMvSWxTQVFHVk1XRE9qZUV4U1IrNUE5SG1jVzZFQWRLMnVQSHlwNE9WenhQL3c5Nlh4N2RSM2Z1ZUdlMkxiUzIyYkhtUngvc2lXM0ljNzNGc09YRzhPNHV6T0lSc2lxMGtTcndvc2h3N0s4WUVHaWp0aFRSUUlHRUpTeEo0RkFpRVFpa3Q2WVZTU29GSFc2QjlGSEpkU29tYU5tM2F4MDBEaGVoK3o1bVJMRHRMMDlmN1B2ZWZ6cy9mbVRNelozNXpmdHZaWmp6U3hMVFFUcXJ5bUthVHhySDlERnR4emxYaXNPY1ZjZWlEdGswWlZXc2ljcFZpNENxbjlGVUZYcUd5MXJZdmQ3cnY5SlEzYkxuN0d2dWl4dklralpJM3hjVGwxUzZ0R2JrdXc3V3F0bnBadlYyUERxenNRYVBWR0dQTlNUTzVkand6Zk9OTDIyY1prak9UWXMxSnByejBqUHlNNTU3b3ZtRzVQZHVlcFRhbkVWRXZ5bDhwUnNrdzJmYk1oaldMTnRIL2tTcXBYRVJTbitjK2V5WXZiMDM4ZDduUGlCcTFsODZWdk1aK1pyQzV2bVpCRFYvUzRlcmdhenBxT3Bycmc2VzlMYzBRMWFWZDBVbFNaWmtkc1IxV0tybXNqVVVUYmZyTzFNODhZNlMxMTZwVlVvc0JmL3AxNmNsM01QU2c0dzJ1b2tJS3NFaklNUzJvSmcvazVrclZtZnpTU2txWW9rcExJanhSVktvc1FUN2EvRy90SzNhMFoyclFBMGhLajFjbGxqVFBxTnN4VDgyNkNXYTFMaXR1ZG5kVlNuWXgwMmhNVHZXaWFrbWpTK3NMbVVhcC9tZTFkelA5dS9xK1BqK2h5SndZUDJQOVBkNkNlUldaTWJLSzl0Ylo2MjkyZi9tQldrZGJVWjJhait0YzNaaTlmT21YWHcwZmtmK001OU1yV2dycU8wdGlqY25HdkhSYmRycG9pU3htaVFTRDFhUzM1cVF5bSszNTNtaTFTcFU2dDJpT2Y4a01oVW9YR3lQYVNmR1NZcERzSm1QSHlZaDNnWXdhcXFWeVFTeWFpODljdXBtelp5NEFqY1RucnFDdWFSbXA3MXJReFpmMHVucjVydDZ1M2pYZHA5cDJ0cXloWnRMNE8yY21uWW1kM1FJTHk1OHQ3cHg3UnQzRW1uSVlxVFRhVkd4SXhSb2Q0MHkwb1laWDBaU2l6dzF6UlpUTEp5U0l5bGZTdHRVU1pReTUxR2ZMekoxYUUxeTFCZmxLUzd6ajJ2SEZpM2QxMlQraE5ZSFI4RWxsVTJKMmFvSmFvVmJLVkxHcGVhVXB6VDB1MjBpY0NjTm8xWWkxZUU1Qi9oeUgxVmFpVWZBbWZVeE9WY1NPNGNpSWppUFljVUdDWFhZOHBkRStaN0RMNFZoMi9kTFZLbU95R1VNQjI1WTFHcTFHRVp0a3NtWEd4T2hVT2UxRDY3alBoV3cwYktxMjJ1N0tsTlRTcHNLcVJhV3hKbXUwSmNXWWlvK09QbGl5U2tuN0xXdFIreHhVOUpOY1VrMis2a3F2bjhYcFVxcHBqVjZ0UmUxU2JURFFGZXFiYWxyQlY5T1FJOFFwMWsxT3FVcHlTbFdTVTZybG5WS1Y1SHllMTdxMDVvd21YWFZlaWp5MmtMNHFtTlNHNWtIK1RHeW5vb08ycktqRldlOTZ5andacmJkWFJYclgwZFUyd21leWhZc0VIak5VcGV3Z09wN3hkT0t2K2U1cmUyN3R6aTlkZC91YUJUZTRWUEhwR0N5WU5JZm43bXFzWDE1cFRTaGIxcEF4MjlXVVoxV0xveTcxU09leXpodU9yUXQ4ZDAvenZMbThMandkOWVXOHhkMjE2M2E2R3NjOXMwMkZjMmRRYmEyQ3R1NUdTMmduWmVRSlY2R3pvcjVpc0VKbUZ1ajhta0FuMjh3WlJRYW9vSWhxcTRpcXNZaTFpYWh4UDN1MjBmNnduYmREU2M4aXA3MU1MbFh4Y3FrbVovczZ0aFViUlRuVlgwWkcwWS9HNUxmSitSTnk3bTA1SjVlbk9qL0liVXM2dlRiV0Y4dkhhazZuZGtyZE1kWWVidkdIRzhMU0QrMWlsWTdEMHRRak9pK1g5V3JzNTFVd2hhcGtkK2RadjN6YTF1UmI1T3B0ZGVyUkJaRHhNcFd1WXRrVzErQVJmMDN0bGdkNk50Mnh0dml3Yk52STdKVjFtVHpQNTJXMGp5NXpKQ1FucUdLdHBoaHpuRjVuVFRMWGJYOStlK0E3MTg5ckhEcXczRHkrMzlIaHFhUzErdDNvYlQyZzJFSkt5YmJqOVdWYzRlUjBaT2dza3pwcW5sS2F0K1RPdXhKdE91cU9PcXBSSGRXdGpxbFZSODlwaVF1bmlLM1FpazZiOHJuaXR1d21hd2R6TDliVnhuamNIald4TjhXM0xxN05JejBxcWVLWFBhQTIwY0dtU1oza2FDMnAyOW1vcGxXMVlGWmhLTWNPTjkvV3VtSkhSNGIxOGpXc29pbzhodm55dDJKOVREM3BSb3hTRnltY0dQMW1rRnVmcTg5YWtEV1lKYk5JL1NPTHBBTzJiMmJiQ1JwcEZpblNMSkxTTE4vbHQ1QlVraUJxS2tHNktrRTZteEJXYVFMVTlHMXR1Z3RYMHRlbmoxc05yVXcvNzUyeFM5NGlSWjU5cW5Ja1haaHByWWphRWhxeGNIWFRGV0F1bWxWanA0aW9RTFpISlFxczRrcHFDZ3VxQWNueWlyY1JPd3ZKYVZlS3lhQ1Q1dHB6RFRvOTE1R1hSTmUrTHE3cDRubHFTRGQxUHZ0MHhDOXNOZ3VTTmx1cGxycUhscnFIbGpMVk12ZkEwT1d6NXhhNmpGem53cm84aVcxVWYrbnN0UDRVVTJMZWQ3bnpjRTREcDN5NnZTMmJOa3N4RFcxMVRjVlZyY1VkRWJjU3V3NlIrZjNxZDBRUE0xWkxyc2E4akwyQ2VDVlh1NXp2SllpK2x5ZytXRWxRdkMyNm9Ga2RYOVRvcUI2aTNZT2t4QXl6eWxJMDExRWRpSGdrSFY1YjBneXFqbjlycmJxbXNjUlF2S2k5T2J0N2EydjZwRzltVlUvenpZdVB5UGFvZFJxWlRLTlRqeXhka094c3lKL1JXR2lHMDNhRVl4Y1dMQ1g3WFhHaUJlbEtDdVBwVnJyTVV3ZFlMY1dtbysyS0dNMjBjUkdEbThVMXpqOG5CYlNCOWQySzJ3cXQyYTFoMVp1cXFkckRhalpNMGZaVmhIWEMzd3ZyaUJLLzJmbDN3bnFLb3FDZ3RUU3FhVi8rSkRSRVp5aU91bExyQzdoOEUxZGc1SEpqdUZ3OWw2dm1jbFZjb1l3cjREbWIxSGphSklYWnBOYkFKclVHTmtsaE50b0kySnhhVGh0UG4yckVVM1hGMC9ZbW5qNnRpcWM2aTMrQjF4SVNPdkZjSE9uMHdVeFcrdDU5WEZzVyt2M0hGSjNTWk1ncVNXWGhqajVVRmw3KzNoU0o3R1ROMExmOGc0OE1WRlFQUFQ2RWJlVVRLWFdiRnJSNkd6TlM2amN0YU5uVUtIQy9IZmpPVGUxemRoLzNZOXVHN2M3VzhYWFZaV3ZHTzl2RzNkVmxxOGRSckVXaE0veGIwRTByZWN1bGQ3Ylh0eTlvdjY3OXlYWkZnK1FxRFpLck5FZ2FhYUJESWJPMGI1QzJPcnJsUG5DbFo1ZG1sK3BUcUFlbFVPZEpvUTZWUXIweGhXb281UVh1SEZXSlMwdUhuM29YanV2cHk4NjU0RmV2ZjFMUDZ4MGZWbXAvYjF4b1hHdjBHV1dWeGtxanBmWlhEU21LZ2paTFVOUVpZbHpxYnhyT0dKZ0M3VktZMjhYNWpraU5LZWxQZnRYVEhtL05YRDArdjZSN1hvbEZLOGN3VzJldlgxWlYyRmlha3VkYXVIU1JLNitnYTBkWGRrdE5RWUpLSnBPcHRFcE5aa1dyczlCVmtKRHY2bHE2MkpYSHhjN3JhOHVOUzdUR1o2ZWJrdzJxRkNIRmxGV1JrMXVXbjU1cHIxdFdXKzV1TGRLYkVnejZPSXVCVG1OYnJCWnpWa2xxWG5tK2tGbFl1NFNJdGxEMG84KytqK3g3aVZSeEh4QVBXUW1OTlJBZk4zRTh1OEM4NDBiYWQ2K0pzOGIxTjNnYXpIRng1Z2FQdlBONjBybWpKZjNNY0ZQVnlrMU43Yi92V3RpMXRzdlhKWE4wT2JxNlovNDRkMU5iZDdDcDg4YTRNOWFXbTlISll5Tk0rRjUwMTkxQUIreTA3dVNjNk1FbjRwRFRhYW9XZS9FbjZZU1k0ZGRSZzg5TGR0TDU2ZXBNdUtMNm93WmNseGtUS1BwNTlBTFQ4NTJXNWw2WGJVZWNpVDduMm01MW9OTSt0d1FEZHJXTVRqeGxscmRGMitES0ZpeGV1TG5PYWpkWkVrdFczckNrYStlU3drL29Vek5UM0ttS0ZrdE9hcnhLcVZiS3J6VmFqRHBkbkVhSlR2eDhQamE2RXoranFjRFZsaXJZTG1HOG1pdWJ2c1k5TDFlcFRHckpuVE80YU1ySVFidEtHamxRNjJlRS9zVDN5NzlGYXNqSzR3WEVtRlVzUlZ5eEZJbkZVaVFXUzNWVXNWUVhGZFBLVzU4WVUzd21xeVV0NWt4aXl3eHFacFZvNWpkcExUTlQ2c0cvK1VwcDFDT3ZhRHRleVJKOHY5b2dGRGdTbTNwZGFidEZPK3dLZHpOTzBaRVdORmpaakpGV3ZGcWhVY2l2VGNzMHhFN1YzM3NxNUpKcjlFaE1senNVb25MTC9xUnc4cm5jVWZwNkdaL0QwMStXWWZxUWZRQjlOSkRaVHpzYkRQVHpMSGFielI1SFkwQXZLN2MzdEJqc1oyYVZ0OFRUb1V0T3AwWWN1cndKeithY3BSL1NLUVA0cnhQRHoxSkwxRXhCeHQ4YmQ0WlZJVHRxczRTSC9CZWNVUUplWGh1eTUxS1N2L2htcENsS21KVFRsSlpodkt4U1JGbmxQNVgvRWdHL0ZyTEcwdjh4dHM5ZlRpVk5qNWtUa3dvaTVmWWxaSDVMUTh1c1dVSkxTUXZmc2p6V2ZxYTh4VVQveFN1bmMyV1V5UkhicGErc3FuYlNtY2xYbkRPalJ1Uk1IWlAybjZhS2k2TTdySXJKUjA3R1N6bUkvS2RxbzYyQUJtcTk3VUpEbEtZd1FJbXo1VjlhVjl4THRNT0V4bDNOUnV1bTJGTVZ6WWpDQkVRaDlhRU1RNnhXVWxlVUZvM3h4cGlZbU12cGtlUENUNzR2aEtZN211aG55c1hNejQ2TGZxYmd3MzZtYklEdU41Rk5UNmZYTFdEdXRhbDBVK3ltVmFzMnhjcFM1dFAvKzU0emcxQ2I1S1FzaHFKZGliMmRMUjExTFROYTdIYWhxcVNLcjFwQVVzN2t0TWlwRVJLazZsVXlRYjBZZjlRZldiM0tERUdkOG1yZE1FcjNHVmZoeUp3bjJsT042WmZ4MUVudDgzUFRFcEcySnRMSGlNNG9HMHphVk9hSWR1UXJSSGUwQVM0ZkNWRU1vUDM5ZEtaRDlpSjZyL3RjNmVpejZ2Sm83eUdQOWg3eTFIUkV3TVlNZVFZMk9PQSsremFoQXdlU0x0V0o2VktkaU8xNU5xaWlDVm9wcG9kSFdlbFMveVNkMmxWakxtN04weW1zclJoQ0tDYW5POFRIYlZMWDRaMm93Y0pGMHgzVDV2WXJLaWNuUGc2cVRHa0ppV2xHWmVlZHJKTktuNzlTQlNjNlcwcnFkc3hUeGFlaksydlNSUHF1STB2bjEyNjRlUjJmR2U2d2Z2bnBnalZ6YzVZdjVZZkRSMmpmdFpIL0llOVNwSkJpdEF2dFQ2c1NhdWhIVDBoV0ZpbDducnZHbFJhWGM0Y2dwQ1RjTGppNEVvZkx3VHNjMnBRNzhyZFVma01ia0ExSmN6bDBCZ0l0UFgyNjlldFhXSzFZTFQ0MXlienM5UHRrNHh3OSs4NWpqSkNSbkxPcXBxaTlJajIvdlcvdWtwajBtYms1dGNVMmRZd3BkbGJ2N01aVjFjazNkZVhQeWpXVkZoWFZaL08vMGV0MU1TVTVCWmFpK2tMSHZHSkxWa3BoYW93cHdaaVZhbzYzSmFWVmREckg5QmJCa3BlWG5VY2prY3FhcExDU0VwTC9kQkxKZVo2N3hSV25UZmhtV3VaZGNWdGtkeGZsSDFRRjZMUUtuUndQdjhEQk1jL1B2YmhUcHhUTHpBWVdmQkw2RXBrclp0MTBpNzE5WTEyOFBUODNVYWVVeVpSYWxVcWJYNS9SM05IZVptL0kxYWxVcUxIS1lrd3gycVNNTzcrMllLZzlXNmt6R3JXeHBsaGR2RWtyejBoYzYxNTdiVnFXeHBnRXU3U2dyTnVWUnBKTnlrbnAweHByK1hjNStpbnZZdTVtbDhHWTNtL1Z5UEtmc213cFBhQ1Bza08xK0t3b292NnJuVWVENXJkYk00eVdPS1hUWFR2bjJ1cGtvV0ZOL1l5dWZGVmNjbng4c2tHNU43ODVQN3NzUFU1dks4M05iblh3SCt0ajVFcU5zc0U1dzduQVc5czB0TUNlbThzNUZHcTVUQ1pYS3k0c2RqaUVzcmxaMlUzbEdmWnk2bVBOa0dVQVBwWkRIR1RPTVllY2ZoQXB4V2hNeVgyZTYzWWxraFR6L3RoWWplTjJnVTUwSlJYc0U3Wm83a2dLaE44RTJSSjVXZEVVL1g1RlpFN0xrakRGUkpNeld2eEFzdm5DN2FhQ09UTnk2MHN6dEZwMWJLWjlScVZ3eHgxNWJac2JtMUR2ZkVVK3J6R3JMTnZNeTBteU5XOTJvVVVYcHpjbnAxcGo5UnJGdmp1YXRzd3Z6RzlhWFdGc2FrL01MN05SLytuamY4THZWcHJoUDg1aithYnZjdDBrbGVpNDVhNDRrbXJNVDR3OVp0K1MyWjg0cEJnS1QwSlZUMzNjS3daNDdwV25udmpkS2tOS1BIcDVpc3FxckpZQ2hVRTBnVkxjS2h3clNtb1dsVnI0ajZGL09UVUNWOVhTN0N5K2NFZDRYNWFxb0U5TnNicnc0OEw4N0xyRjFkUUNidjRuSEsvNEc1dDN5bnFKV0xqMzZRZnFJWUNXcEhQSng2MEdIeXYxeWZEemMvTkY1YXVNbWc3NlQwVmNja0s0VkFuSmNZcVl6QkpIUnFhakpHT3lYSHdTdXJzOGo5VnpoVFpiUVdGNldJT3kwL0NFSnVJNlZwRkZ2MEhncURWU3owNGxUZkNGZUczc3NZWXR3ckhxTGJVVkJhVytncUdJTmlmblhweS9yc2JmRlZVNmZaK1dXWndFc0lTblYyU25VWFl6bGFHc1hKaWJyNHhMTmlla3hLbEt5elBuUkhSdXpjcEtMRjA5bzNWcFVzcE1wek9wWnY2TStNdnJmZm8rbjZUSE1tZW1vOUtabW12VlpjL3VxcEk4YUFma0x5TEZ4N0tOa3g0VVMxSmpuOHJia3AwbytNSWlpM01lMUgrdUxPeWtjTlI3ZGxDVG1DRkpSVlZXYzM1WVJtdFdoclYwN2N4WlhUT21lRTRyTGZIK2kwck15c3FUZVlqYVF5aXJHWEdiK1NLSjUyNm03MTJnL3RGb3JYZkdiY202U3hHNCtsY3VLdmhEQlF2OExRdDhyWmw1SGNQejJ3WmFjNzRXbHpQYlVUZzdQNTV1NXkrVi9YV3VyNnM0cjZPL2VlN2dvcUtDOXY3Vy9PWnlXMnBaYzFGaFUxbmFhdW85Yy9nZmNtZFFvbnJTOGgxU3pTMTVWaWdTaXZUVzU3bWxyalNpTDd4OVlzYlpHZnlNaW4zV2FrWE9GdTN0SjR4dkczbWpaWjhpRVAzdXdxcEx2YndRTll5c1FDc1YzcFZQcWU5dGN1NU1kdjAxNWNJc1I3cGVLVk9vNU5xMC9JcWM0cnJDdXRiNkFxRjZVYWx0Wmw2eVRvRXpDcVVsMjVsZWFyZlh0OVVYeWtic2M0cVRkSEZ4K3NTRUdMTmVZVERGWmVhbFppUW01cnZLODJydEZvMCtSb3N6UnIwaXhoQlRrR3pMU3JMazFGRjVzeUR2azRwRDZMc1VQVU95MHZOb2RXa3d4K25TQi9PK2FkVjkwenhvdjFzbDJ1Qk5PclorODVVLy8vRGRxRGJMS0FYc2xQR1haYkozelZ5R2UxS3B0ZGd5NHRZdW1hL1Q2ZlNkU3FuTy95cjJkRjhWQ3BOemxYS2xncGNaTEVrNmpGOVhydVp5azlKU2szWXAwSVdUWTdVcktUVXQ2Y0lmWjVUR3lYVW01dUUvNUhjcjRsSFRGeC9UWkltTlZocjFjR09XUmxiZ1MvUUpUMFdhckhwV1JjSjdMdEZnUmZXRUxGTTZRdnh1YTVZcE1VWlI0cGs1YTlFTWl4SzFaYnpWb0t5c3ptZ3BDRHQvcElVcVpjN01kZENLa2I1RWRlRzE1bFpuTWRjWDNtZS9zQ0Y3anMzSjY0aWV4Tk4zMHJZY1YycGsraFpTZi9KTlR2U1JxSmx3YmxGNDV2dkNrL0kzcFludUM4Y29IN25BdFN0dW5PUXp3dmowWG9aUGUxRjFWYUc5dXNwKzRWbEZUcVc5b0xJS2ZGNGhQS2NObmVNK1VLeEdYVjFBWW5FdXBkUFFCSFY5K0ZaVWpNbHlJN1AwMDE3QS81Nkt2Z0NmYWxJWk9YVkNWbXBLVm9JNlZtUE5UMDh2U05Kb2tnclMwL090R200NC9HeEM5b0xlcEZjbzlVYjkzNm96N0NrNlhZbzlJNlBZcXROWml5SFJtZEFaN2tuNUdsWVM0VVZpNFh1SlFCTDQ2bS9yRElVb2w1ZWdVSVpYcHNWL25xenNjbVc3UXhXWGttQkpNU2c1bzlLY25acVNhVlpwTkpic3ROVGNSSTBtTVRjMUxkdWk0Y3JwazFFWlZueEliOUFxRkdpVXZ4RFM4cEowdXFTOHRMUjhxMVpyelllZmZUUDBWMjZBVEVEYmljZm9xOUludmsxZmlkYkkwT09HdHUwL0VGOXJpNmg3d0ZsWDY2RG9iM1k2NWdIaWYxVWQrc2VJaTcwQ2pmeC9wN09YSTc3N242THZYWjVrV1ZIa2tlajdGNU5jRjBWZVJuZE1vd2N1UndxTFlqeUszcjQwS2ZPbTBMZWk2SThpcWVyK24rak01VW05YlpJMG5acE9iUkhvWlpGMHZmOURGS1NrZC85akZETW41dWZSRk91K0dvckxteVJEcmtRUFJ1aUo2V1RNTnI0SCttZzZtUTZaWi93VGRBVDBaWHhQL0k4b0pXUW5iSlFvYUttemZFV2lVT0kxaVUvL0Q5SjdpWi8vaS81Ri96d2wxVStocjAyaEovOUYvNkpvWWpQTWhLTy9lMWRNVGhBRm1VK1NTRy9vZHlSSnRqejBOc25sK05DUHNUYUVQc1k2T2ZRSHJHMmhqN0RleFk3Y0Z2cVE1Q0puUGVuR1ZYOGwzY2ovRHRhRzBMdFlKNGRPWW0wTC9RTHJYV3g5VzJnQzYzdlF3KzJXTGIvd045SUxTaVc5dUlwK3FzSVFvaCtjU0E3UlQxM1lRdlJqRThNaCtobU5yV3k5aXgyNUxVUS9lUEVzUFlMN2xuTThkdzk2bVFadytCUFd1N0MyNGNoL2Npdlk4V0cyM3NyV3QySDlPKzRlNUR5RnRZR3RrOWtSVytnMDFydENmOEQ2bnRCdlpNc2h5d2JaY3FUZm9WTm1mQ1lKLzU2YitBdDJNcWExV0xaSDB6eUpsY2xKK0ZjRVMyUW1LUzJQeXFPQVJ1ZElhV1hVY1JYNVhMWkNTcXRKb2V4dEthMGhnbnlKbE5ieUQwVHk2OGd5ZVVCSzYwbWgvSFVwSGNQZkpmOVVTc2VTUHRXdGtWOEZMRldkbDlJY1Vha0xwVFJQVkpydDRkLy9JMG1hNjZXMFBDcVBndWcxZDB0cFpkUnhGZG1sZVVSS3EwbUNaa0pLYTRoQm15bWx0ZHpDU0g0ZHNXdExwYlNlSkdoWFNla1lya1BybDlLeHBFTDNmZnFyaTNLTnBHY3hMZXBaVEl0NkZ0T2luc1cwUENxUHFHY3hyWXc2THVwWlRJdDZGdE9pbnNXMHFHY3hMZXBaVEl0NkZ0T2luc1cwcU9kSE1hZ3BKU1dnQ3FRNjJYLysrOGtnR1FMV2t3Q096V1ZmVEJDL20rREdFZnFya1FNWTRRcWtnZlNCQk5LRll4dklScHdiWW5zZWJEM0l2UlhyWHVTY2krdjZrR2Nkam5tUnc4dnl1WUYrOE9wbGVRZXdONFJqQSt5Y2VMMFhKUkFBTi9KNXdXRWI5a2FRQ3VCZUF2dE93enFrKzVCWFlHVWV4dFc5N0RzUUd4aVhRWWxyQURuNnBYdlNIQUprSEdUMzlMRHZQVkJaV3BtczYzSEV6YjVENEdkU0NHenJabExTKzRweTlPQk1FZVBjejQ3ME1ZNXU2RWc4SHI1TFAvajBNWTM1cEZJTzRFZy91NnZJazhvWmlDb0J2YU9QeVJMK1RvV29iYkhzOUU2RDBJREF2dEN3Z1duQnk3N0pRTDkxRVdCN1ZPSkF4QjZpenNTN0NLenNBNUpjZzB5MzYxak95UkpIUzBTMU5zcXVFNlhlakgwSDg0ZG9hK1l4YnYyTXd6YW1oMkhKOHRINnBoWVQ1ZmV3OGxQNVJidjRtVGZRclhoSGFtc0JQSHdSYWNReWJwRHlER0Z2dThROUFDbEVDMjJOV01uTmZNU05vLzFUNUFwN00vMWRVemU3ZjQ5MGZ3ZnoyQTNNVnZUTXhURlFjNUhVTlpHb0tTZkxKQy95U3Y1V0RvNzB6S1c5M2lQNXJ5aU5XeXIvQm5aV0xJOUgwaGd0WXkvelhGcXF6Y3htNFdzdWZYYjlQeFRCazk0aTJtWXA5cnlzRFBUK2k1bTNCNmJZMFNtVllEQktnaDRwN2dKTVNnL3o1UTRjNlNINXpNWUZ5TlBMK0RlelVvblhCa0ErYU5FSkdtSGtZREUrdGVRT3hyMGZlUUx3TFZyK0RVd0NIemhzdzFGcXdmVk1GaG81VTdtR2o2OW5YNHZ4TS84Tjg3dUdsVm4wMm0zTTI0WllDUU1zcm9aWVBTQmVMVEFaYUV4Nm1FZDUyVDFFRGExajE0YTFOdy82NjBDTktGN3Jqem9qeG5NdjA4bGtqSTVJWDFuWmVKbjdpdnMwYncrOGFKanBzRGZpODczc3ZJOTU3TFlvUC9jeFNRY2tUeGQ1ZWRpYVJ1NTB1ZWw1c1liSXgxVUZ6RHY3SVpjbkVyTVhsMnJnSXM1WHI2Tko3dUZhV3BEcVdkRjdlcWJVZHhmTFB1bXZVOHMxSzBvRFZCSlJGckhXRDN1OVA5S0M5TEk2ZElEVnBlN0xTaXJxMlQxRnB4N0orNmZIQU5VcTlieGhkbVV2cTQrb05KNElINXF6ajlWcFY3TFFmMWRjVE1hRWs1V0d4b0RZRWptWXJYeGs5RkdodEtTa1F1ajA5dmdIaHdiWEI0UzVnMzdmb044ZDhBNE9PSVNHdmo2aHk3dGhZMkJJNlBJTWVmeGJQYjJPdWU0Kzd6cS9WL0FPQ1c2aGY3RFg0eDhRaHR3RFF3TE9lOWNMNjkzOTNyNXR3b2czc0ZFWUdsNFg2UE1JL3NIaGdWN3Z3SVloWVJCWkE1NStYRG5RSy9RTStnYzgvaUdIMEJvUTFudmNnV0cvWjBqd2U5eDlnamVBZS9RTUZRbEQvVzZVb01mdFE1cGUwai9jRi9ENndISmd1Ti9qUjg0aFQ0QXhHQko4L2tHVW14WWIzUHY2QmtlRWpTaTQ0TzMzdVhzQ2duZEFDRkE1VURKY0l2UjVCM0N2d2ZYQ091OEd4bGk4VWNBekdzREYzczBlaHlDSm1UY2s5THNIdGdrOXd4QmVMSGRnSSs3dkdSSDhic2ppOTBKc1hPanVGNFo5OURiZ3VBRkhocnpia1Qwd0NJRzJVcEhjd29qYjN5L2VpNnE1WjZQYmo0SjUvSTR1ejRiaFByYy9Zb0dhOEsxcnFHbktsMEZGRUVvb2Q1U1VSS25lQS8zaU5tN3czK0NsNWZDZ1lINTNyNmZmN2Q4c0ROSXpVYnZyTDIxZ3BoWklzM1RBRzhEMWl3UHVnQ2lqRXd3RzJRMTZZTHVBMytzWmNuUU05K1M3aHdxRVhvL1E3Qi9FMlVEQVYrTjBqb3lNT1ByRHpCMDlnLzNPd0RiZjRBYS8yN2R4bTdNbnNINXdJREFrWmFYcDlXNElzSm5tdTJad0dLcmRKZ3dQZVZBSWlFUlBDMjVZMHVQdjl3Wm9nZFp0WThXYnQ3U2pBV2Y5YkFkMjdoMFdMVHF5MGR1ek1lcGFiTDBEUFgzRHZWUVhnMEt2ZDhqWGh4dFFuZnY4WG1Ub1FTN1BRTUFoaE84OU9BQ0h5UGNXQ0o3K2RmU2lTVllENGN5WExCSExUbDBhNmgrQ2VucEV2NHZjbmVsVjRqV0xGU0RmaTd2QTlhbnEvVFJBZWdkSEJ2b0czZEUzUlpuZFlrbWgrSWdGQm9jRHZ1RUExTDdWMitPaGVUWjYrbnpUQkxvYVd6QkxPSHM5NjkwSUlvZDd5RGNhR1ErU1VCSzVpVnhxNFpBREl3cGlKcXBRaU1SSnY4U3V4SWw4Yk5jU0VobWZYWHJCK0Z1djU1Q0gyM3UxK1dOaVdQN2cxZWFQaTZQNStaYXJ6Vzh3c1B4SHJ6YS8wVWp6eTlSWG05OXNSdjRrOW92emFvenBhSDQ2cWpaSnZ5c2ZRN3BKTW1yalBJNG5aWnlCMUhQSnBJMnprVzV1QlZuSHJTS0QzRERaeVcwbFgrRjJrWDNjYmVSZTdoNXlsSHVXSEplMWtaZkE5UTF3K2RrMC91OWRCZi9sNE44RC9sdkFmemY0M3d6Kys4SC9mdkIvRFB5ZkEvOS9COWUzR2I4cC9MbkhvL2pIRXZxMHZwY1VnbjhWK0RlQy8wTHdYd1ArbThGL08vanZCZjhENEg4RS9KOEIvNWZBLzAzdy96L2dTdTM2cDZuOCtRTlIvT1BBM3diK3hlQmZDLzR0NEw4RS9Pbm5QbjNnUHdiK1h3Zi9RK0QvTGZEL0R2ai9FUHgvRHY3L0FhNS9BcGR6VS9uTGJvL2lid0IvMmphWGdMOEwvRHZCZndYNGJ3Yi9VZkMvR2Z6dkF2OXZnZjhMNFA4ajhIOEgvSDhEL21kbHk1bHZxcWZ5bDk4ZHhUOE4vQjNnWHcvK0M4Ri9OZmozZ2Y5dThMOFYvTzhELzZmQS8wZmcveTc0L3diOC84dzl5M0d5Tmk0Ty9ETlliQ0hPMUVwT3JUNjdkdytXdldmVmNrNnRQRHMyaHIreE1iV0M3dXpkdS9jczIwSE84NEs0S0JXY1VuVldQYnAzNzZoU3ppa1ZQcHJkUi9PcjFQUW9QVTZ6K1BhZUh4c2JaY2ZIeHA1NmpaNVFjNXhhUGtiRzJLSlVjMHJ0dDM5OE14YVdYOHdpWFlyRlI3a3JmV01uU2d3VEtqbFJ5VjFuWFZoS1dBNmE0YTZOSWorMndHWllaR05YbGtoMU5SSXBSWWswQ2s0RGljSWkwUk5yYnpzYlBqSDJUOHVrbGhPMTNIV3hVQnFPMDBoQ1JhVFNxRGlONXZ5ZWNicnNPYzhLQU9XT1VZeHBsSnhHZlI3eWluc3FvbEZkTUVpTFNzR3BjR2ZJY05kR21sYjY5aUxQWHA5V3lXblZjcms4Y0N1dXV6V2dVbklxOWVpZVBWK01qZTFrcDVEcCtWZW9EdmVJcFpIRUcxTnBPSlgrR2ZMRzJONElzV3VsekdFK1dFWlZjbnE3c2JHMUJzT0VSazQwQ2tsVVZ3bkx4VExkR3RCeXZGWVJFWGFNNXpnZXNtdlZuRmI3eGZqMWJCbi9RcXZndEpQeWpyRVNVb0ZGaWJVcW9sVkhKRFpJWlpEdnBIS0o0ak9SZFVxT3ZxNTVTWm5adWJIL0RxSHBEVWRwT0tqUFhsNW9IY2Zyd2tKSFNhMVRjenJ0K1p0RXNjZHZPczlLOVFYTncxWmpPaFduRTUxQUZGeW5Jcm9vd1EzTTlabmt1QWZkVVZVMTBueU5WWG9WcDlmd1dHcWFxQWMxMWJDc1ZZMVVlT21zS0QxenNIRXR4MmtueFI5VDZ6aDE3SGRPdkNyc2lTSzFpbE5yd2hld25hcEdtbXlzWW5FR3BhODFxT0ZvTUozUzVUclBsT0NxWWhuRmE1cHE5Qnl2VjQ1ZHJBZTlsdFByTDVDWHgzNHdkaUpxK2NIWXkyTVhDQ3ZzQmJwL1FUeXNWM042N1JldnZ2enl5NjkrSVIwZ2VrMG9hWEpod2JQelZhVnk5NnV2dnJXVjdxbHIxN09zNjJ0ajFGeU1Wb1psMW9hWDZiSmhsa2FOM0xYclgzMFYvTmVKNTJuV0R6NTVXVnhpZUM1R2Z1SUVJWkdDYWZTY0p1NkRpVk1scjA0aHlrZ2J1WXp0MWE1bjZmVzFMR1pIWHpreE1acXF2M1ZVcCtCMHlyVnJ6NjhWbHlxV1Y3cHV3NndZbm85UlRxb0I5NldXVk5BaWlEMEZMY1pmcnhCWnp6Wi9ING5mNFBkc0ppVjk3c0FBcWNVWmJuSFhISUhFRS9yZkdlSTc4alRGSVUzN0MySmFodmFLNzFyUUtaQ2tKVjN0OURzdDRuRzV0RlZJV3lWUjlmaUdmS1JvTTRaanBKU3RxOWk2anEwYjJicU5yUmRHZWpIc3h5eXV1T2JaN0xPNGg1TFFUMnVpZGVOUWVnVkcyQXRaV2VWa0hHMTRDYitRWE1jL3pQK0NQQ0M3VjNZdmVZZHdqejVGeThtUHlqKy9GS2xLVkNYYWZmb0hKaW5tc0VqMHpIU0szV3VxaU5BSG9IT21jK2FWNXBXSit5Z2x2emlkVkNVcFQ5dGVTOThuVXNhZVNjcThqMUplMGlYcDYvYUh3K1I4dlhSbG1DclBpVlJ6NjhVMDYvQ3N3N1g3WjIrYXBMcHNrZWlaNlZUM2F2MGZ3dVNhZnhsYTducmQ5WHJEcDVTbW5wbWJleW1hZFhodWNKNXAzbkdSbXA2WXBPYkhLYlU4ZGtrNjIzbzZURzIvYkw4dlRCMUhSZXJjZWltYS8vejg1eGRxRisyTW92ZnBzZW5VSlYrb1hhanRrdE5ybGpnb0xkMFpKcEhUc3ZlWGZienNYSGRKOTZidWg3dFBMbnUvTzBocCt2MnVtWE1wb21WWXFMMW03elgzaWJUaTQwbWk5MXBaUWRkZGNvcFZ0NjQ1SGFaMUxUMlBoV205V3FRTkp6ZWMzQmdQekFIdDNIaDQ0d1RTaHpjZTl2TGVEdStkakg3cFBlYzl0NmxzMDJwUTc2YnhUYzhENDV1K3YrbUx6VFdVTm8xdjltMitCZlQ0NW05dmZuSHpKNXMvNlZQM2RZRjYrd2I2N3BMb2hmN3MvbjM5ei9kL01sQUNxaGxZTXJCMVlQL0FleElGQi80eVNBYnJRQjArbTIrLzd4d2wvL0doZFpRQ0pQQmc0QTJKM3FOVFE5aCt5dlkrSFM0Y0xneThNYngvYStaVzE5WjFvOEtvc08zNzI1ZjdqNHU1c2YxVXpMWDlqelRmOWk5MjFPem8yM0hmamxkMi9KSFN6dHFkNDR5TzczeC9WOUt1VEd5UDd5b0REZXc2dXV1SlhlL3NOb0VXN3I0SCtXcDNuOWg5WWxjWjFuK2hxZDBucnBOZlo3dXU0N3F0ak02T05URWFIWHR3VnhMV28yT3ZqWjBlZXcwNWJOZXJyM2RjWDNiOU9PaTE2eisvN2l6eXZpYWVHVThkZTIxOHpuakhEZXR2T0w5bjMwMExiMXB4VSs4dE5WOXJ2UDJ4ZllId2R2LzgvZlB2TXR6OTBkMmZIckFjRUE2c1BqQjI0SllEK3c4OGVPREZBMjhkT0h2Zzg0UHlnNmFEd3NHS2c2NkQ4dyt1UEhqNDRHc0hUOTZiZjIvRnZTMzM3cjczcm50L2R1OGY3aXU4Yi9sOSsrN1gzMTkzZitEK3grNS84ZjZQN3YvaWdib0hSaDk0NFZEWm9XV0h4ZzdkYytqeFErOGRDajVvZW5EbGczYytlUFloMDBObER6VTl0UEFoLzBNN0g3cnZvWW1IVFEvM1Byejc0YnNlL3RuREh6OWllYVRra2UyUEhIL2szR0hYNGUySEh6OTgrZ2c1VW5Ga3laRUhqMHdjelQwYU9QcjAwZUNqdDVDdkVWUG96OFFNeEFNSmdBVklCUEtBZktBQUtBVHNRQTFKSkxPQTl0RHZTQWZRQ2N3SEZnQUxnVVZBRjdBWVdBWmNBL1NHMWhJUHNCN1lHSm9nWG1BVHNCbm9BL3FCQVdBUThBRmJBRDh3RkRwQ0FxR255REN3RlJnQlJvSHRvVTFrQjdBVDJBWHNCbTRQL1pUc0E3NEI3QWZ1QU80RURnTkhnS1BBbzhCandIZlFHcndBdkk3MFQ0QTNnRGVCdDREL0Rid04vQlQ0R2ZCejRCM2dYZUNYd0c5Q0krUmo0TGZBS2VnakNQd09PQTM4SHZnRGNBYjRJL0FuNEN6d1orQXZvZnZJL3czOWtId0svQ2R3RHZncjhGbm9JUGtjK0J2d0JmQmw2Q0IzVCtnTjdnQndFTGdQdUI5NEFEZ0VQQWc4QkR3TVBBSWNCbzRBUjRGSGdjZUEvd1U4RG53TGVBSjRFbmdLT0FZOERUd0RIQWRPaE43bmZoVDZCZmNhOEdQZ2RlQW5vVi9JT2tNdnlwWVNqTytJWHJZaTFDNjdOdlMwYkRXMmE3RDFoLzRzK3o2cEpMOGs4dEJwb2dDVWdBcFFBeHBBQytnQVBSQUR4QUttVUJBZUZvU0hCZUZoUVhoWUVCNFdoSWNGNFdGQmVGZ1FIaGFFaHdYaFdSUHdyQWw0MWdROGF3S2VOUUhQbW9CblRjQ3pKdUJaRS9Dc0NYaldCRmtkK2dOWkE2d0YzTUE2b0FlNExuU09qQUhYQStQQTdmRENmY0EzZ1AzQUhjQ2R3R0hnQ0hBVWVCUjRESGc5ZEFwZWNRcGVjUXBlY1FwZWNRcGVjUXBlY1FwZWNRcGVjUXBlY1FwZWNRcGVjUXBlY1lwOEdEcFBUZ0wvQVV3QXZ3WStBbjZEY3g4RHZ3WCtFbm9mSHZBUlBPQWplTUJIOElDUDRBRWZrZk00OTFub1hYakJ1L0NDZCtFRjc4SUwzdVg0MEVsT0JzZ0JCYUFFVklBYTBBQmFRQWZFQUliUXg1d1JNQUZtSUI1SUFDeEFJcEFFV0lIazBFZWNMZlFyTGgwUWdBd2dFOGdDc29FY0lCZklBL0pESjdnQ29CQ3dBMFZBTWVBQW5FQUpNQU1vQldZQ1pVQTVVQUZVQWxWQU5WQUR6QUpxZ2RsQUhWQVB1SUFHWUE0d0YyZ0U1Z0ZOUURQUUFyUUNiVUE3MEFGMEF2T0JCY0JTeUxJTTZBYVdBOWNBdTFEdTNjQjF3Qmh3UFRBTzNBRHNBVzRFYmdLK0F1d0Z2b3ByN2drRkVXMUJSRnNRMFJaRXRBVVJiVUZFV3hEUkZrUzBCUkZ0UVVSYkVORVdSTFFGRVcxQlJGc1EwUlpFdEFVUmJVRkVXeERSRmtTMEJSRnRRVVJiRU5FV1JMUUZFVzFCUk52YjNBOWdxMzhIWHY0djN1NC91dTZDelBQNE4zUFhJemdnNDg0Y1o1bWRjYVpuM0JrS0k2Q0NWbEJSWnZ4QjFLbWpBb0lDTFk2VXp0ZzlIa1p0N1lCT0xEOUtJVmxxb0VwYm12NUtvUW1tSldsSVcyeHUwYVFoQ1UwYmtpYnBUZE0wOXpiY0gvbjIzcE9RbXhSYWV2ZDFhOTExWjF2UDRKNnpmM3hPaTV3bTkvazh6K2Y5UE4vbVhxUVdhcVUyLy90TDFFNGQxRm5ZTDJXandSSUpDeVVzbExCUXdrSUpDeVVzbExCUXdrSUpDeVVzbExBUVkvZGo3SDZNM1krYlNkeE00V1lLTjFPNG1jTE5WUEQ5UWk5MnRtRm5HM2EyWVdjYmRyWkpTeWd0b2JTRTBoSUdTd3I1NEg1NmdCNmtoMmdwUFV6TDZCRjZsQktGU2RNOWFib25UWGZjZEdkTmQ5WjBaMDEzMW5SblRYZmNkUGViN243VDNXKzYrMDEzditrS1RWZG91a0xURlpxdTBIU0ZwaXMwWGFIcENrMVhhTHBDMHhXYXJ0QjBoYVlyTkYyaDZRcE5WMmk2UXRNVm1xN1FkSVdtS3pSZG9la0tUVmRvdWtMVEZacXUwSFNGcGlzMFhhSHBDazFYYUxwQzB4V2FydEIwaGFZck5GMmhxUWhOUldncVFsTVJtb3JRVklTbUlqUVZvYWtJVFVWb0trSlRFWnFLMEZTRXBpSTBGYUdwQ0UxRmFDcENVeEdhaXRCVWhLWWlOQldocVFoTlJXZ3F3cEk5aFhGVEVKcUMwQlNFcGlBMEJXSGt4c0pSL0QyS3ZVZURUd1lYZWZyNmE0NWVRalBwVXJxTXJna3VzSkV2d00wc2JtWnhNNHViV2R6TTRtWVdON080bWNYTkxHNW1jVE1iL0tObm9tL1NYYlFjbDM1TWxmUTRQVUVyYUZOaEFCc0hzSEVBR3dld2NjRG0vR09iODQ4eE1vYVJNWXlNWVdRTUkyTVlHY1BJR0ViR01ES0drVEdNakdGa0RDTmp0bVhPdHN6WmxqbmJNbWRiNW16TG5HMlpzeTF6dG1YT3RzelpsamxUazFQOWRPUldHK2hyd1MyUjIvMTZSM0JMTUVzbTRqSVJsNG00VE1SbElpNFRjWm1JeTBSY0p1SXlFWmVKZUhDUkZGMWorMXhMeGZmWGZaUHVvbitSaGU4VUp1UmpRajRtNUdOQ1BpYmtZMFErRHNySFFmazRLQjhINWVPZ2ZHVGtJeU1mR2ZuSXlNZVlmSXpKeDVoOGpNbkhtSHlNeWNlWWZJekp4NWg4akFVN09MM3pkQVltZzFPMlVLRXdWUkpRU1dGS2RlM0ZkL3ZwYjA2RkVUM09xVEFTakttd1hJWGxLaXhYWWJrS3kxVllyc0p5RlphcnNGeUY1U29zVitFNnV6VnJ0MmJ0MXF6ZG1yVmJzM1pyOXV5elVxamtSdVZibXBYYkN3azdObUhISnV6WWhCMmJzR01UM01wd0pzK1pQR2Z5bk1selppTm5ObkptSTJjMmNtWWpaelp5WmlObk5uSm1JMmMyQm84VlRwcTdsOHpkUytidUpYUDNrcmw3eWR5OUZQekV2L3NwcmFMVjlCU3RvU3BhUyt0b1BXMmdqVlJObS95NXAra1oya3cxVk90L2Y1YnFhQXR0cGVlb25ocG9HelhTODlSRTIybEhZYk9PYlE1ZThQdWYweTVxcGlqdHBsL1FMNm1GV21rUHRkRkwxRTRkaFhhNWFKZUxkcmxvbDR0MnVXaVhpM2E1YUplTGRybG9sNHQydVdnUCt2eVpmaHJ3KzROK2pkRWdIYUloM2grbVlUcENJeFNuUkdFWWRZZFJkMWltUXBrS1pTcVVxVkNtUXBrS1pTcVVxVkNtUXBrS1pTcEU2QVJDSDBYb293aDlGS0dQSXZSUjAva1NRaWNST29uUVNZUk9JblRTeE80enNmdE03RDRUdTYvNHJsVDNTTHQ3cE4wOTB1NGVhWGVQdEx0SDJ0MGo3ZTZSZHZkSXUzdWsvUzNjSTJIeHZhM3VrYmg3Sk80ZWlidEg0dTZSdUhzazdoNkp1MGZpN3BHNGZSL2E5NkY5SDlyM29YMGZsc3dKL3JCa2J2Q2xranVEaTB1K0Vjd28rY2ZnWFNYL1RQZjUyaitnSDlLL1VSbjlpSmJRL2ZRQVBVZ1AwVko2eE5kNnJEQlVzcHgrVEpYME9EMUJLK2duaFNHSnZhcjRydHZUYVpYVXlMY0swV0NtQkU1aHl4UzJUR0hMRkxaTVljczB0a3hqeXpTMlRHUExOSzdFY1NXT0szRmNpZU5LWENkUDZ1UkpuVHlwTzIvb3pnbmRPYUU3SjNUbmhPNmMwSmszZGVaTm5YbFRaOTdVbVRmdGpJUkxJdU9TeUxna01pNkpqRXNpWTQ5TTJDTnhleVJ1ajhUdGtiZzlncFY4dW9CUDcrTFRCWHg2eDJucUlFNXdNZG9Nb2MwUTJneWh6UkRhREtITkVOb01vYzBRMmd5aHpSRGFES2sxS2ZYRit5Q1U4bERLUXlrUHBUeVU4bERLUXlrUHBUeVU4dUwrR3VWWXR1UkNqS3JIcUhxTXFzZW9lb3lxeDZoNmpOcUtVVnN4YWl0R2JjV29yZGhVaFUxVjJGU0ZUVlhZVklWTlZkaFVoVTFWMkZTRlRWWFlWSVZOV1d6S1lsTVdtN0xZbE1XbXJLZk1oS2ZNaEtmTWhLZk1oS2ZNaEtmTWhLZk1oS2ZNaEtmTWhLZk1oS2ZNaEc0ZDFxM0R1blZZdHc3cjFtRnNhc2FtWm14cXhxWm1iR3JHcG1hYzJZVXp1M0JtRjg3c3dwbGRkdUlmMllsL0pQdk5zdDhzKzgyeTN5ejd6YkxmTFB2TnN0OHMrODJ5M3l6N3piTGZMUFBOTWo0bTQyTXlQaWJqWXpJK0p1TmpKcVBEWkhTWWpBNFozeS9qKzJWOHY0enZsL0g5TXI1Znh2ZkwrSDRaM3kvaisyVjh2eWxxUGV0VDVxK2VNVnBOVXF0SmFqVkpyU2FwOVMwK1l3ekk5SUJNRDhqMGdFd1B5UFNBVEEvSTlJQk1EOGowZ0V3UHY0Vm5qS1FyTU9rS1RMb0NrNjdBcENzdzZRcE11Z0tUcnNDa0t6RHBDa3k2QXBPdXdLUXJNT2tLVExvQ2s2N0FwQ3N3NlFwTXVnS1Ryc0NrS3pEcENreTZBcE91d0tRck1Pa0tUTG9DazY3QXBDc3c2UXBNdWdLVHJzQ2tLekRwQ2t5NkFwT3V3S1FyTU9rS1RMb0NrNWd6akRuRG1ET01PY09ZTTF4eWUvQ244dlNYOG5TalBQMlpQUDBsN3Z5M2tyc0tSN0JuUnNsMy9mbzlXa2lMNlB1MG1PNmx0L3A4OHJBLzg0anYrYWhmeTZtQy9nYzlKbFhMNmNkVVNZL1RFN1NDZmtJclBkbXZvdFcwaHFwb0xhMmo5YlNCTmxJMWJhS242Um5hVERWVVM4L1N6NmlPdHRCV2VvN3FxWUcyVWFQWDhqdzEwWGJhUVR2cEJmbzU3YUptaXRMdXdpclVXb2RhNjFCckhXcXRRNjExaUZXTFdMV0lWWXRZdFloVjYvbm5jTkRoNHIwT09UTElrVUdPREhKa2tDT0RIQm5rNkVhT2J1VG9SbzV1NU9oMkNWL3NFcjRZUVhvUXBBZEJlaENrQjBGNkVLUUhRWG9RcEFkQmVoQ2tCMEY2c1B1ZnNQdWZzUHVmVUtNWE5YcFJveGMxZWxHakZ6VjZVYU1YTlhwUm94YzFlbEdqRitjWElNY3k1RmlHSE11UVl4bHlMTVA1VzNEK0ZweS9CZWR2d2ZsYlBNbGRITnhQRDlDRDlCQXRwWWRwR1QxQ2o5SnlWOENQcVpJZXB5ZG9CVzJpcCtrWjJrdzF0Q01vUloxUzFPbEVuVTdVNlVTZFR0VHBSSjFPMU9sRW5VN1U2VVNkVHRUcFJKMU8xT2xFbHczb3NnRmROcUJMQWwwUzZKSkFsd1M2Sk5BbGdTNEpkRW1nU3dKZEV1aVNRSmVIMFdVZnV1eERsMzNvc2c5ZDlpSExQY2h5RDdMY2d5ejNJTXM5a3AyVzdMUmtweVU3TGRscHlVNUxkbHF5MDVLZGx1eTBaS2NsT3kzWmFjbE9TM1phc3RPU25aYnN0R1NuSlRzdDJXbkpUa3QyV3JMVGtwMlc3TFJrcHlVN0xkbHB5VTVMZGxxeTA1S2RsdXkwWktjbE95M1phY2xPUzNaYXN0UC8zeEt5dTFCdjZyZWIrdTJtZnJ1cDMyN3F0NXY2NTB6OWM2YitPVlAvbktsL0xuSmo4QzZiK2RySTF3b0xiT2RySTNmNDlWN1BDZmNWbWlMTndUV1JST0Vua2FQQmxaSFI0QU9SWkhCWkpGM29qbVNDM3dzK1pvdW5iZkcwTFo2MnhkTzJlTm9XVDl2aWFWczhiWXVuYmZHMExaNjJ4Uk9lQTBZOUI0eWEvbmJUMzI3NjI4LzhyVUhHUkdkTWRNWkVaMHgweHNiZmJhcmJUWFc3cVc0MzFlMm11dDN0SDNQN3g5eitNYmQvekZXUWN4WGtYQVU1VjBIT1ZaQnpGZVJjQlRsWFFjNVZrSE1WNU56WW9Sczd0Sk5DTjJiT2pabHpZK2JjbURrWHpHVEp5NTZROWxJWDdUdjlwTFRmRlJIblROYnRkUUZuc3U2dkM0SldWYzlYOVh4VnoxZjFmRlhQVi9WOFZjOVg5WHhWejFmMWZGWFBWL1YzVlAwZFZYL245S2VtdmtsM1VmRmUrNzdiWnJHbmwzK2xlK2srK2dIOWtGUC9SbVgwSTFwU1dLN0M1U3BjcnNMbEtseXV3dVVxWEs3QzVTcGNyc0xsS214UllZdnRuclBkYzdaN3puYlAyZTQ1MnowWEpEem5IYVZSZWd0UHhjWFBlZG5XdmJaMXIyM2RhMXYzMnRhOXRuV3ZiZDFyVy9mYTFyMjJkVy94MDJDMjlRSGIrb0J0ZmNDMlBtQmJIN0N0RDlqV0IyenJBN2IxZ2VMbnhZcWZGck90KzIzcmZ0dTYzN2J1dDYzN2JldCsyN3JmdHU2M3JmdExMbkU5enFSTDZUTDZHM29mWFU1WDBKWDBmdm9BZlpDdW9xdnBRL1JobWtVZm9Xdm9Xdm9vZll3K1R0ZlJKK2lUZEQzOUxmMGRmWW8rVForaHo5SU5WRXFmbzg4SHhmLzY3QVVsZjArejZVYTEzRVEzMDFmcEZyclA2LzRCL1pEK2pjcm9SN1NFN3FjSDZFRjZpSmJTSS83TVk3YlZjdm94VmRMajlBU3RvSi9RU3Q5ckZhMm1OVlJGYTJrZHJhY050SkdxYVJNOVRjL1FacXFoV25xV2ZrWjF0SVcyMG5OVVR3MjBqZHJvSldxbkR1bzAvVGNXZnEvNEtiN0lyY0dGMG5CbDVIYS8zdUhYYnhVZXR6Vi9HWHpBMWl5MUNXZmFoRE5OZXJkSjd6YnAzV2Z5UFNuZmsvSTlLZCtUOGowWmZGK1dGaGRlTWYydm1QNVhUUDhycHY4VlcydW1yVFhUMXBwcGE4MjB0V2JhV2pOdHJabTIxa3hiYTZhdE5kTW11dDRtdWo0NDd2ZW5xQkRNTEFtb2hMNFlYRnZ5RC9RbCtqSjloZVlIczB2MkJIK09kdk1qTndVZlZjVjVLamd2OHExZ2FlU0h3WHNpWmNGZlJKWUU3d251L1MxL3MzSE03ajltOXgreis0L1ovY2ZzL05ET0QrMzgwTTRQN2Z6UXpnL3QvTkRPRCszODBNNFA3ZnpRVThPb3A0WlJUdzJqbmhwR1BUV01lbW9vMGpEa1ZzaXRrRnRIdVpYbFZwWmJXVzVsdVpVOTYzT2NXYkczajlqYlIrenRJL2IyRVh2N2lMMDlZbStQMk5zajl2YUl2VDNDclFpM0l2YjJpTDA5WW0rUDJOc2o5dmFJdlQxaWI0L1kyeVAyOW9pOVBXSnZqOWpiSS9iMkNGWk1ZOFUwVmt4anhUUldUR1BGTkZaTVk4VTBWa3hqeFRSV1ROdlZSOC82OTdHdnErME5Pa0VuNmMzVFQrQ0g1UCtRL0IrUy8wUHlmMGorRDhuL0lmay9KUCtINVArUUxQWEpVcDhzOWNsU255ejF5VktmTFBYSlVwOHM5Y2xTbnl6MXlWS2YzZmVxM1Rkczl3M2JmY04yMzdEZE4yejNEZHQ5dzNiZnNOMDNiUGNWM3d2NWp1RFRpRDZPNk9PSVBvN280NGcranVqamlENk82T09JUG83bzQ0ZytqdWduRVgwYTBhZDFia0xuSm5SdVF1Y21kRzVjNThaMWJsem54blZ1SE9WZjA3MVE5MExkQzNVdjFMM2kwK3dwVkQrRjZxZFEvUlNxbjBMMVU2aCtDdFZQb2ZvcFZEL2xhaHB3TlEyNG1nYTR1NSs3QTl3ZDRPNEFkd2U0TzJDbnhUaThrOE03T2J5VHd6czV2Sk1UYVU3a09KSGpSSTRUT1U3a09KSGtSSklUU1U0a09aRzA1MElYd0lROUY3b0FKcVI2dXVROW5KbkRtVG1jbWNPWk9aeVp3NWs1bkpuREdjLzNkQ0c5a3k0cTNDUTdmYkxUSnp0OXN0TW5PMzJ5MHljN3JiTFRLanV0c3RNcU82MWNqSEl4S2tON1pHaVBETzJSb1QweXRFZUc5c2pRSGhuYUkwTjdaR2lQRE8yUm9Ta1ptcEtoS1JtYWtxRXBHWm82L2RuaWI5SmR0S1F3aTdPek9EdUxzN000TzR1enN6ZzdpN096T0R1THM3T0N4d29OTW5TYkROMG1RN2ZKMEcweWRKc00zUmI4eEwvN0thMmkxZlFVcmFFcVdrdnJhRDF0b0kxVVRadlUvelE5UTV1cGhtcjk3ODlTSFcyaHJmUWMxVk1EYmFOR2VwNmFhRHZ0S0R4dWp6OGV2T0QzUDZkZDFFeFIyazIvb0Y5U0M3WFNIbXFqbDZpZE92U2lrMTZtdmRSRisyZy9kZE1yMUVPOWRJRDYvSmwrR3ZEN2czNk4wU0Fkb2lHVGRKaUc2UWlOVUp5U2hVcE1xTVNFU2t5b3hJUktUS2pFaEVwTXFNU0VTa3lveElSS1UvdThxVzAwdFkybXR0SFVOcHJhUmxPN3pkUU9tOXBoVXp0c2FvZE43YkRyYk1oMU51UTZHM0tkRFJVL01lNyttT1ArbU9QK21PUCttT1ArbU9QK21PUCttT1ArbU9QK21PUCttRlA4WExuN1k3YjdZN2I3WTdiN1k3YjdZN2I3WTdiN1k3YjdZN2I3WTNieGsrZkZ6NTNqVHluK2xPSlBLZjZVNGs4cC9wVGlUeW4rbE9KUGFja1hDL05ML29HK1JGK21yOUNOL3Z4TmRETjlsVzZoMjRPLzhvVCtTVS9vUC9LRS9tVlA2SGQ2UXIvQkUzcVpKL1JQRkQvaFh2eDh1eWYwTWsvb1paN1F5enlobDNsQ0x5dCs0aDNqU2pHdUZPTktNYTRVNDBveHJoVGpTakd1Rk9OS01hNFU0MG85b1plNUdSWjRRaS96aEY3bUNiM01FM3BaOFRQemJvaDVib2g1Ym9oNWJvaDVib2g1Ym9oNWJvaDV4VS9UZTNJdTgrUmM1c201ekpOem1TZm5Nay9PWlo2Y3l6dzVsM2x5THZQa1hJWWVHOUdqQmoxcTBLTUdQV3JRbzhhMXZBbEJOaURJQmdUWmdDQWJFR1NEQy9vZUYvUTlMdWg3WE5EM3VCa3VqOXhVcUlqY1hGaGMvUHkrMitIZFoyNkhkNSs1SFo1QW1UbVI1c0ttU01LemhiczA4cXJuam5Ud3RlRFBrS2NIZVhxUXB3ZDVlcENuQjNsNmtLY0hlWHFRcHdkNWVwQ25CM2tPbzhrQW1neEkvN2owajB2L3VQU1BTLys0OUk5TC83ajBqMHYvdVBTUC84Ynp3TW5UUC9INnFrM3pOdDkxcmUrNjFuZGQ2N3V1OVYzWCtxNXJmZGUxdnF0cml5NmtkOUpGaFcvOWxsc2hpWGRKdkV2aW5hY211cWF3MVNzcy9rM2pLTjZONHQwbzNvM2kzU2plamVMZEtONk40dDBvM28zaTNTamVUZUxkSk41TjR0MGszazNpM1dUd0w4SDVLbDJrMGtVcVhhVFNSU3BkcE5KRktsMmswa1VxWGFUU1JXZCs2ckVHNTliZzNCcWNXNE56YTNCdXplLzRVNCtuY080cG5Ic0s1NTdDdWFkK3g1OTZ0T3BBNi8vRFR6MXFjYTRXNTJweHJoYm5hbkd1RnVkcWNhNFc1MnB4cmhibmFuR3U5amQrNmxGN2xwOTZ2SWh6TCtMY2l6ajNJczY5aUhNdjRsdy96dlhqWEQvTzllTmNQODcxNDF3L3p2WGpYRC9POWVOY3YwbnF3YTdYc2V0MTdIb2R1MTdIcmdyc3FzQ3VDdXlxd0s0SzdLckFyZ3JzcXNDdUN1eXF3SzRLN0hvU3U1N0VyaWV4NjBuc2VoSzduc1N1SjdIclNleDZFcnVleEs3TjJMVVN1MVppMTByc1dvbGRLN0ZySlhhdHhLNlYyTFVTdTFaaTEycnNXbzFkcTdGck5YYXR4cTdOMkxVWnV6WmoxMmJzMm94ZFYvd0d1ejZMWGQvRHJrOWhWeGQyZlJpN3VyQ3JDN3U2c0tzTHU3cXdxd3U3dXJDckJydHFzS3NHdTJxd3F3YTdhckNyQnJ0cXNLc0d1MnF3cXdhN2FyQ3JDN3MyWTFjWGRuVmhWeGQyZFdIWEp1emFoRjJic0dzVGRtM0NyazNZdFFtN05tRlhGM1oxWVZjWGRuVmhWeGQyZFdGWEYzWjFZVmNYZG5WaFZ4YytEZUhURUQ0TjRkTVFQZzNoVXgwKzFlRlRIVDdWU2YydCtQUTRQalZKL3dleDZXcGN1aHFYVnVEU0tpejZPUmJkVkhJK0tteEFoUTJvc0FFVk5xRENCbFRZZ0FvYlVNRnpGMTFJNzZTTENnLzhscjg5ektCQ0JoVXlxSkJCaFF3cVBJTUt6NkJDQmhVeXFKQkJoUXdxWkZBaGd3b1pWTWlnUWdZVk1xaVFPZWNWVkx3MWx4U1dvc0pTVkZpS0NrdFJZU2txTEVXRnBhaXdGQldXb3NKU1ZNaWhRZ01xTktCQ0F5bzBvRUlES2pTZ1FnNFZjcWlRUTRVY0t1UlFJWWNLT1ZUSW9VSU9GWEtva0VPRkhDcmtVS0VCRlJwUW9RRVZHbENoQVJWeXFKQkRoUndxNUZBaGh3bzVWTWloUWc0VmNxaVFRNFVjS3VSUW9majNOTStqd3ZPb2tFT0ZIQ3JrVUNHSENqbFV5S0ZDRGhWeXFKQkRoUndxNUZBaGh3bzVWTWloUWdNcU5LQkNBeW8wb0VJREtqU2dRZ01xTktCQ0F5bzBvRUlES2pTZ1FnNFZjcWpRZ0FvNVZNaWhRZzRWY3FnUVI0VTRLc1JSSVk0S2NWU0l2OFdmZitaY1AwblhUOUwxazNUOUpGMC9TYlRvUE1mUFA0OGl5RkVFT1lvZ1J4RmtCNExzUUpBZENMSURRWFlneUE0RTJZRWdPeEJrQjRMc1FKQWRDRktQSVBVSVVvOGc5UWhTanlEMUNGS1BJUFVJVW84ZzlRaXlIVUVhRWFRUlFSb1JwQkZCR2hHa0VVRWFFYVFSUVJvUnBCRkJPaENrQTBFNkVLUURRVG9RWkR1Q2JFZVE3UWl5SFVHMkk4Z2ZJTWhmSThoL1I1QXJFT1FLQkxrTVFWb1E1SzhScEFWQldoQ2tCVUZhRUtRRlFWb1FwT1YzSUVnTGdteEhrQllFYVVHUUZnUnBRWkFtQkdsQ2tDWUVhVUtRSmdScFFwQW1CR2xDa0JZRWFVR1FGZ1JwUVpBV0JHbEJrQllFYVVHUUZnUnBRWkFXMTAveFBWS2RLTktKSXAwbzBva2luYWh4Q1dvVS80dEVIMENNZHlMR085SGltV0NqMUxkSmZadlV0MGw5bTlTM1NYMmIxRWVsUGlyMVVhbVBTbjN4bWFkTjJ0dWt2VTNhMjZTOVRkcmJwTDFOMnR1a3ZVM2EyNlM5N1p6dk5senVodjR4VmRMajlBU3RvRTMwTkQxRG02bUcvdmRQQ3h1bG8xRTZHcVdqVVRvYXBhTlJPaHFsbzFFNkdxV2pVVG9hcGFOUktocWxJSlNDVUFwQ0tRaWxJSlNDMEpOcHV5ZlRkayttN1JLeFZ5TDJTc1JlaWRnckVYc2xZcTlFN0pXSXZSS3hWeUwyU3NSZWlXaVhpQjZKNkpHSUhvbm9rWWdlYVhoWkdsNldocGVsNFdWcGVGa2FDdEpRa0lhQ05CUk1icS9KUFdoeUQ1cmNneWIzb01rOWFISVBtdHlESnZlZ3lUMW9jZythM0dtVE8yMXlwMDN1dE1tZE5ybTlKcmZYNVBhYTNGNlQyMnY2WXFZdlp2cGlwaTltK21LbUwyYjZZcVl2WnZwaXBpOW0rbUttTDJieWVrdFdGa1pLVnRGcVdrTlZ0SmJXMFhyYVFCdXBtamJSMC9RTWJhWWFxcVZuNldkVVIxdG9LejFIOWRSQTI2ang5Ti9sdDd2RDk3bkQ5N25EOTduRDk3bkQ5NW5PQTZiemdPazhZRG9QbU00RHA1L2dmL1gwdnFYa0xudnJibnZyYm52cmJudnJibnZyYm52cmJudnJibnZyYm52cmJudnJibnZyYm52cml5WjRsd25lWllKM21lQmRKbmlYQ2Q1bGduZVo0RjBtZUpjSjNtV0NkOWxiajlsYmo1bmtacFBjYkpLYlRYS3pTVzQyeWMwbXVka2tONXZrWnBQY2JKS2JnK0xQL3UrZ09UU1g3cVJ2MEw5LzMrd1NUK0QzMHdQMElEMUVTK2xoV2thUDBLUDBtQ1F0TDN4YkNyNHRCZCtXZ205THdiZWw0TnQyV05RT2k5cGhVVHNzYW9kRjdiQ29IUmExdzZKMldOUU9pOXBoVVRzc2FvZEZKV2VoNUN5VW5JV1NzMUJ5RnRwaFVUc3Nhb2RGN2JDb0hSYTF3NkoyV05RT2k5cGhVVHNzYW9kRjdiQ29IUmExdzM1cWgvM1VEb3ZhWVZFN0xHcUhSZTJ3cUIwV3RjT2lkbGpVRG92YVlWRTdMR3FIUmUyd3FCMFdsZEtGVXJwUVNoZEs2VUlwWFNpbEM2VjBvWlF1bE5LRlVycFFTaGRLNlVJN0xHcUhSYVYxb1IwV3RjT2lkbGpVRG90S2I1WDBWa2x2bGZSV1NXK1Y5RlpKYjYvMDlrcHZyL1IyUzIrMzlIWkxiN2YwZGt0dnQvUjJTMiszOUhaTGI3ZjBka3Z2VHVtdGs5NDY2YTJUM2pycHJiUFAxa3B3dHdSM1MzQzNCSGRMY0xjRXZ5QzhMMGp3Q3hMOGduMjIyRDViYko4dHRzOFcyMmVMN2JQRjl0bGkrMnl4ZmJiWVBsdHNueTIyeitiYVozUHRzN24yMlZ6N2JLNTlOdGMrbTJ1ZnpiWFA1dHBuYzFIaFBsUllnQW9MVUdFQktpeEFoUVdvc0FBVkZxRENBbFJZZ0FvTFNpNHAvS0prSmwxS2w5SGYwUHZvY3JxQ3JxVDMwd2ZvZzNRVlhVMGZvZy9UTFBvSVhVUFgwa2ZwWS9SeHVvNCtRWitrNitsdjZlL29VL1JwK2d4OWxtNmdVdm9jZlo2K1FIOVBzK21MbnA3L2diNUVYNmF2MEkzcXU0bHVwcS9TTFhSYjRZaWRlMG5KSFlXZDl1NFY5dTRkOXU1Vjl1NlhTNHFmckw2cnNMNWtQa3I4czMvM1hiLy9IaTJrUmZSOVdrejMwbjJGZWVnM0QvM21vZDg4OUp1SGZ2UFFieDc2elVPL2VlZzNELzNtb2Q4OHUzYzlBdDVuOTY2M2U5ZmJ2ZXZ0M3ZWMmI3bmRXMjczbHR1OTVYWnZ1ZDFiYnZlVzI3M2xKVCsxcjFjaTV5cGFUV3VvaXRiU09scFBHMmdqVmRNbWVwcWVvYzFVUTdYMExQMk02bWdMYmFYbnFKNGFhQnMxZWozUFV4TnRweDIwazE2Z245TXVhcVlvN1RhVEwvTDlGL1JMYXFGVzJzTlhtVVRZS01KR0VUYUtzRkZQRWFzOVJhejJGTEhhVThScTk4Qi9jZzk4ejFQRVhXNkNQM1FUL0ltYjRFODhSU3hCNFVjaThjS2tKNG1PU0tvdzZtbmlmWkZNSVJ0VUkzTWVtZlBJbkVmbVBETG5rVG1Qekhsa3ppTnpIcG56eUp4SDVTUXFKMUU1aWNwSlZFNmljdkljbjJKSW9YRUtqVk5vbkVMakZCcW4wRGlGeGlrMFRxRnhDbzJMNzBWOVBmZ3VmWThXMGlKYVRQOUs5OUo5OUFOYVh1aEQyRDZFN1VQWVBvVHRROWcrdE94RHl6NjA3RVBMUHJUc2MyZGM3YzY0R3NINkVLd1B3Zm9RckEvQitoQ3NEOEg2RUt3UHdmb1FyQS9CK2hDc0Q3bjZFT2tFSXAxQXBCT0lsRUdrRENKbEVDbURTQmxFeWlCU0JwRXlpSlJCcEF3aVpSRHBDQ0tsRUNtRlNDbEVTaUZTQ28xU2FKUkNveFFhcGRBb2hUNVQ2RE9GUGxQb000VStVK2d6aFQ1VDZETjErcitvL3Z0MElmMUJZUko5SnRGbkVuMG0wV2NTZlNiUlp4SjlKdEZuRW4wbTBTZUxQaVBvTTRJK0krZ3pnajRqNkRPQ1BpUG9NNEkrSStneklzbFpTYzVLY3JhaytCNjFXK2oyNEYwU2ZLa0V6NWZnRDB2d3B5VDR2Wko3aVhRbXBETWhuUW5wVEVoblFqb1QwcG1Rem9SMEpxUXpJWjBKNlV4SVp0WkU5NWpvbUltT21laVlpWTZaNk9KbmJnWk44NkJwSGpUTmc2WjUwTFJlYmxvdk42azl3YWQxT3FIVENaMU82SFJDcHhNNm5kRHBWM1g2VloxK1ZhZGYxZWxYZGZwS25iNVNwMU02bmRMcGxFNm5kRHFsMHltZFR1bDBTcWRUT3AzUzZaUk9wM1E2WlNlZHNwTk8yVW1uN0tSVGR0SXBPNm40czQ1VkptQ1ZDVmhsQWdaTndLQUpHRFFCZ3laZzBBUU1tb0JCRXpCb0FnWk53S0FKR0RRQlcwekFGaE93eFFSc01RRmJUTUNXNHZ1NVRjRXlVN0RNRkN3ekJjdE13YkxJRnp6eDN4ajgvcGxQR24zUjFiUXo4dlhDMXlLM0ZWb2p0L3RuVEkzTThjOXovZk05aFRlRGExMGtLUmRKeWtXU2NwR2tYQ1FwRjBuS1JaSnlrYVJjSkNrWFNZcURLUTZtT0pqaVlJcURLUTZtT0pqaFlJYURHUTVtT0pqNW5YNFdOK1RQSGFaaE9rSWpGRCtkZ1F3SEpqa3d5WUZKRGt4eVlQTDBlOEJmZDFHOVFTZm9KTDFKLy81OTRiY0ZiNC9NcGVJblFLNytqNzdUVWdYSFZYQmNCY2RWY0Z3RngxVndYQVhIVlhCY0JjZFZjRndGeDFWd1hBWEhWVkJRUVVFRkJSVVVWRkJRUVVIdk8vVytVKzg3VlRONGptZm0vYXJwVkUybmFqcFYwNm1hVHRXRXFnbFZFNnFtK0E3UWhMNitxcWZGOTV1K0dpbmVtNWNIRlo1L2xoY082ODloL1Rtc1A0ZjE1N0QrSEQ1cmYzWUU3emJoNzFabFJwVVpWV1pVbVZGbFJwVVpWV1pVbVZGbFJwVVpWV1pVbVZGbEprZ0U3d2lPMGloTm1PempoWU5lK1Ftdi9JUlhmc0lyUCtHVm4vaU5UeHQ4UGZMMUlLSVBGNTc1MU1IWEkzUDg4OXpnd3VBUy9Vam9SMEkvRXZxUjBJK0VmaVQwSTZFZkNmMUk2RWNpcU5DOUhiNzd6dUlyOFBSMGxFYnBWNFE4MjZkazlucFZCNzJxZzE3VlFhL3FvRmQxa0o4cGZxYjRtZUpueXF2c09QT3BnUlJQa3p4TjhUUVp1Yk1RajN5akVBOXU4QXBYZUlVcnZNSVZYdUVLcjNDRlY3akNLMXpoRmE3d0NsZDRoU3U4d3AvcHdWRTlPS29IUi9YZ3FCNGMxWU9qZWhEcVFhZ0hvUjZFZWhEK3I3OGo3bEJaSjcxTWU2bUw5dEYrNnFaWHFJZDY2UUFOMExuZTVUcFJHT0xHTURlR3VUSE1qV0Z1REovKys5dlhUZWdiZElKTzBwdDBxakRCalFsdVRIQmpnaHVsM0xoQjM4N1h0MHYxN2UzNk5rUGZ6dGUzUy9XdG1LVVozQ25sVHFsTG9DV3lMN2dzK0MrcUwzNG04SlRxVDZuK2xPcFBxZjZVNm92c3krdFhYci95Wi83TzZHeHBIajdiM3huOU9yM0I3L25kZVg1MzN1bWZnZzdxeUtDT0RPcklvSTRNNnNpZ2pnenF5S0NPRE9ySW9OZDA3czhSL3VxOVV2LytFeVM3VlQvb083M05kM3FiS2hPUjR1Y3lTbjNIdU84WTl4M2p2bVBjZDR6N2puSGZNZTQ3eG4zSHVPOVlmTjlDTlFlcU9WRE5nV29PVkhPZ1d2K3I5YjlhLzZ2MXYxci9xMlh3QWhtOFFQK3I5YjlhLzZ2MXYxci9xL1cvV3YrcjliOWEvNnYxdjFyL3EvVy9XdityVlhWTVZjZFVkVXhWeDFSMVRGWEhiSllSbTJYRVpobXhXVVpzbGhHYlpjUm1HYkZaUm15V0VadGx4R1laMFlsUm5ZanBSRXduWWpvUjA0blltYzF5V0NjTzY4UmhuVGlzRTRmTnhOdk14RitaaVhkdzZPTm00bTFtNHEvTXhEdTQ5WEY4alFXZkQ1WUVmeDdjVHcvUWcvUVFMYVdIYVJrOVFvOVNSZkJKYm5WeHE0dGJYZHpxNGxZWHQ3ck9jWDM5ZWljUGNtdVFXNFBjR3VUV0lMY0d1VFhJclVGdURYSnJrRnVEM0JyazFxRDVxekYvTmVhdjVpMCtENjduMEJvT3JlSFFHZzZ0NGRBYTdpemx6bEx1TE9YT1V1NHN0WFBQdzVEcjdOdnY0c2psOXUxM3NPUTYrL2E3ZUhLNWZmdWR5TDJGWFpIN0NvMlIvY0Zsa2U3Z1BaR2VZS2FLbHBqUysra0JlcEFlb3FYME1DMmpSK2hScWloeVc4OTJuczcvdWE2TVBTcmRvOUk5WG4zU3E4OTQ5Um12UHVQVlo3ejZqUDd1K1E5dW1tNXBHRG56THNIelZMWDN6RHNGejFQUlh1a1lqUlRmNDFOTVI0VUtLbFJRb1lJS0ZWU29vRUlGRlNxb1VFR0ZDaXBVY0srZVovVThxK2RaUGMvcWVWYlBzMmZmVWhpK2t6cmt0Sk5lcHIzVVJmdG9QM1hUSzlSRHZYU0FCbWdJVXc3VE1CMmhFZks4d3FFY2gzSWN5bkZvZ2tQSE9YU2NROGM1ZEp4RFJUWU1jdWcxRHIzR29kYzQ5QnFIWHVOUWdrTUpEaVU0bE9CUThiOHYvNmVTY1JHSHJwS0s4NlhpSWc1ZEpSSG5jK2dqSFBvSVN2NUlPdnFMMnk2WUlSMHpwR09HZE15UWpoblNNVU02WmtqSERPbVlJUjB6cE9OREp2NjlKdjY5LzhmZlprekk3V3NvT2tsNW1xSnBPaDc4WjY5NDFDc2U5WXBIdmVKUnIzalVWSDR1Y3BOWGM2cytmcjB3ckg4amVqY2N1Vk51djBIZkN1NlAvREQ0ODBnWkxRbithL0J4dlJ6VnkxRzlITlhMVWIwYzFjdFJ2UnpWeTFHOUhOWExVWDBjMDhjeGZSelR4ekY5SE5QSE1YMGMwOGN4ZlJ6VHh6RjlITk8vTWYwYjA3OHgvUnZUdnpIOUc5Ty9NZjBiMDc4eC9SdlR2ekg5RzlPL3NkL3lON05wYnFTNWtUN3orYXV6dlNNcnpvazRKK0tjaUhNaXJuZVRlamVwZDVONk42bGY1NSsrb2U3d2EvR0d1azdseDFSK1RPWEhWSDVNNWNkVWZremx4MVIrVE9YSFZIN01GRStvUHFQNmpPb3pxcytvUHFQNmpPcnpxcytyUHEvNnZPcnpwdmk0S1Q3T2hUd1g4bHpJY3lIUGhUd1g4bHpJY3lIUGhUd1g4bHpJY3lIUGhmeHZ5Zmt4TGh6andqRXVqSE5oZ2dzVFhKamd3Z1FYSmt6eGtiTnUxRnNMR1pRNmJoWXk2SFRjWkU2Y3JyNVM5WldxcjFSOXBlb3JWVitwK2tyVlY2cStVdldWcW45QTlidFZ2MXYxdTFXL1cvVzdWYjliOWMycWIxWjlzK3FiVmQrcytsN1Y5NnErVmZXdHFtOVZmYXZxVzFYZnF2cFcxYmVxdmxYMXJhcHZWWDJyNmx0VmYxTDFKMVYvVXZVblZYOVM5Y1gzTkh3MmNwTkp2aGxidityM3R3WVg2K2ZOWnpiVGJCbThXRjl2UHJPWlpzdmhJM0w0aUJ4V3EvWlJGOHVuSXE4VTZpTzloVk9SQThHZHdidFVmMGoxaDFSL1NQV0hWSDlJOVlkVWYwajFoMVIvU1BXSFZELzQ2M2RYZUJVeDMzM0FWNC81NnJIVDJkbm1xMnp6VmJiNUt0dDhsVzIreWpaZlpadXZzczFYMmVhcmJQTlZmc0RESVI0TzhYQ0loME04SE9MaEVBOWpQSXp4TU1iREdBOWp2dU1MdnVNTHYrT2xlSUtISjNoNGdvY25lSGlDaDhYci9FNGV2c0xESGxWOGdvZHY1K0VOUEx5SWgzTjQrSFllM3NERGkzZzRSNVdQcWZJeEhsYndzSTJIcFR6czVkOHRwNThoNjFSZXAvSTZsZGVwdkU3bGRTcXZVM21keXV0VVhuZm1SajdYay9oWjN0dHBDKytrMysyL0lISFc2WkdMNHAxN3Mrb1BxTDVYOWFWbnFwK2wrdk5WZjgrWjZtZXAvbnpWMzZQNkoxWC81T24zQTcvL1AveSsvT1dGZXBYV3E3UmVwZlVxclZkcHZVcTNxSFNMU3Jlb2RJdEt0L3pHdTFpYlZOcWswaWFWTnFtMFNhVk5LbTFTYVpOS20xVGFwTkltbFRhcHRPbGMxNkNLL2tKRmIxUFJQTlg4aFdxS2QrMDhWVHdkWEsrS2NsV1VxNkpjRmVXcUtGZEZ1U3JLVlZHdWluSlZsT3ZaTjgvNXllSk5oVGFWdEtta1RTVnRLbW5UczMxNnRrOGxIU3JwVUVtSFNqcFUwcUdTRHBWMHFLUkRKUjBxNlZCSmgwbzZWTktoa2pkVThvWkszbERKR3lwNVF5VnYvRi8wdnRGbGRWT2hTLy82OU8vYU03ZnBGMVI3c1dxWG5ibE52NkRpaTFXOFRQK1c2ZDh5MC91dzZyZWEzdXROYjRmcHZUTDRJQ2NtT0RIQmlRbE9USEJpZ2hNVG5Kamd4QVFuSmpoUnBINC9GL3E1ME0rRmZpNzBjNkgvSFBmcWVmcDVIaGY2dWREUGhYNHU5SE9obnd2OVhPam5RajhYK3JuUXo0VitMdlJ6b1IvTnA5RjhHczJuMFh3YXphZlA5amNkS242L2FtZXA5UDJxbktXeWc4RVhTeTdoMFV5NmxDNmp2NkgzMGVWMEJWMUo3NmNQMEFmcEtycWFQa1FmcGxuMEVicUdycVdQMHNmbzQzUWRmWUkrU2RmVDM5TGYwYWZvMC9RWitpemRRS1gwT2ZvOGZZSCtubVpUOGYvRlpoV3RwalZVUld0cEhhMm5EYlNScW1rVFBVM1AwR2Fxb1ZwNmxuNUdkY1gvYjBiYVNzOVJQVFhRTmlyK2xQdEZ6N1cvb0Y5U0M3WFNIdit1clJBcmVZbmFxWU02TWZ4V1QzNjM0L3RYT0pqbFlKYURXUTVtT1pqbFlKYURXUTVtT1pqbFlKYURXUTVtT1pqbFlKYURXUTVtT1pqbFlKYURXUTVtT1pqbFlKYURXUTVtT1pqbFlKYURXUTVtT1pqbFlKYURXUTVtT1pqbFlKYURXUTVtT1pqbFlKYURXUTVtVC84L0E2MmkxYlNHcW1ndHJhUDF0SUUyVWpXNVNEaVk1MkNlZzNrTzVqbVk1MkNlZzNrTzVqbVk1MkNlZzNrTzVqbVk1MkNlZzFNY25PTGdGQWVuT0RqRndTa09qbkR3TlE2K3hzSFhPUGdhQjE4cmVkbVR3MTdxb24wMlpQSEpvZmg1NHE5ek5NZlJIRWR6SE0xeE5NZlJIRWR6SE0xeE5NZlJIRWR6SE0zOVQrYnVQRDdLOHQ3NytEMHpNZUtRYUZVRUtUNjFyYnZXdW1FWE4ycHJyWjRlcFdpMWVqekhwK2ZVNm9PUW9zWGRnZ3FJYTkyM3RyWnFWY1Fsb01hbFlSTUZoaTFBQ0FUR2tJRE1aRUlJbVF4Ykp1QjJuL2NNb3c5dDZUbVAvNXpYOC9MMWNVSnlYOHY5L1gxL3YrdTZrbGtvbXFOb2pxSTVpdVlvbXFOb2pxSTVpdVlvbXFOb2pxSTVpdVlvbXFOb2pxSTVpdVlvbXFOb2pxSTVpdVlvbXFOb2pxSTVpdVlvbXFOb2pxSTVpdVlpRDdpckIvRVFIc1lqZUJTUDRYSDhQdXloZUEvRmV5amVRL0VlaXZkUXZJZmlQUlR2b1hnUHhYc28za1B4SG9yM1VMeUg0ajBVNzZGNEQ4VjdLTjVEOFI2SzkxQzhoK0k5Rk8raGVNOS9vZmhLaXVjcG5xZDRudUo1aXVjcDNrcnhWb3EzVXJ5MXVMZTd0UENNck9JblNjVlFodDFRanQzUkMzc2dqdDZvUk9IenBrYmpGdHlLMnpBRzFybUlkUzVpbll0WTV5TFd1VWhobll0SDlnb09qUHdMaHFNS0kzQVZyc2F2Y1EwS3AvMjd6U05wSGtuelNKcEgwanlTNXBFMGo2UjVKTTBqYVI1SjgwaEd2aFF1aSt5TmZiQXYrbUEvOUVVLzdJLysrSEs0TVBLVmNGSGtRSHdWWDhQWGNSQU94aUU0RklmaC8vZDN4ZmxKT0RzeUJPZmhmUHdVRjdpL0MvRXpYSVNMTVNwc0ZLTkdNV29VbzBZeGFoU2pSakZxRktOR01Xb1VvMFl4YWhTanhzZzkyandRWnJnNnc5VVpyczV3ZFlhck0xeWQ0ZXBNWkdaUUdYazNLSSs4aDFtWWpUbVlLOEx6TUI4THNCQi9tOXNYT05OZUZONVEybnRYbGZiY1ZkYWcrY1hYSEQwZDlJdE5EVTZNdmV2MG1Rb09pcVdEODJPdHdUNnhUUERsMkRyL2JnLzZ4TlpiaFR0OGIwTndZbkIrOFJQTllpakRiaWpIN3VpRlBSQkhiMVNpOExsbmUyTWY3SXMrMkE5OTBRLzdvejhLbjR4VytGeTBBL0ZWZkExZngwRTRHSWZnVUJ5R0MxeDdJWDZHaTNBeENwK21OaHEzNEZiY2hqRVlpM0c0SGVOeEIrN0VQY1hYd2FiVmlyUmFrVllyMG1wRldxMUlxeFZwdFNLdFZxVFZpclJha1ZZcjBtcEZXcTFJcXhWcHRTS3RWcVRWaXJSYWtWWXIwbXBGV3ExSXF4VnB0U0t0VnFUVmlqVGxlMVArUjVUdlRma2ZVZjVkaXZlTnpRaStYdndFdXlacU5sR3ppWnBOMUd5aVpoTTFtNmpaUk0wbWFqWlJzK2tML0RVd1M4MGNOWFBVekZFelI4MGNOWFBVekZFelI4MGNOWE9SbndUN1JvYmdQSnlQbitJQzdTL0V6M0FSTHNZb0svSm8zSUpiY1J2R3dKNk13cHNwdkpuQ215bThtY0tiS1p6OW4zcUdVdXdDSHQ3eHFzRHpTNjhLUEQ4MlBEZzdpUHBPNFhuK2ZZTXlQKzlWUERkZFduek4zZG5Cbm1wamhkcFlvVFpXcUkwVmFtT0YybGloTmxhb2pSVnFZNFhhV0tIbFlWcWVwK1ZoV3A1WGJEbEF5d0ZhRHRCeWdKWUR0QnlnNVFBdEIyZzVRTXNCV3ZiUjhsZGE5dEh5VjhXV2xWcFdhbG1wWmFXV2xWcFdhbG1wWmFXV2xWcFdhbmxvY2RkNHFVZTd4aTgwMjBPTHYrUGEwWEpnVVlNakMzOFRDQzdrdFJaZWErRzFGbDVyNGJVV1htdmh0UlplYStHMUZsNXI0YlVXWHF2bnRYcGVxK2UxZWw2cjU3VjZYcXZudFhwZXErZTFlbDZieDJzemVHMEdyODNndFJtOE5vUFhadkRhREY2YndXc3plRzBHWDgzanEzbDhOWSt2NXZIVlBMNmF5bGRUK1dvcVgwM2xxNmw4TlpXdnB2TFZWTDZheWxkVCtXb3FYMDNscTNucVpWYTl6S3FYV2ZVeXExNW0xY3VzZXBsVkx3dSt5L05kbnUveWZKZm51enpmNWZrdXozZDV2c3Z6WFo3djhueVg1N3M4MytYNUxzOTNlYjdMODEyZTcvSjhsK2U3UE4vbCtTN1BkM20reS9OZFB2Sm0yQ2FiYTRLOTdRZDY3QWUyMlE5c3N4L1laait3elg1Z20vMUEwbjZnMjM2ZzIzNmcyMzZnMjM2Z1c1WE9xTklaVlRxalNtZFU2VlhCYm5JeExoZmpjakV1RitOeU1SNE1FYlVWb3JaQzFGYUkyZ3BSV3lGcUswUnRoYWl0RUxVVm9yWkMxRmFJV2tyVVVxS1dFcldVcUtWRUxTVnFLVkZMaVZwSzFGS2kxaXBxR1ZITGlGcEcxREtpbGhHMWpLaGxSQzBqYWhsUnkxajVXcTE4clZhK1ZpdGZxNVd2VlNSYlJiSlZKRnRGc2xVa1cwVnlqVWl1RWNrMUlybEdKTmVJNUJxUlhDT1NhMFJ5alVpdUVjazFJcmxHSkZ2L3UzY2Vzdkx0YStYcmJlWHJiZVhyYmVYcmJlWHJ2YXVWajRZL0tUNGo5bCtDQTNqK0VobHdBTjlmSWtLemkyZUZyUDFGMXY0aWEzK1J0Yi9JMmw5azdTK3k5aGRaKzR1cy9VWFcvaUpyZjVHMXY4amFYMlR0TDdMMkYxbjdpNno5UmRiK0ltdC9rYlcveU5wZlpPMHZzdllYV2Z1THJQMUYxdjRpYTMrUnRiL0kybDlrN1MreTloZForNHVzL1VYVy9pSnJmNUcxdjhqYVgyVHRMN0wyRjluaXA0WCtBVS9pVDNnS1QrTVovQm5QNGprOGp3bDRBUlB4SWw3Q3kzZ0YxWmlFeVhnVnIrRjExT0FOekZRemQ3MXo3ZGpWc3pNNHRZdFR1emkxaTFPNzdGd3pzY0tyaUMrZ2FJcWlLWXFtS0pxaWFJcWlLWXFtS0pxaWFJcWlLWXFtS0pxaWFJcWlLWXFtS0pxaWFJcWlLWXFtS0pxaWFJcWlLWXFtS0pxaWFJcWlLWXFtS0pxaWFJcWlLWXFtS0pxaWFJcWlLWXFtS0pxaWFJcWlLWXFtS0ZwNGQ4c1VSVk1VVFZFMFJkRVVSVk1VVFZFMFJkRVVSVk1VVFZFMFJkRVVSVk1VVFZFMFJkRVVSVk1VVFZFMFJkRVVSVk1VVFZFMFJkRVVSVk9xUUk2cXFWMCszeVhoKzd0NGppeFYyNmphUnRVMnFyWlJ0WjZxOWNIanNqMGwyMU95UFNYYlU3STlKZHRUc2owbDIxT3lQU1hiVTdJOTlRVjJWNFZYT25mSzlrN1ozaW5iTzJWN3AyenZsTzJkc3IxVHRuZks5czdJNGJMckNCeUpvL0FOSEkxdjRoZ2NpK053UEU3QVFKeUliK0hiK0E2K2k1TndNazdCcVRnTmcvQTluSTd2NHdjNEF6L0VtZmdSenNMWitDZjhHUCtNYzNBdUJtUFgxZWp2M3g5dGxKd2FqVnR3SzI3REdJekZPTnlPOGJnRGQyTEgrNkQxcUVZOXFsR1BhdFNqR3ZXb1JqMnFVWTlxMUJQNXZVcnpCenlKUCtFcFBJMW44R2M4aStmd1BDYmdCVXpFaTNnSkwrTVZWR01TSnVOVnZJYlhVWU0zTU5OYS9pN2V3eXpNeHB4ZHZ5dkMzem5wZ3ZEZlZjR0xTbi9yT3FYMGQ2NVRWTUdsUlhldDU2NzEzTFdldTlaejEzcnVXczlkNjdsclBYZXQ1NjcxM0xXZXV6cTVxNU83T3Jtcms3czZ1YXVUdXpxNXE1TzdPcm1ycy9UY3N5N3U2dUt1THU3cTRxNHU3dXJpcmk3dTZ1S3VMdTdxNHE1eTdpcm5ybkx1S3VldWN1NHE1NjV5N2lybnJuTHVLdWV1Y3U0cTU2NXk3aXJucm5MdUt1ZXVjdTRxNTY1eTdpcm5ybkx1S3VldWN1NHE1NjV5N2lybnJuTHVLdWV1Y3U0cTU2NXk3aXJucm5MdUt1ZXVjdTRxNTY1eTdpcm5ybkx1S3VldUx1N3E0cTR1N3VyaXJxNWRQbC91aTd1cjY3OS81NnFnakx2S3VLdU11OHE0cTR5N3lyaXJqTHZLdUt1TXU4cTRxNHk3eXJpcmpMdkt1S3VNdThxNHE0eTd5cmlyakx2S3VLdU11OHE0cTR5N3lyaXJqTHZLU3U3cXhWMjl1S3NYZC9YaXJsNy93RjA1N3NweFY0NjdjcVUxZHRRdTNOVVlYTVJkcTdockZYZXQ0cTVWM0xXS3UxWngxeXJ1V3NWZHE3aHJGWGV0NHE0RzdtcmdyZ2J1YXVDdUJ1NXE0SzRHN21yZ3JnYnVhaWk5Mm1JQmR5M2dyZ1hjdFlDN0ZuRFhBdTVhd0YwTHVHc0JkeTM0QjYrc21DOVM4MFZxdmtqTkY2bjVJalZmcE9hTDFIeVJtaTlTODBWcXZrak5MNzZ5NGdGbnFBZnhFQjdHSTNnVWorSHh3bTlHT2VVUGVCSi93bE40R3MvZ3ozZ1d6K0Y1VE1BTG1JZ1g4UkpleGl1b3hpUk14cXQ0RGErakJtL2d6Y0w3SVFRblVQZ0VDcjlYek4rMUZGNUw0YlVVWGt2aHRSUmVTK0cxRkY1TDRiVVVYa3ZodFJSdW8zQWJoZHNvM0ViaE5ncTNVYmlOd20wVWJxTndHNFhiS2J5T3d1c292STdDNnlpOGpzTHJLTHlPd3Vzb3ZJN0M2K1J2WFA3RzVXOWMvc2JsYjF6K3h1VnZYUDdHNVc5Yy9zYmxiMXoreHVWdlhQN0c1VzljL3NibGIxeit4dVZ2WFA3RzVXOWMvc2JsYjF6K3h1VnZYUDdHNVc5Yy9zYmxiMXoreHVWdlhQN0c1VzljL3NibGIxeit4dVZ2WFA3RzVXOWMvc2JsYjV2OGJaTy9iZkszVGY2MmNVVTdWN1J6UlR0WHRITkZPMWUwYzBVN1Y3UnpSVHRYdEhORk8xZTBjMFU3VjdSelJUdFh0SE5GTzFlMC8vZW5qdi9SMVdGWCtidXIzd2I5YmY3K1N2N2VXTXJmMDByNWUxcnh1YmZYZnNIM1JQeC8vUjFnQTNjMWNGY0RkelZ3VndOM05YQlhBM2MxY0ZjRGR6VndWNE1kWmQ2T01tOUhtYmVqek50UjV1MG84M2FVZVR2S3ZCMWwzbzR5YjBlWnQ2UE0yMUhtN1NqemRwUjVPOHE4SFdYZWpqSnZSNW0zbzh6YlVlYnRLUE4ybEhrN3lyd2RaZDZPTW05SG1iZWp6TnRSNXUwbzgzYVVlVHZLdkIxbDNvNHliMGVadDZQTTIxSG03U2p6ZHBSNU84bzhkK1c0SzhkZE9lN0tjVmVPdXhxNHE0RzdHcmlyZ2JzYXVHc1pkeTNqcm1YY3RZeTdsbkhYTXU1YXhsM0x1R3NaZHkzanJtWGN0WXk3R3Jpcmc3czZ1S3VEdXpxNHE0TzdPcmlyZzdzNjFJSzhYV2JYTHQvOWRLN3Z6OE44TE1EQzRqT0JDcWVmQTRMSzZFbGhPdm9EbkJYK2EvVHM4S3JvajhPcll1ZUVzMklYT0ROZFZIeEgxTUxuSEV3dWZjN0JaRjdJQnIyang0WWQwWUg0TmdiaHJIQ3AxZ3UxWGhnOUoxek9TYXUxYk5hcU9kalQxWjJ1N25SMTNuaHJ0T2cwNXByb0VJOFgrZDRsdnI0TVZiZ3JYQlc5TzF4bG5IVkJYTXR1TGJ1MXltalZyVlhHRld0ZHNkWTlITzBlam5ibHd1SVliYTVzTThaS1Y3YVpVWjBaTFRLalJkSGkvWVR6Q3UrZ1VIcGY2Y3JTKzBwWEJyMzBQVkcvRTgxaWtsbE1Nb3RKeHBocGpKbkZaOFB0bysraCtoNnE3N1MraCtxN1I5OWI5YjFWMzRVNUoxMmRqRjN3NmRiWVJaOTJsMzdiZEV6cHQwM0hsSjQ1Tkx2WTA4LzE5SE5qenRmVHo0MDdQM3BXOEwvMGNLNGV6aTI5ZHZPZTBuTWlqaXk5SThVSnBYZWtPS0gwamhRWEIxL1MwOVY2dXRxY3R1cHRudDZ1MXRzOFBWMnVwOHYxVktHbkIvVjBuWjcyMGN1QmVqaFFENlAxY0gyd3UxYXp0Wml0eFFvdFZyaGlIMWZzNDZjUEIzdFJZd3MxdGtTSGhpOUVyd3dmaVE3RGNGU0ZXLzdHSHpmengzUjYzc3dmMDdYZUttNURlT0lpRE9XTEszbGlHSWJqVjhhNUlQemdjMjlFWE45aExrUEU5aEt4dlF4VnpwQ1hGSDgvZGFpZk52RG9FTis5S0h4ZmIzVjZxOU5ibmQ3cTlQYnUzOFIxejFKYzl5ejJ2TVo5REFscnRFMXAyNlB0eDlwK3JPM0gycTdSdHBlMnZha2NMNzdPNEZLUGhkY2E3UGo3Y3FMWWVxeDV6VE92ZWRHaHdRSG1OaytyWDFCMk8yWHpXby9UdWwvcHQzSDlpbi9ESFI0K1h2anJkSEhlVnh0NzYrYzk3R2o5SGEyWGxGN1RmMmF4NVk1V0QydGxmWGYxSWxjdmN2VWlQOTNQVC9memswYzU5VnJ6dmk3Y0hyMmV2OGNGdTBWL0czWkZINVZEVDRUWjZPL2taZFJQUDR5T0MvTkJ4UCszaThQMXN1c0dkMzRqeG9XTjBmRjZ1VU12OTRidDBjZk04SW53SXkwLzh0MWY2MnNrcnRYRDlYdytLbHluLzlib0kyRXU2blREdTcrbStFaGM2N3MzdVBKRzNCTFdSMi9GYlJpRGNjRiswZkhoNU9qOXJuc2cvQ0Q2SUI3Q3czZ2lyRFZXYlZCbWxxdGR0Y3hWYTZPUGhadk1lMXk0Mlp4NnpQalg0VGFqYkRQQ2gwWW8zTTFhRHMxemFONFZlYjFzMDhzMk03N09MQXYzTjByYjBXWTVUaFVZNzN2M2kvWmpZUzc0c3I1bTZHdUdHYmU3Y3A0KzAvcE1SMi95NzFIaGVxMDJ1NE5PZDlEcERqcmRRYWZ4UGpIZURPUE5NTjZtNkgzaFhIZXkwcDJzZENjcjNjbEttdFRSUFdFdWplYlNHQXd3VXNaSUdTTnRNYS8zakpZelFwTVJOaGloeXdoZFJ1Z3lRcGQ1VnBqbjYwYnBORXBuMU82ZjB1M21YVzJrZGlPMUc2bmRTTzFHeWhwcGsvdVpiclExUmxzVDdHRzB2Tkh5eGJ2ZjBkdFd2VzNTMnlZOTVmVzBWWTIrUVp4dnhEaGpqS2ZzUGE2ODE1WEZLM3o5R0o3Z2k5K1ZvdHV1ejNhdE9yWHFOT3NPcys0dzZ3Nno3aWlPODltTTlmOTNNMzNDTmIrVHk0VlliaXoreHJKY241MzY3SFFYbmU0aTQ1cE8xM1FXWTlmOTEvUFQ0ejNGbWVmZGExNUZ1RTc3Y2ZvY2I5eDdmSDB2SDl6UFhZOEZjZFh2TXdXdUZhMVJHQjMwZC9YSFpyalJERGU2ZXB2NzNDaDZXN1g2cGhua3pXRHI1KzRwZUxEZ3NVMW1zRW5MdVovbnp0WWdWdnpaT0l5WEdYc1phNEd4RnJnNjYrcXNzUXJaMVdSbXV4bHZuZkhXRmJXOTM3OGZrUnVQY3RZVHZ2YzdLMWlzbUs4NzduQmJNREE2U1F6ZkRQcEdwNGRMb2pQd0xsZStaMjZ6d2x1anM4Tm5vbk13MTFxME1QeE5kSEU0THRyZ21rYVBLNUNqOGtaczBVZDNlSDgwSDA2SjltQzd2UHNrL0dNc1VIZkt3dmJZN2g1N29kTFhmY1B1V0Qvc2o4TnhCSTRPdDhhT3NaSWZGODZJSFk4VE1GRE4vWTVWOStUd2paaDE5dk5QT3JvdytGTHNaMEZGNlhWSXg2cjByNnF3eDZyMHI2cEo3VmF1NTl6YkpMeEgvVm5oY25leDFWMXNkUmZiby9NOExyU2VMMWJObHJ2TFJvOHIwTTdENjBXeFcvN2x1YjhISDRhYjNNRUhaditCMlg4UTY2L0NIaE9telhLTFdXNHh5eTB4dXprelRBWDdsMFp0b3Q4Mm82NDBhdGFvV2FOK2JOUldveWFOdXRLb1c0eTYwcWdyalpZMzJtYWpiVGJTWmlOdE50Sm1vMnczU3JkUnVvM1NiWVJzTU1JSWwwZGZDbTgyeXJib20rR3IwYitFbzZLMW1LNHV6TUM3ZUUvMW5CdE9pQzdrbmdiL1hpN2JrK0V2bysrSDA2Sk5XSVZtdEdCMWVFVjBqY2VVNjlMaDI5RldYMmV3RHUzQnRkSDE0VlBSRGw5dlFHZDRYVFRyc1FzNXU0U04yT1RyemRnU1hoamRxbExrM1dFUHRvZW4wUzRSL2NqUFBzWW40VnZSVHoyR0loaEJGTEZ3Tm1mOFBMYWJyOHZEKzJKeGU0TGV2cTZ3MzY4TUcyTjdoVmZIdm9TOXNRLzZoRi9qbklHY001QnpCb3JGME5pWHcydGlBL3pzQUJ3WVhCNzdtc2V2NDZEd3U3R0RjWWlmSCtyZmgrSHc4Q0JPT3loMnBLKy9nYVBEcjhlK0dYNmYwczlTK25wS1gwL3A2N251VERIOVEreGJydmsydmhQZUcvdXV4NU53Y2pnbGRvckhVM0dhUGNzZzgvaWVyMDhQTHlrOTYzR05OZlJwYStpVlZ1Q3ZXbjIvR2h0YTNIKzhHeHdsU210RmFhMG9yZVdQdFR2NW80VTMybmdqS1dKcmVTUEpHMGtxdDFHNWpicHRmTEthdWkzVWJhRnVocUpwZmxsTndUYWVXYzB6cTZtMm5rSWJLYlNSUWh2ZDhVWjN2TkdkYm5TWEtYZVpkcGRwZDVsMmx6bDMxdVdPV3R5RjJoaWNMSzlPbFUrcjVkTHE0REEreS9OWE8zKzFtM21qbVRlYStWSXpMK1JSWGNuTks4eTRzWlJISzh4NkJkOTh4Y3liekx6SnpCdk1kcjdadHBscGt4bTJpbVBHTEJ2TXNzRXNHOFN0dDNpMWlWZWJHU2ZOT0duR3kwdDU5cjRadjIvRzc1dng4a0tlbVcxRGNMZ1pMVEtqUldZMDM0emF6T2l0VWxhbnpXaVIyYVROSm0wMis1ck5CclBaWURacjZiaUdqbTEwYkN2VnFDUWRWNXJkQmpxdXBPTktEdHhXcWxOcHMweWJaZG9zSzh3dWJYWnBzNnMzdTlWbXQ5VHNscHJkVXJQN2dKN05aampYRE5OV3R1ZGtlV0ZtcytYcUhNeVQ1UXZOWUxGS3NOd0sxK2h4UmRncVM5dnRFQThzZk02cU5wdnB2bzN1ZWJybnRmbVFyNXI1S1dOZjlCemxYOElrZkhiRnJQRFhuOWZvZWZZWUM4TW5DL1ZGSEo4VHgrZnNONTZ6dzMySklwTTRaekszdldsT2YvSHZXc3lpd0d5S3pNRTg2aTIwT2kwTzM0a3VWZnQyeFBRZGMzeEgvY2lwRlIxcVFFNmU1c1J3cVpnMWlWbVQrYTAwdjVYQlFVYTYzMGkzR2luOVY5VnBsdFZzdG5Wc0R1YjUyY0l3Tk1yV1VoM2Nhb1N0UnBoa2hCb1ZwOTRvQ2FNa2pQTEx2NHJCUWVGSUk0NlUxUnZFSWlVV0tiRm9MV3BQYzFsWWVPN0ljV1p6SEMzZnBlVmNpclE3b1FUaEo2TDdpZWgrUXVsdlcrc0xXczV5aDdQZDhSeTBCK1hpdVVrOE40bm5wbUt0dmMzZFBPWk9acnFUaDl6SlExeFh6M1gxK3A0Ym5XM0ZuSU81NGJQdTZDT3VxM2RIYmU3azJuOVFhKzhvMWRwcGF1M012Nm0xdDduem1wMXE3YTA3MWRxUjNEdHlwMW83VksydDM2bldYcWpXTHQ2cDFrNy9CN1YyWktuV1BrdmRXMHUxdHFwVWE2dlUyaXExdGtxdHJhTDh5WlEvaS9KblVmNHN0WGE4V251OVdsdWwxbGJSOEdLMXRrcXRyUktWTTBYbFRGSDVWN1cyU3EydEVwMHpSZWRNdGJaS3JhMFNwUitvdGY4dWE2cXBmQnVWYjZQeWJTSjNqbHI3VzdXMlNxMnRra0ZqMU5vcXRiWktKdDJpMWxhcHRWVnE3YitKOEZscWJaVW9GOTRqOGNMU3MvU3JSZnQ2dFhaL3RYWi90WGFKV3Z0S2NJWG8vVkwwZmkxNnI0bmVTTkViS1hyTFJXOTVzWXE5SnhQbmhuTkVib1BJTFJlNWRTSjNqY2pWaVZ5ZHlOV0pYSjNJMVluYy9TSlhKMnJ2aUZxZHFOV0pXcDJvL1p1b3ZTbHFkYUpXSjJwUGlGcWRxTldKMmx1aTlwYW8xWWxhbmFoTkZyWDU2ayszaUwwallta1JxeE94T3RHcUU2MDYwYW9UclRyUldpcGFiNGxXbldndEVLMG5SS3RPdEthTDFqTFJxaFd0V3RHcUZhMWEwZnFoYU4wdld2ZUwxdjJpOVk1b3pSV3RXdEdxRmExTFJhdFd0R3BGNnhMUnVrUzBKb3RXcldqVml0WmRvbldYYU5XS1ZxMW8vVmEwNW9qV090RnFGcTFtMFdvV3JVZEZhNWxvMVlwV2JYRnY5bDJQSitFVW5JclQ3TnNHbWNQM2ZIMTYrTHhJRFJhcG1TSlZlUDNqdDBSblNYQ282THdvT3Erb0ZBMXEwaVpSV2l4S0w0clNpeUxUSlROZmtaa3JaT1lLRldPbUtHVlZqRGZWcGF4SXJWYzEzbFExM2hTeDUwUm5qcHhhTHhLTFJXQTJoWk55SXlVM1VsUmVKL2VYVXpFbi81ZkwvK1hVbkUyeGFrcFVVNkxhTEF1dldEaXZzR1lIaC9ESVVoNVp5aU4xL1BFWEk3Znl4MUt4L3I2WU5vdHBzMWd1Tk1vSFJxazNTcjE0dmgwdHZJb3hjSkl1bzlQdUhudWhRcDJxdEtyMXBWay83SThEZzIvUXZvZm1UVFJ2b3ZYN2RNN1FlUkdkRjlGNUVaMGJhZnUrREVqU2NwbjllcnZWcDdCT0Rndy90dmVmVk54ZkRxUFFFeFI2Z2tMdm1lZXRWTmh1WGhQTXE4YThhdHg5UjJtZk1NbWNKcG5USkNlQ1dlRnZ0Wnl0NVd4MzJLUGxmVnBOLzN6bnZtTkZYUDNacmtLTG5EcTlFVnYwMXgyKzVNcUVLeFB1ZTdXclgzSDFSUGU5Ull1SldreTBqMDY1dXRzdUpTOHVQZmpRRGlOd1orVmhoNnNXdVdxUkZUSWxGN3JEOTEyVmNWWEdWZTM2Syt5RDYxMjUxWlgxcnF5M2dpZjVZalU2a2VPSmpkamlGTElkSDZya24xaXR5OElWV2pXTDc0dmlXY3QxSzdtdXNEYTlYWHdtVmVGWlZBWDM3YTJIclhyWXFvZXRwZjNBR3VPdjBWdEhjYWNTY0UxWmNmeDF4bDlYZXFYYk1jNGJ4MXRYRzYycmpVVlZPdlRTb1pjUDlOS3NsMDY5ZE9ybEE3M2s5REpGTDRYN25hS1hLVlRKK2VsRzdOalBmVlRRcjdqbkw3TnVsZmI5b3B2MDA0SitPVmRzeEk1WmJ0NXAxOUxwbmxkb3VVckxqOXp6SnExWGFiMHFpTHJUd3UvbFRuQ1dURnJWT3ZYem9aN2o0Wlpnejg5WDhaUU02eXpHY3FsZVYrdDF0YXRXNmZFTnRXZHJTZnMzOVBoR3JQRDVzSVdXYzdUOGk1YWJ0WnlpWmR0bnA1WkNKZHZaTDFwTW9mOFF1di9DbWJUd0dybzl0TitrelNadE5taXpvWFN1eWhscHZYWTU3WExGTzU5cWxJUVI1dTJVYTh2ZGNiVVcrV0p1eFl1L3JicTlGTjMzalRLMCtQdTRRdXRYaTdXZzA2a3FwMDVzeEJaVmZYdlJHMWxqRlhSWXFmVlZwZDkxTGRINjR1TGZFZmJSZXJYV2I3dkRSZXI4Q3IyOFk4YVRkOHFsdDB1WjhVY2FGU3BLWWQvOVJ6UC9vMTdmMGVzOWVwdFVqUElxWTY4cTduMjc1ZGYyY0paV1dYTllwVVZXaXl6M0pDbVg0dmR1K1p1M1R2VGdRL1Vnc05MdVVHVzhLOGZ6MjMvdzIzK0laN2NaNWZYWkEydTgvVXAvdThOamNKeDRIWThUY0dLNFhaM29vL3IzTjlabmU3Umo2SDJjK3o4ZUorREU0bXYxMmd2dlNCREVYZDNsNm0ydTduSjFseXQ3WE5uanlwN1M2YlpEbGR3WWZDVVNEZWRHWWlqRGJpakg3dWlGUFJCSGIxUWF2OElKdGsvNHBPcTNRZlhib1BwdE1NSmtJMHhXQWJ0VXdQVXE0SG9WY0oyNjFxYlNiVEJLRnlXZnBlU3p4V2YvRnA3NVc4alovZFRScmJFK2NyQ3Z1K3FIL1hHNHZEa0NSK01ZUFIzSFNjZmpCQXowdlJPRHZkVFJ3dGs1by9lc1BMWnJDSTV6NXl2ZCtVbzF0WS9kWTMrN3lJUDQ5bUFjVXZ3dHhMYS9POS8vaTdsZEdtNmdWWVdyKzFLdUgvYkgvejBUZEJUSFBOblZnNmk2aDc1enhkOFhIR1NmY2pDTzg1UGpjUUpPTkViaGN5NTd1V0p6NmZjZVMveDBpWjh1S1kzNG9CRWZESGIzMDY2L2luQWhHcDlWb2NJb2kvWFJiWlNWUmxtNTh4NVdQNFg1WklLSTJYVUgrOFlxZmRVbmZNcjh1OHkveS95N3RIdEx1N2ZjZWZkT0VjbTZsdzN1bzB0RUNxK0pmRmxFWGhhUmZVU2s4THY0WkxDM25sNzdtOWpPME5NTVBXM1IwMVk5YmRYVE5qMXRLY1YydTU0VzZtbmhaejBWSTdEVy9OZHAvYjdXNzJ1ZEw1MzhkdloweG4xOHFJZHVpdlcxMisrSC9YRTRqc0RSenQwN1RnRWZGRFZwMFYrTC9scjBsOVBmY3YwdDA5OHkvUzNqaVk3aWMwd1BpdjN2NEtEZ3pPQ3k4SGZCTDNFNVJvWlBCemZSL1diOEJxTXdHdW53aWFBVkdXd3V2bWZiQThHSCtBZ2Y0NVB3Z2NqaFlYM2tDQnlKby9BTk9DdEd2b2xqY0N5T3cvRTRBUU54SXI2RmIrTTcrQzVPd3NrNEJhZmlOQXpDOTNBNnZvOGY0QXo4RUdmaVJ6Z0xaK09mOEdQOE04N0J1UmlNb1VHL3lNenduY2k3NGR1Ujl6QUxzekVIYzhQcGtYbVlqd1ZZcU1JY0hPd1RMZzcyQlpjRis2RXYrdUV3SEk0amNDU093by94enpnSDUySXdmb0loT0EvbjQwSmNqTXZDSnluK0pNV2ZwUGpvNEpyd2o4RzF1QTdYNHdiY1pDZHhNMzZEVVJpTlE0TUg3UWNld3NONEJJL2lNVXpBQzVpSUYvRVNGbUFoNnJBSWk3RUU5VmdLSjdaZ0daYWpFVW1rdzlmRitYVnhmcjMwanB2ekEvdjJvQnQ1OUdCN09GbnNKNHY5WkxHZkxQYVRneEZCV2JCM3NCdktzVHQ2WVEvRTBSc1ZxTVNlT0Nub0c1eU15OEtiNlhBekhXNm13N1YwdUpJT1Y5TGhTanBjU1ljcmd4djFjRk5ZUllzcVdsVFJvb29XVmNIWVlLOWdIRzdIZU55Qk8zRVg3c1k5dUJlMXdWZUNLVWlITjdtem05elpUZTdzRVhjMjBaMU5kR2NUM2RsRWR6WXgyR2JHMjhOUjdtNlV1eHZsN2thNXUxR1IzNGVOa1QvZ1Nmd0pUK0ZwUElNLzQxazhoK2N4QVM5Z0lsN0VTM2dacjZBYWt6QVpyK0kxdkk0YXZCRTJSbysxamgvblREM1E0eUNjRmQ0Y1Bkdko3Y2NZNHQ5RG5jbXZESWRIaDJGNE9MejBkK0JyU244SHZpWjJqZFBTdFU1UDljRnVzYVZCbjlpeTRHdXhSdnZORlNwMzJ1NjBWVDNOQklmSDJqeXVLN3lybk1jTjZsQTB0c1RWYVJFcGZGVjRSVW0vb0Z0RUswUzBRa1FyUkxSQ1JDdm9VeUVlRlNKYVVmeXZFbnRpbjdCSnBqVEpsQ2FaMGlSVG1tUktrMHhwa2lsTk1xVkpwalRKbENiUjMxZjA5LzFDNzExOVdYZ0ZwMXpCS1ZjRS84ZWVhaWl1eERBTVJ4VitoUkc0Q2xmajF4Z1pEdVdxcTdqcUtxNjZpcXV1NHFxck9Pb01qanFEbzg3Z3FETTQ2Z3lPaW5OVW5LUGlIQlhucURoSHhUa3F6bEZ4am9welZPRXpxSnZsWUxNY2JKYUR6WEt3V1E0Mnk4Rm1PZGdzQjV2bFlMTWNiT2ErL3R6WFh5NTJ5Y1V1dWRnbEY3dmtZcGRjN0pLTFhYS3hTeTUyeWNVdXVkZ2xGN3ZrWXVHemM2L20yS3M1OXVvditON1JqM1AzQk82ZXdOMFR1SHNDZDAvZzdCczUrMGJPdnBHemIrVHNHOVhzcEpxZFZMT1RhblpTelU2cTJVazFPNmxtSjlYc3BKcWRWTE9UYW5aU3pVNnEyVWsxTzZsbUo5WHNwSnFkVkxPVGFuWlN6VTZxMlVrMU82bG1KOVhzcEpxZFZMT1RhblpTelU2cTJVazFPNmxtSjlYc3BKcWRWTE9UYW5aU3pVNnEyVWsxTzZsbUp5TS9DZnBHaHVBOG5JK2Y0bi9xL1NCbmhqWFdpbW5XaW1uV2ltbldpbW5XaW1uV2locHJSWTIxb3NaYVVXT3RxSW5VQmZHSU0xMWtNWllVbmlOaGozc2NCcUx3Ykk1QkhuYzhvK01XR1gydWpENjNtTkdYT00xY2hxRXlmS2ZNamxZVlgrTjVxdXkrVW5hZktydXZ0Tys0UHpiU2lYMXErRjVzUnJCbjdGMFZZSW05eTFLN2lXVkJQNW5lSWROanNaWDJNanV5ZlRmWmZuRHgwL2M2ZkgrRGF2aGVVQmIrTk5nTjVkZ2R2YkFINHVpTkNsUmlUK3dWbml5RG0yVndzd3h1bHNITk1yZzVPSW1iVHNZWHl1RGdrdUNYdUJ3amcrOEUxOGlrYTNFZHJzY05oVG9mSEJYY2pOOWdGRVpqYlBqRFlCeHV4M2pjZ1R0eEYrN0dQYmdYOTRXbi9CZXZwZC9GWjFLR3p3WlRzTUQ1WnlIcXNBaUxzUVQxV0lvR0xNTnlOQ0tKZEhCZTBJb01OZ2ZIQjF2VXg2M29SaDQ5MkI0Y0VueUlqL0F4UGdrT2NYNVk3UHl3MlBsaHNmUERZdWVIeGM0UGk1MGZGanMvTEhaK1dPejhzTmo1WVhIa1MrRXprYjJ4RC9aRkgreUh2dWlIL2RFZlh3NmZqWHdsZkRGeUlMNktyK0hyT0FnSDR4QWNpc1B3azNCU1pBak93L240S1p3M0loZmlaM0R1aUZ5TVM0TnpJajhQem8vOGUzQkQ1RCtDSDBaK0Vad1N1U3o0V1dSVU9DVXlHcmZnVnR5R01SaUxjYmdkNDNFSDdzUTkrbm9nWEJwNUVBL2hZVHlDUi9FWUhuY0NQemE4SURvUUo0VnJvNE04L3NEaldjRkYwYk9EbzZJL3hwRHdJbG1TbGlYcDZORGd3dWlWd2VIUllSaU9LdDhyUFMvQTN2cjc5dGFueDZhRUUySXp3bk5pcVhDK2RheFByTlV1dnMxcG90MlpiSDB3SU5aaGZkd1E1aVA5ZzdKUHR3VzdvUnk3b3hmMlFCeTlVWUZLN0ltOVBtMnd4azJ6eGsyenhrMnp4azJ6eGsyenhrMlRJVFV5cEVhRzFNaVFHaGxTSTBOR3k1RFJNcVJHaHRUSWtCb1pVaU5EYW1SSWpReXBrU0UxTXFSR2h0VElrQm9ac3BjTTJVdUc3Q1VUS21WQ3BVeW9sQW1WTXFGU0psaWZjRHZHNHc3Y2lidHdOKzdCdmJqdjAxbkJBMkdEYkJnbUc0YkpobUd5WVpoc0dDWWJoZ1dQKzlrVCtBT2V4Qi94Snp5RnAvRU0vb3huOFJ5ZXh3UTdzUmN3RVMvaUpienMrNjlnRWlialZieUcxMUdETi9BbTNzTGIrQXRxdzdHeWJtd3cxZGZUTUIwejhBNW00ajNNd216TVFRSnpNUS96c2NDNEMxR0hSVmlNSmFqSFVqUmdHWmFqRVN1MFdZbWtyOS8zMklSVmFFWkwrSGF3R212d0FkWWloZTEyT2gvaUkzeU1UNEplTW5lWXpCMG1jNGZKM0dFeWQ1ak1IU1p6aDhuY1lUSjNtTXdkSm5PSHlkemhNbmU0ekIwdWM0ZkwzT0V5ZDdqTUhTNXpoOHZjNFRKM3VNd2RJWE5IeU53Uk1uZUV6QjBoYzBmSTNCRXlkNFRNSFNGelI4amNFVEozcE13ZEtYTkh5dHlSTW5la3pCMGhjMGZJM0JFeWQ0VE1IUkg1TjNPOU5EaXQ5SmtLMzVLOVI4bmVvMlR2OXlLWGg4c2lRem4vV28vWDRYcmNnQnR4RTM2RFVlWTFHcmZnVnR5R01SaUxjYmdkNDNFSDdzUmR4ZWRDam9qYzYvRzN1QS8zNDRGd3JLd2ZLK3ZIeXZxeHNuNnNyQjhyNjhmSytyR1JOMTN6RnQ3R1gxQ0xLWmlLYVppT0dYZ0hNOE9NZFRoakhjNVloelBXNFl4MU9CTkpxQ0M3ZnFYT3VzZ2lMTWFTY0owSzAxdUY2YTNDVEZGaGVxc3dVMVNZdmFKRFB1MVJXZTVXV2U1V1dlS3F5ZDJxeVlXcXlZV3F5VW1xeWFtcXliV3hhZUhVMkhUTStMUXpOak44MDdxN012WmVPQ2MySzd4UGxSbW53bXlMWlp6aDI3UnB0MGF2dDlaMmhIOVNaUXFmY0RrMkhDUnJCOG5hUWJKMmtLd2RKR3NIeWRwQnNuYVFyQjBrYXdmSjF1bXlkYnBzblM1YnA4dlc2YkoxdXN5cmxYbTFNcTlXNXRYS3ZGcFpORmNXelpVTjFiS2hXalpVeTRacTJWQXRHNnBsUTdWc3FKWU4xYktoV2paVXk0WnFXVkROOWExYzM4cjFyVnpmeXZXdFhOOGFXeHcrRjZ0WEk1ME1ZdzNoTDJMTHd0clljbmUzSWx4bFI5RmluUjc3YVhjd0RyZGpQTzdBbmJnTGQrTWUzSXNId29TN0dlSnVocmliSWU1bWlMc1o0bTZHcUQwSnRTZWg5aVRVbm9UYWsxQjdFbXBQUXUxSnFEMEp0U2VoOWlUVW5vVGFrNkRBdVJRNGx3TG5VdUJjQ3B5cjlpVFVub1RhazFCN0VtcFBRdTFKcUQwSnRTZWg5aVRVbm9UYWsxQjdFbXBQZ21xWFVlMHl0U2VoOWlUVW5vVGFrMUI3RW1wUFF1MUpxRDBKdFNlaDlpVFVub1RhazFCN0VtcFBndHFEcVQyWTJvT3BQWmphZzZrOW1OcURxVDJZMm9PcFBaamFnNms5V08xSnFEMEpxZzlXZXhKcVQwTHRTYWc5Q1ZFWUl3cGpSR0dNS0l3UmhUR2lNTWFlL3kxNy9yZnMrZCt5ajMvZVByN2FQcjdhUHI3YVByN2FQcjY2OUg2MnkrM2xsOXZMTDdlWFgyNHZ2eno0Tkh3cUNNT25JZ0VpNFZNaWVySDk0V0pSZlZ4VWI0NDFmUHFwcUQ0anFtZmJLNzRwc3RlTDdPK0RqVTU2L1ozMCtqdnA5YmR6NmEvbTlYZlM2MjlIMXQ5SnI3L3pYWC9yVDM4bnZmN1dwb0ZXd295Vk1HTWx6RmdKTTFiQ2pKVXdZeVYwdXNRUk9CSkg0YVJnZ05QZUFDdGhvNVd3MFVyWWFDVnN0QkkyV2drYnJZU05Wc0pHSzJHamxiRFJTdGpvdEhlNjA5N3BUbnVuTysyMU9PMjFPTzIxT08yMU9PMjFPTzIxT08yMU9PMjFPTzIxT08yMU9PMjFPTzJkN3JSM2hkUGVGVTU3VnpqdFhlRzBkMFhwVTJPUGNPSTd3b252Q0NlK0k1ejRqbkRpTzhDSjd3QW52Z09jK0E1dzRqdkFpZTgvcWZzT3NLaXVkZTFWTnIxS0V3RnhRSnJZaHFJaUlsaUlYVlNzc1NCZFVBUUMySWdhSmNZYW80bGRFeVgyRnNUZUMzYU4yRFVJZ2czQmdpSVdzT0RNZmZlYTBlTkp1U1k1NTl6ei84Nnp2c1Zldlh6bGZRZG1kQURqY3dEamN3RGpjd0RqY3lEZmtNYlE2RnZRNkZ2UTZGdlE2RnZRNkZ2UTZGdC84QzNYUG1COVB0Q1lQR2hNSGpRbUR4cVRCNDNKZzhia1FXUHlvREY1MEpnOGFFd2VOQ1lQR3BNSFRjbURCZ3lHQmd5R0Jnd0c2eXNDNnlzQzZ5c0M2eXNDNnlzQzZ5c0M2eXNDNnlzQzZ5c0M2eXNDNnl1Q3RuU0d0c1JDVzJLaExiSFFsbGhvU3l4NUNhYjlTdTBEYmZHQnR2aEFXM3lnTFQ2VUVWM0trU1FrSFNSZEpEMGtmU1FESkVNa0l5UVQrVE5XaUNvOWtFS1JlaUtCTllDRjVZS0Y1WUtGNVlLRjVZS0Y1WUtGNVlLRjVZS0Y1WUtGNVlLRjVZS0Y1WUtGNVlLRjVZS0Y1WUtGNVlLRjVZS0Y1WUtGNVlLRjVZS0Y1WUtGNVlLRjVZS0Y1WUtGNVlLRjVZS0Y1Y0w3ajRQM0h3ZnZQdzdlZnh5OC96aDQvM0h3L09udy9PbncvT253L09udy9PbS93OEpxZ1lYVkJndXJCZStmQnhaV0M5NC9EeXlzSTFoWWM3Q3c1cXdybUZrUG9rQWt5RU1reUFNVGl3Y1Q2d1ltMWcxTXJCdWlRaDVMSkp5dEp6VlpGbUZzRi9MZFNFZlVrZXlvZWdzN2huUkN2WkQ5ckxaaFJhUUpld0gyVmdsY1c0WDBWajJJV3hFejNsaTlpbnVwTjNKdkpCOGtQM1VXMzBlTXdlSWFJNXBzaHBXZTRPY1JOUzRTUFZqbU5yQTRIVmltQ3RIbE1wamM1MW9teDdYdjIzQkVtVkorSHhIbUFjb2ZxaCtCUzBtSUNqcEl1a2g2U1BwSUJraUdTRVpJeGtnbVNLWkladXE5d0tjRndLY0ZpRTdaaUU3WmlFN1ppRTdaaUU3WmlFN1ppRTdaaUU3WmlFN1ppRTdaWUZkSDNuMWozRi84ekZnQnNGQUJzRkFCc0ZBQnNGQUJzRkFCc0ZBQnNGQUJzRkFCc0ZBQmNGQUJjRkFCY0ZBQmNGQUJjRkFCY0ZBQmNGQUJjRkFCY0ZBQmNGQUJjRkFoY0ZBaGNGQWhjRkFoY0ZBaE1Fc2hNRXNoTUVzaE1Fc2hNRXNoTUVzaE1Fc2hNRXNoTUVzaE1Fc2hNRXNoTUVzaHNNazFZSk5yd0NiWGdFMnVBWnRjQXphNUJteHlEZGprR3ZCQ052QkNOckJDTnRqSExtQ0NmR0NDZkxDSzNyaVJNc1Q3YXNUNmJOeENHV0o5TjhUNmFsNnB1c2Vyd0VCZXF2WDRLMVVWZjYwcTRHL1V1cnhhVmNyZnFvTzRDdVZxZFMxSlIzVlAwbFcza2ZUVWVwSytxa295VUJWSWhtcGR5VWhWS2htcmd5UVRsSnVxd1UwUWc3UGhxUi93SzZRUmwvLy93UTd3WUV2Z3daYkFneTJCQjFzQ0Q3WUVscDBQeTg2SFplZkRzdk5oMmZuL3ozL0hsdnlabU9QaWZ4WW9nd1dYd1lMTFlNRmxzT0F5V09WQ1dPVkNXT0FsV09BbFdPQWx0bEo5VC94RmhPWjM1YmRnV2JkZ1VYbXduQ1g4SEttRCtIWVRWdk0xWWJpWmpiQ0w2YkM0UGFRNTMwc0c4WVBFbHg4aXRtaTdreDhHK3p0QzNQbFpFb0orSWZ3Q3JPY2lDZVNYaUFXL1RMd3h4ZzFZbmlQUjU3ZFJlb2Q0d3Q1Q1lHOXUvQjVwaDNFUGE5OHZyWStaY3RRYjBINk9tRE1iZFVOaGxYdUpLY3BPNGVtYzhKbS8rV1lJR2srQ2NMUG5pQmR1TlFBemRJSCtkTVI4bWhJdmFGY1ZTdHRBdS9aQ3V4NkliL0Y1U0NobXVVTWM4QlFvM3ArdGliYXVtRS8rMzA5TFNFTzBhSVNuY3lRSXU3RkNuU1AySlgvV3A1ODZsNmNSZjZ6MXNOUVNFWkNoNUNTZWZrYnIvZXBDWU5seVBCWGlLWUdZNE9rMW5rNFNDNkNCSUtDQklLQ0JJS0NCSUtDQklLQ0JJS0NCSUtDQklJd1VCRFFRQkRRUXhIc1RhOTRmV0NJTUtRRjcyZ3U4Y1FqNE9BZStRbCtNdTBmOUhLV0ZtTEdFSDhRSkg0SWw1YWgzQUVFL3hEclRzUDQ5R0dNL1dtRmxXS2NKc2FEblNWMTZnU2l4aXpDc3VTM3ZqMWFhNzRkb0tMNGZJa0dkSTM4V2hJOVUzK2J6U1ZPK2dEVERQSTl4QTY2dzBpeXBPZkdXL0lrU094dEFITkhERWZQNDR1VFRpQUl6UFpMbkZ6T1pZSWE3bU9FRUg0amVnOUErSEhrRThqVGMvSG4xTmVDbU1tQ21WK0plcnhKOTlFTE1SQSs1dFExYTJxQ2xBVm8rUm90eW5NZ2RXQ3I4QTZKM3RmeXBMSEgrNEZyQVltVzRJVE5ZOVFVeDNtV2M5aFgwd3BpeXA4ZVl2ZFgzNUw5elJBOVBhS2llYUgxRi9SeDQ2OE14QjBMdnc1R0dZKzFwaUNEbjFCV1l2UnpyZkl6YnQ4YllMOURyR01ZMXdyZ3ZJWHZqalBvaHBVSEx6K0xFejZIRmVhem1Bazc4SXRaK0JTTm9WbEVOL2UyTjBuN3FTdkY5L2ZKMzlhZWdKbzNVUWs4RHJFZ1hQU3ZSc3hvOVRUQ1hTdDQxZXI2UmY3OUMycE5pcEx0SXI0ZzdHTFE3R0xRN0dMUTdHTFE3UnY0VUl5djVRRmpoSURLWWh5T1BRRDRjdkNNRjZ4bXBYc0hINGw3bkV6L2Nad0JPN0R4bTlCZG5lMUg5ZzVqdHN2b3E5TnNLeVBXMTlvNjljUWE5c1laK09OT0JTSVBrYjlKSEhvRThqZGhoM2JKMTZXTzlobGhyS2YrRm1JdGIzNGNlaDlHakdEM3MwS01ZUGV6UXd3K3R6VEZuaWJqNWkrbzNtUGNsZWhhTFhwZkZkOWhyUHRXazBINnFTY0ZId0Z2Y0pzN3dCT1d3UjBONGpGcndHRFhnQi9aQjV6VG5uNDlXSENYbE9NZmUrS21mMEUzeFRVYzhGYmMrQ2o2dEJPdStoeG52cXg4TGZiaUpmc1hvWjRqUjlURXlRMDArMWgrdHJnQTZyZ0E2cmdEaXJVREw2bmZmc0lqV2VxTDFIZHh5Q1U2cUZHdTZEOHovQUtNOFZKZEJmMnVLV3o0dnZsKzNQOVlWaHBTS0ZZK0FuN3VOTTc2REd5Nkdkb3Fkd0IvZHcvN3ZxOC9JNzVtSnVkOWc3amVZKzQxMloyWHYvbVlhb3pDTTRvbjV6VEZLRlVaUllSVDVPOG4wTWNJdHJJRkJUNkpKRnhLREZJdVVUb0xKNTBoamtjWWhqU2ZCR05VTW96YlFmdTlvRCszM2pmYUF6YS9CU1czQlNlMkhucHlBbm5TRW5uVGg2OVhmWXQwL3d4dTZhV2FFUDVabnZLZk9oNDc0UTBmOHBaYkExZm9ZdVZKN2QweDdkMHljbDd6VCsvSW5HOUVpQzNPdjFyYXkwYmF5d2R5UDBkSmJNUDM3OHY4dXpSTlVSeERySHlHMjMwUXNmNFRZZlZQeVVOM0ZmU2VvSHFPMEhDWGxrb2M2RUtNbXFJcDRKYzdqRFhwWHc3N2VxczlLT3VvcXhQMlhrcEg2T1ZxZVJjdDJvbThPYWkrZzVBSktERVhmeC93MTVudURuYjFWWHdHR1VFbEE1K2lyUXFzcndBb3F0QXlDYlNlb1NqQ0xDaWprT1ZaV3hsOGhmNE5acTZFZG1wN1ZtRlVGOVBFY0t5NlQ5SkViWWhWR0tOZU1WSTBkdklCMkpBQzNWQkdLVWNveGlncWpxTG44RjJieTNMcUVvbmM1ZXF2UVc0MmU5N1JycUNlZmsybzIxbkFidmV1aWR3RjZWM0t3VkxINmF1amJXMmlHQ25GTnJYNkx0ZHpHYUhVeFdnRkdxNVFNMUpmRnJvelVlWkl4TVFjU2VvQ1IzMkpOUDhtUlJNMHc0a3VzbzVDckNFT3ZsNWk3VURMQnp4NXFKN21GNmh4YWxHSSsrYVR5MGFJVVk4cW5sSTh4d0hGL2ZWKzRmZTA5b2ZkSDdrZTBGZmVDdGgrNUQrenhYN3dIK0xTL2VQNnc5SC96dVdPUGYzRGVvdVozejVtWVNsYkVRTExHK215Sm9XU0gwZXpSeHdGeHN6Witka1JkSGRRNW84NEZ6NjZvYzBPZE8veUtKTmxnQm52VUtwQzc0azZNSlNzOFdhc2ZTelV4dngxbXNNZE04bGlPS0srRGNpZVV1NkRjRmVVWUI3Y2d0NVpudHRlMmtHZVN4N0xBdWhocTcwbzJLS21KWkVzY3NUNEx0THlMTVIyeFBvYjFNZlM2S3lsUTc0VGtqSElYdEhGRm1SdCtkc2ZlVFRGS0lkWXE3NUJKdGJCV082S2pIVVh1WFlqMXl6dGtVbDNVdWFCTzA1dGh2MVpJMXRBOUc2elpGdVBhWVMvMnVIMEh6RlZiM2hmcTY2QmVnWHBuMUx1Z3pCWDFicWgzeC82d0M5eU5OY2ExUVdsTkpGdjFWYXhCaGRPNUxUbmdMbXRqejQ1b1V3ZHRGS2gzUW5KR203cG80NEkyYm1qamp1Z2kzNU94T0ZkYllvVjF5Q2YyRXV1d3dqcU1zQTVqY2JiT2VIWVJKL2dTYTdEQ0dvemtXeUZjN04xT2U4NmExY3VueDhXK05UM0t0YXRteE96djZnU3M5akhPNzFkNkFXdHZURXorcW02Z2w1TG8vWkYrb05hVldQNjdkQVNqTmNDdS82YWVvTGNIcWZHdjZncEdhUzd2Nk4rakw3aUowK0llLzViT2lOaGc4bGYxUm5oMUQvRHErL0NrNGZBNER2QnFYY0dyeStIVlBnR3ZmZ0R2RXcydnBvQlg4d2V2dmcrUEdnNXY1QUN2MWhXOHVoeGU3UlB3Nmdmd1ROSHdhZ3A0TlgvSlNsV0pFMm1JRTZtSEU2a24yZUs1bHJvQlRzUVVxL0xDcWJqaFZGd2xSNVRYUVRzRjJqZ2hPZU81THRxNW9KMHIycm1oblR1MHhnRHN4Umk4SXdnczB3VHMwaEtJMHdwbzB3V293ZzlZNFJnUWx4bXNZQkJZVlVOQ2lEOTRreWRwalplU2RDWTlpUmZwUS9xaTlGUGdvUUFTUjc0bW5jZzNaQ05KSWxsa0ozN2FRdzZRaGVRUVhqK1FJK1FxV1VyeWdMQzNrRkpxVFE1UmUycFB5cWtqYlVpZTBDNjBLeVcwRysxRkdlMVBCMUY5T3BoR1UyTWFqNWNGVGFDSjFKS09vQXVwRFYyTWx6LzlIcThXZENsZUFYUWRYVTliMGtQMEhBMWlTdVpOdXpGZjFveUdNbi9tVC91d1FCWkUrN0syTEpoK3l0cXhkblFBNjhBNjA0R3NLK3RLdzFrUDFwTkdzRDZzSDQxbUE5Z0FPb1FOWm9OcEhJdG1NVFNlRFdGRDZEQVd6eEpwQWt0aEkya0tHODJtMEZGc0dwdEpwN0JaYkQ3OW1pMWtpK2hjdHBKdHB2UFpWbmFNcm1RbjJGVzZrK1d4Ty9RRXU4Y2Uwa3VzbkQyaHY3Q25ySXBlWTYvWUczcURxVG1odHpuam5CWnpQVzVDUzdnWnQ2Q1B1Qlczb2hYY2h0dlJwN3dPcjBPcnVCTjNwaSs1QzNlbHI3azdyMGVyZVFQZWtLcDVZOTZZVWU3RnZSbmp2cndwazdnL2I4SDBlRXNleUF4NEs5NktHZkUydkEwejVzRThtSm53cnJ3Yk0rVzllRDlXZy9mblVReDRodzluQ3A3Q1J6Rm5QcGFQWlI1OFBCL1A2dkg1ZkFIejVGazhpelhnMi9nMjFwRHY1RHRaSTc2YkgyR04rVm4rQy9QbnQvbERGc3dydVpxRlNEcVNLZXNuV1VrZUxGSnFLYlZrbzZBcEZNbVErdXVlSmp4cVRFb0NzUnFTRWpPTUpDWkVwQ1dTeGVEaXRHZG9Hd1g0RDFHcnhWL1g2Uko3NGdUMjdnbk44b1ZHdFNYZFNHK00wWkVNSUJGa2lMYWRDUmk5QTNFbWxxUStkSzhKYVFIVTNSMDZTS0YzQTBra05GQkNIMDFiVThTYzJxUXVzU0lOTUU5VDZPY25wQWUwbFVGekI1RW9Fbys0elVLN2RWV1FnRjZoblJWa3FPaG5DWDAzQU02M0pTN0VHanJmakxRa3JVZzdFa3JBZWNBRnU1QXdjQUJOVzNnNTdLUU9xVVZjaVExcFJIeUlId21FYmJTSFpYeUtsWGlRcm1RdzJNSXc3Y2p5WHhJcWlCMXhBNHRwVEpyRGx0cVFEcVFYQVZjZzlVZ0lDWWNWSlpEaFVkNnBVV3kya0l1RlhDbGtscEM3aER3Y0ZaR1F4czRJZVZuSTYwSVdDMWttNVBPb2lOUVlWaTFMem9UVUY5SlVTQ3NoN2FLaWhpZHpoWkJ1UWpZUTBsdElQeUVEb3hQaWgvQmdJVHNKMlQwNk1XazQ3eVBrUUNFamhZd1RNbEhJdE5pVWlDaWVMdVFrSWI4UmNxR1F5NFhjaU1FaStBNGg5d2w1T0NGeHhIQitVc2l6UWw0V01sL0ltMEtXSkNSRkpmQXlJWjhLK1ZxV0VrRmxpcVFycExHUUZrTGFDdWtvcEVzU01zbFRTS1dRVFlVTUVMS05rQjJTVXFJVHBSQWhld25aUDFrdUR4Y3lWc2dFSVZPRUhDM2srRlNjdVRSSnlPbENmaWZrUWlHWENyazZOVDR4VnRvbzVCWWhkd2w1UU1palFwNU9IUjZWTEowWHNraklNaUZmeTFKSFgwaWIxQkdScVRvdVFub0txUlN5cVpBQlFyWkpIWkdjcXROQnlCQWhld25aWDhod0lXUFRzSEtkQkNGVGhCd3Q1SGdoSndrNUhlYkVZWmMxWVJGLzV5Y21mekwyTCtRVXR2QnhLZjBKNmZBYmFmUlJ5ZUV6REdEVGYrY25DZy8yYTJuK0p5UVR1MmNZU1g2aVd0OHBTLzAvSWMzK2hMVDdqVFQ5RTdLR1dCY1hPZjFBeXV2OXNNejRvMUlIdnM4SzNsU2pFZi9hazQzMjZjL01TK0daUHk1TlBpS2Q0ZjFERUdQQzRKMFR5VWd5bmt3R3Nwa1BMTE1hS0djSEVNNXhjaGJZcG9pVWtNZWtrcWlvTGpVRlRuR2ticlFSYlVvRGFUc2FvcmxYYXE3TjdiUzVRcHMzaGZiTGVZRG1tU2swejJ5Mjl2bThKdWQybW5LdWJjKzdhOHZUdGZsOGJYNVdrd09WYW5KdHZiUmVtK2RyY2gxZlRhNjNVdHdxTmJpdWVUWnNxczFiYWVZeDdLUjlucTdOcXpXNXNZZkcxb3l2YTNJelhVMjVXWncyUDYzTkwydHo3YnhtbFpqUEVDbUt6aE1XRUVublF1cGpwMHRrRzZBdlpLNUtKUDRKYjg4NzhJNnlmVEFMWmdIbHMySTJvZ2ZhY2xPNUxUZUJqbExjRG9YUDBkZ09jRGt4cGsvb0V6eSt3RmlVdnFhdkNhTnFxaWFjNlRBZElqRWpaa1IwbURreko3ck1tbGtUUFdiSHdGS1lNM01tQnN5RGVSQkQzaEV6RzJHc210aGRocnhzYWthK29IYTBOcGxBUGFnSG1RU2tPcEI4QlhRNm5FeWxTVFNKVEtlZjBUUXlnMDZuMDhrc29OVkZaRFlRYVhmeUhVdGpJOGhXTmdyWWFEdExaK2xrQnh2SHhwT2RiQktiUkhhektXd0syY1Btc3Jsa0wxdkFGcEI5d0pPL2tQM2NCSHVzQUxyekpjK0E1WUxKYzZ5bUFiRmt5M2dYM28zSDhpRjhLQi9HVS9rSVBvcVA0ZVA0VkQ2TlQrY3orTmQ4SnY5QlBnVzJsQzJGaytyTU8rT2tRbmdJWVR5YXh4RE80M2c4MFFIMlN5RjZQSTJuRVgwK2tvOEVIeGpOUjJQblFJUEVDR2p3UzdDREpYd0pUcFlMMy9HUE0zYVViNEcxWVBMZDZERXY1b1c3YWNxZ042dzVhNDZhQUJhQXN3NW13VGpyVHF3VHpybzd6a0VYclcxeHZrcldoUG1oZDF2V2tYVmpMVmxubEJ2OCtWRllCc3ZBckhQWUhPZ0JJekluYzVUcVNBckpTWEtXNmtvdWtxdmtKdGc3NVh2QWFvaFl2ZTBIcTY4ak5DZEJiaUhKckZmVHd1R0RGb29QNnBqOE95YTBKcExNRnFua0lYa0l2WkRudFpLc0pSdXBwbVFyMVpMc0pIdkpRV2FGNytkbFFKRm1rb1ZrQ1l5c0srbEorcEtCWkNnWlNjYVNpV1FxbVVubVVnMjBrWERTWDJBSmNoOEdCQjBJTnRwYWFnMExZTUN0dG53MVg4czM4azM4S0QvR2ovTVQvQ1EveFUvem4va1puc3ZMK0NQK21KZnpKN3lDUCtYUCtIUCtRcnpIdFlxdndvaHIrQnFzWlFQZmdIc0huc2MrNURra0diMi9IMzBWV20xQTdSNitsKy9qKy9rQmZwQWY0am44TUQrQ2RuZDRNYi9MUzNncHY4ZnY4d2ZvSjQrK21xL0c2R3Y1V295K2tXL0U2SnY0Sm94K2xPZGk5REtzUVI2OUViams3NDM2Ty9zUVozWWIvWWkyMysvTS9BZDdsYzg2Vi9SekpxYTBOKzFMUDZYOWFCOGFSeSt5RVd3OG04cm04Y1Y4SGQ4aSt4emFuZmJDQlEraFE0Z09QVS9QUTVmU1dCcDBhUndiSjMrUEdlelFRTmloSVYvSUY4SUc1Qk0wNXB2NVprUUNSaXZKUy9JbG1VUytRZ3lZUXFhU2FXUTZtUUhXT3hNUllSYVpUYjRsMzVFNVpDNlpoL2l3QU14M0Viak9Fdkk5Mk85U3NveGtraC9KY3JLQ3JDU3JFRHZXa0xWa0hWbFBOb0F2LzRSSXNvbGtrODNneGx2Sk5ySWRjV1VuMlVWMmcwSHZKZnZJZmtTWmcyRFJPZVF3ZVBSUmNnd3g1d1E1U1U2UjArUm5jb2JrSWdLZEkrZkpCWEtSWENLWHlSWEVvMS9BdGErUmZGSkFycE5DUktjYjVDYTVSVzZUTzZRWUhMeUVsSko3NUQ1NVFCNlNNdklJa2F1Y1BDRVY1Q2w1QmkvekFuR3NDbnQ5UlY2VE42U2F2Q1Vxb3BZZE0vaHlLT3ZKZXJIZTRNeDlXVC8yS2VzUDNqeVFEV0poWU03aExJSkZzaWlaUGJOWXNPYzRjT2VoYkJoTFlNTlpJa3RpeWV3ejhPSnJMSjhWc091c2tCV3hHK3dtdThWdXN6dXNtTjFsSmF3VWpQaytlOEFlc2pKdXlCNnh4OXhJWnMrc0F1ejVHWHZPWHJCS1ZzVmVna1cvWm05WU5YdkxWREtYNWxUbTBsemlPbHdYZkZxZkcvQWVQSlQzQk44ZHlBZnhjQjdCaC9QUCtDVCtGWi9NcC9BNWZCSC9ubWZqWHJmd3JlQzR1OEJ0ei9Kei9EeS93Qy95Uy93eXY4S3Y4bCtrRmxJQXRNWmE0LytGSi85Q2VPWk0zZ2tlOVRJNGRRaTVDalk5Z09UeE1ENlk1QXMvY1owbjgyUlNDS3VlU0lyNGQvdzdjbHRvMHgzaFM0dUZiZDRWbWxVQ3ZWeEhTb1dGM2hNV2VwL3Y0RHZKQTJHblpWSnp5Ujgzd2VnQjNPRi9SdS8rV2V2K1V6cFgrRy9SdXQvcTNUdk4rMzNkKzRmMnlmcjNEdzNNRkRyNGY2T0ZpMlQ5b1l4YXcrdllBVE5ZQ1E5VVZ5QUhEeHBHWTBoOTRZMTg1SGU2aUM4ZEJpelJCRmdpbmZqUnNVQkh3WFFSL1lHRTBlMzBISWxpS2ZCUDQ5azB0b2pNRlpGOUZUZm1GbVMxL0s0UitZbmJjRStTeFJ2d3h1UUk5d0phT0NHMHJnRHh6QitSMXdJUjBKRzRBVC80WWsycjhKSWxZb0w0T1VzODdkYys3Y2RUSVY3eVg5blZwL1d4OWthMEVTN0NqL3BCRzl2VDl0aHFaOXFaU01BNEM0SE1OV2d1Q3krZ0FqcUl4bXBMZG54UThtc0U0U1FReEVBMlZDQ0lVQllLQyt2TCtpTDI5MmY5VVRPSURVTHNqMkV4aVAzRDJEREUvcy9ZWndKQk9NdmZ6ZnBQQ0tJSHRPSlRqQldOKzA2V3NlTmZ3Qkx5ekhwaVpuMHhzNEdZMlZETWJDUm1OaFl6eTc4N21rdmEwMHYwTXIxQ3I5SmZhQjY5UnZOcEFiMU9DMmtSdlVGdjBsdjBOcjFEaStsZFdrSkw2VDE2bno2Z0QybVp4Q1dKVi9JcS9wSy80cS81RzE3TjMzSVZWLzhyWlJJT1g1SjVveDIwaXdsMGFpNHpDM0FMRHU3aGlHb1pvK3BBMzdCTDZGdC9vb2Q3a1AvQ1h0WTBBNkRXQk1SREdiVWEwUkYwSkJEek9Eb09FWFFhblViTTZBejZOVEducytsc1lpRy80MG9zb1lIYm9iMkhhQTcwK1RnOVFXclNNL1FNcVNXd2k1Mkl3UTRpZ2lzRmdna1dDS1lkMXVlUEZmNk5NOVBhelg5eFo5QWNUNEVaK3NOcVBzWUF6OEFMNXNIakZjTzNQWUVmcThiYTljRURyYkJ1QlpoZ0Erb042d21rd2JRVDljUStQTENyaGlMdkQ1dVM4MEcwdWNqRHFML0lCOU1XSWc4SEs1VHpDTnBTNUpFMFVPUlJORWprMGUvejFpS1BwY0VpajZmdFJKNEFPNVh6SkZvUGxtZ0dhMlo0YWtEazk5a2JDZHRzREJsR2xaQ0RxUmRrT1BXR2pLQStrSkVVM2dKek5ZR01CazlsTklZMmc0eWxiU0RqYVZ2SVlmUVR5QVI0QllaWk9rQW1VL0FDY0tGT2tDbTBDK1JpY0dCR2w5Q3VrTitEVVNtSkgybEZPcER1cEI4SkozRWttWXdtRXhEWnZvR05MVWJFV28zb3RBWFI2QUFpejJtNkhqdFlqRlZ2RVBrZ3VsSGtZZlFua1ErbVdTSVBwNXRGSGtFM2lUeVNab3M4aW00UmVUVGRLdklZdWsza3NYU3BPSXRsNGhReXhTbjhLRTVodVRpRlZlSVVWb2hUV0NsT1liVTRoVFhpRk5hS1UxZ243MDM0T0ErUmh3QXJtQklQNGswQ3hIdERwdEFzRzNIV05jVVoyV3JiUzdUVys1L2k1Sk1VNzRBWjAvbmlySVNVbVFFMWgrNFRhbzM0UVlXT002RzVYUHd0aWpHdG9KWDBEWnlBTGpObU5aZ05zMmQxV1QzQmwvK2QvQmVlWEhDMGZ6QStmWmtGdmVkUS93c1BlcytnNURIQ1dNSjdueTlIQVBrOUdodFJpeWNwbkx4NzU0NW8zLzk2LzI2WWZUQnlLMDJ4ZllBeXc5NVAxOEJ6Y29mSlZTWlVqMlZtMk5kRGtTdWoxTXRJYWFDclU5K1VNenNkb296UU5heXZTeVdhMFl4UktiT25zb2V5d1FjbERzc2RKempna3VSWE54SkpVa2tTU1NBeEpBMHBVSDRwblQ0WVRMSXlDMTFNYldaNWh2a082R3krS2lnaTRNS29tWTZaR2RZM2xCbjhLRkxEVEE1bnhjemJINncxNzhiTTBIWnRxd3FHZHpEeFdxazBlYjlVcW9ORlRad2hGc2w3UzdxV3JIOXJMMnVscGZ5Z2IybmNOeVkxTFNZbFVkRTJJam5HeTBwcElSZnJXUm9GajBpSmpFZ2NHWitRRU9ObGh0RlFhbWlwMnlzdVlsUmFqRmR0cGIxY1lHUnBwU2xRdEkxSlNZdVBqWStLU0l0UFN2U3FvNnd0VjNOTEcyMTFyL2pobUNWaWVISjg0aEJGMjlaS3g1b21TaDh2YjZXdlV2enJYOVBFUzM3MDhmWnAwcnhKOC83S25oOHN0bmRQcjVwS2E4MzhwbjFpVXVKN3hnOUpiS0RvbUJqVnlLdStzcDVtSXVkM0ZXSXFSYzkzYy9XTVNSa1pIeFdUS2srYVFaMC9QQldxUTNnR05TTW9OMlFabEpKMXA3ZXNQSk9yMkdRNGJ0ckdLU09lYkF1cHVKRmpkbkJJeFA0VjBRNzVlMStkOXRrd1NUbXQzL2l2QzRZVk5sMXFkdkJDMmVpbm8xYVBUd280T0dlVHlaNjQ1d2x6VCs4UGJiaWhROHNYTzY0TUdtelBscjF1UE14eFpkV0t4YXZ0VHJKYlgzUUp2V01hWHRiS1lmeHVrNktnRTl0dVROay9PSDJvVnlPK2FLTGwydmFLczE2cEpuMGI1bzcyOVpsbnNjaGlkMUZjNC9VbGR3NVAvOXJ6eUF5bktiSDd2K3pYTjJuRXdZRDFibE1HblRhM0RsZzI2VUd2SE1QRW82cGpuUXAzNjlWWTREeTJJTkQ5Z3VQb3NtVmVweXBLbkdzVkhOM2F2dTFpdThHWmpyT0x3MTQ4SGxzeGJrTWtuZldpcTFIUmVlYythK2ZsWmswZG1mVjRqOG16NHE3WE10L0VaV1padGRnNkpXY3Y0MUQ4RlJNTGxCUHpsTDY2K3RCWUhSMDlDb05UdWlsZDNqMHI2V1RidUxTMFpQL0dqWk9pVXBNYmpjUzVwK0xjRzBVbERSZTZVOXVTVXJXa3I5UkZ4aWhSdHBiTDZraitTajlsMDB6ZlRPL0pTbTMzcUpTRWYrcmRXS01ySDZwSzI5YU4wRXBvYW0xWHlWaHArRzRWWEY5cEtoZWF5WE5Kc0FCZHJCRFBOU1JvNXNwYXlwcnY5SnRiR3ZmcTJScUs1dGZRcTJFVG4xOVpCWjg0a1hRYTl1cEJ2OFBCRGw3VHhpeXFQLzlneGtaNjFhRkxidmIwZm9rMzlPdXRDRHQ1ZW81bHFSUnFVdDdldlRIeHl5NCtOU2RrOFdYblNPdXFvR1pPM1pLOUpsVE04SnV5OWQ2OUJVUjFydmY4RUplTDY5eEQwck4yUnJSKzVubTI5TlMxc01LOTliOEszUDdEOW11Mytxb1BiRHMyL3NVNTQ2VlBGcWpxWDJvUmFtL3Y1MTRWMUFrMnJGWm1zRkt0SFp2Y3IvL2tjbDY5cWJiZU9nWmhpMGRPL2JVZC8wY3M0N2ZtcVBUNzBCejcvc2xKR3lzYmFpWjErOWlrY2wxTXlrZE5ja3Qzanc2RmwrTFNKOWtHeDQ0WU5QN29ybVZSYnVxV2JiOGZXOFBQM0xWMzZyVVI3dkZ2UTNZckJsNHlmSlZwNy9tb2R4K25pRHpIZ3VKOVBzTk9sQmV1YUJiempmMGM0eDA5SFFlT2pXMHlXR2Y2SjZxUklUZDZUbGcrVWZGRDF0U0J5L1dyN2lwZlBYWnUxcVdONGRrYngrc2N2ZHI3L3NTZzdhRXJHcXluNlUrWHI1L1pSTFdzWk5CUW5XVXRoOTA1T1ArUTZrejRxMWFsZXBuQkR5ZjJTRnpsK1hUSGRIT1BSN091NjJaTzdyNzQ4MDc2SnNyYXA4MlhEcXU2M3k5TFd0ZHEwUmFQZTdOc05nYmM2Wm5VK1ZLVEg3WW5SZGZlT3IvQjNwYWxZeDRPVDM5bFUrTDIwNmJ5UlQxM3Rtb3diOWVZOWFyTG9SdnFwWTF2VTliY2NmbFFtNUpQOTdyRTVaRUpiYzJuVEJpbU5jblR5b2tuL3FaSkdyODNTYVlrU2grTk1UWlFlaW85TXQweVhTWTcvNUV4cHFXbU5veUtFT1puSTh4UEh1Si9zVURkUTMvS0FuMS9iWUh5TFU4Wm5ad2ZFa29WQTI2T09aV2hQUHAyZDYzNSs3OGxSL2JuNWg1L2JwcW5mdFgxa0Ura3NzYXhGMm4ybDc4ckd2eTl3bkx6MkU4T2RNLzlzblJDelMvWHVNOFpZdG51emVsZEMxdnpNMHQ2RE5DWjhjWGFwR2YyM2UxZEdqMk5uNW5nWExYM3RNMjhSOFpwaCtKR1hYdTRLSEpLVHVyc2w5UFMwdXR1V0xIdzh3V2JxMmJWKzZ4cm94SDJIVnJuUDlsdW91aDFkVlRtZ295bytMY0c1NlkvR2JIWFlNbTFWelY2dXkyTzhENlF6ckkvbjN4ZytaRVp6ZzFHWDJneWN0OTNxUU5mN1M3cFltMVk5MHp4eGN1K2pUcTJzZzR3QzA5M09iNHF0bnordWVTSGdhWFBUY1pmdnpCMnhjalA0bk8rNzlaZTJjUnA4L0pOZHBFQjlhOTlzOTVUNy9NODI2MERQNy85dzZva1ZjQzBuNVFaa2dWY3dHdU5DekFqT1dSR1FNRFVHaGNDSzZQS2JyVDY4TVFrZUlEa2Q3WnRaT25jTmlsNVRFcjhrTGcwaFVkVVBZVlg4K2JORkYzam8xS1NVcE5pMHhSdGsxS1NHM2s1S2gwMGphMy91U1lwUlJPcm5aUjFOTmRrKzQvNjBLU2tORVhyRVdseFNTbnhhV05rOTlDOG1kTExTNmxzcG5VUDNrb3ZieDh2N2VOL1lVVWZEZVZzZjA1eVNZdW5JZllleXhhTURsTStXTDV1cHV2Z2w2cDVYVmJzVlAyd1hCRTR0c2Z5SmN0bmhYc1B1OUFtZXN6ampTTlA5Y3AvK3ZEN3lRNnpsazJLM1hwc1dIcGszYXUxQTRyTTZIZjM1aDg5MkRCMjhlSTR0MFhuL1JzY05ON2V6eTJuWGFsaG9OLzhCdXM4bXE4dDYvaGxtenVUelBZdVR1Z2RzVEZqN0kvaERVZDF1YjlvVzNTTHhkMGR2UFJkckphdEsvMjJ2bTFKeTRWUlZ1SDlkR0tXMVc0V09xVnFUZmxjZHR6KzBzSGVuMnlkTnVHZ2YxbXZ1U0ZaYjlla0QwOEwyV1I3WnI2Qmh4UHBPenM4dnRuZXpoWjZBWDNVQTk2c2pEWFVYMzF4WXArKzVUdGFoTmxNSENYbFZ4N0ltakJQbFozN3hkVTFkaWtEQTA3dmU2Sy93bG01VmZlclUxc1ZveXkvdXFIMUcydVZFMWNwSnk2WDdaSktFeGNySnk2WVlEN2dmSEo1Zk1yU3VqM0dXMjNwK28zNjV4OVQvdS92TCtNak9pNjh3cng3Um9kbVBsdGcyK1RSTHVxU042ckdzNEhoM3N1V0d2MGNxUFB0MUZtbi9FdWNuajdwTzZmQjlzejJKeVBMcTM4NTA2SkYvM1ZOZThXclhJWUhuVHF6dmtobmJLSFh6SmJMekpPSDdsVlpkTE9OUDFSOXZ1MmRHdjBWM1I1RWZyNXBmYTJUOVp1NU5qd1E4NlBGZEZlenFCVlZ2UnhlT1oyNmF2MHNkR05pVzIrOXR4azFYOTRka21EU28zSi9SZWlKL2FWSGxkVUtMNE9wdGVmVnMrdDZwVFpiVlRIaEp0ODI0UG5td3BOOUg4ZDBQQkhhYThjMjdtR2hubjMxaWY2czhic1dITnZRckVGeGV2SGFVWGRHWnBMelE0TnlMamFkZnJPMXhkb21RKzJIRmpTNWRkbEJLbDc3aVhTeXY0OWZZbGNIazhpZGhzdS92blNsVjFDN1hJZmVxNU1MTFB5bnpCbXhiTTNGVEhpRkl3QUhtN1RBWUtqUm9tNkhTTzBOTmZLUHNoOWozZmU4SXdtMS8xc3VRZGtVZU1IWHE1bXZyNWV2RE9EaDRyMmJ2bk1KRTFmL00yU3dWTmJRMEEzRHZoR3BjWUFDYVpqSFhJUVFrQTI5MEpqbzRVbUowZTlXWnZoSEsvdWpiWHBqMHQ5c3M2N1NTYk1OdXc5cm9tTUUrSkRSU0hkQkNoUy85U1Ftc2lmUkY1N2t5Qm5GekgwMzFJSGRINmNmdnV6aVdqbnlySk02MTdOUHlPbnZkMlpzYVRLbUlUbTZWdjlLMUttZHF5cnY1K1JjM2Z6MS9PVjZyODEyWklRdWZwaHhmTC81c2JXSEhnK2I5RTFQKzczZFgwZlRhVGsybHpQaVNLdlJ3UzhzL0VMZVJQVzQrYnJsN3J2Tk50K0kwcXZiNHJOV3Z1MmZEOHRxOThJOTFkSDU1emExSEh2c0NGMThhY1Y1eStPMWdqN1RIZjUwbmxQdzREYVBEcDFhRkszWWxlTmJ2VHk0NVBNdHRSdnZXbDMwL01jYlM1ek1WUDI4V3ZmMkc3K3BYMmx4MmFkalhEZFVlVGF1RWVRM09yRE5GMnZpaXNjN3g5VXM2ZlRkMGRIQm9lMS83RFpwMnB3bGg0Wjgvc0RneldRK3JuTFJad0gxMThRdVBIT2o0ZTM2ek03TXQwUE1pd0NMVFJWVEhHcTdoU2FkZ2U3eEZSblVFK2ZoOW5zNG5QLy80VjRzZEEyMEJOd2Evb1Z4VGlSQlVXdWJTamFTbGV2TCtwMEhuVXpwOWRQZHlrelBtalp2Y2w3MW5LaXM5YjZMRlpPTUhRMUpUeklDZEwwdGFhMDBFc0JIOEk1MlNyUDNBRXRIeVpGOVlKZkNqVVhkdWZsTVoxZjJBeU1qM3dzWlhvSFRJais1b3IvbVZVVE15VWI4dFYrSDF1ZTJQM1gvOHRLZFkzMTZydDFlNit5Wmtvck1WMzEyZEpqYjN1WHV1anJYMHk5WDJxUmJGRHliYlYrbVAyanJWN04zZjkxdnI4T1plWmZtemZWNS9tMlJldXFTc000ZHV6ZDM4MWZZOTJwV1BXNmc5WndqMXgyK2VSSVJHbkJYNzFGcytaaXlXV2Y3UnNYTXMrMlltWDRqWnVjTnR5elZTWXNkeDVlZk9UNTRSdkt6MHdVYk1oTDFyc2ZVMnIyMmN2SmhnellMSzl3MnhxZHZ6cW0vSmp1MnpxcE5VL1NITGJEY2xkMTBrYVBPQ2t1L0ZZYzJLZ1AzT1AyaVhIMDYwc0poVTkrWmR5dlNhK3dKQ3pCdVZqRW41N3VwSVZKL25ZRW56bDFkZCszV3VHOUh1Ny9abHJocWxxNVB2ODFobmpYTWxCazZQbkJsOWhvM1poalJidW5QNHUyV21OKzhRL0UvR3lwRkJxTHNzelF4TmpFRDlaYk1nVzBqSU5jVXhEVW9vWWsvb1BMTU9PUUpOb25PTms2eldCZXo2TlBCKy9jdXJKN2FlODFtcm56MzRkZzJ2ZGdQRzR1K3JsN1RrYlgxMWthbGF1NFRKNVo2VDR4VEVuNzU4NnZ5M0sxZjhzcld2WCszeE9iNGtRT1JNZmFyTnhjYnF5MUxha3lzWEpqMEphOWo2b1c4dThmblgxb1NLRmlXdUt1Z0szWGhOTEhPNWJHTkYxelNudDRPbStkdzZzK2RNaFU5RndPR3A5ZHFxNmNLWG8yUVhmekNuL3RreDUxRjE0Sm41cHhLUGpVemE5YWtPQjlmd1JmNmw2T2o0K0tERmhmckx0M2Q0c3JiSXlsYWRwcmoxcXhsQmFJdmZOOWsvbzNkbE4zL1ZqUFEzS0w3bUp1bjZKU0FHUnUrWkN5NWZvK3pNTDFrWG5tUGJHdjI5RmZQNDEzUFBIaFd5SHN4bVdGeXRlR01QdTR0d25zM1gzajM4YjdpdTVVSmllL01uVzBQUTVwRVRZeVRnQ0hTaDlGM1FSUUc3MjVtcnl3TlB1di9UdHBQa2sxdThaelY1NmY4eFZIeXJRU0pLck0wTGpSb25OZUF0UlJaV0xKa0lNby96TWFDTjZUajUyTGdaT0N3d0c2QlRac1ZVc2N2RjJZT3VPZFhrSjBKRXRVdktNcFBLVTB1S2RZSFpRQlErZ2VtZlNOd2g5QWZxU2ZxYk9Cb1lBL3ZpVEsxR1VQTkxTOHZ4Mlp1YWhHbWdTWFkrb1FXTjk5UHRaZ2RNME1rTmlRdjh6N1RpZWViZjE4KzVMdFdmM1Y5Q084dG8yMC9zcDd4L2xhVUtyZGJtbEcxWldwZFY4d241eVBOczFOck93SUNhNXBFdmpZWFgxKzBMK1lVVThFNXRSenhQVUVpU3pzUGJIK3k4TXpDMHJrVEMyMmxENFF4aEczOTBhSjJLODc0OXpYVnFyaFp0NWI5L3ZMSlVXcE5xTnRhanpzVExZUWpPRDAvZmpac2w5L0QwaGN0bE1yOGtqdnd3a0tlcnBsN2J4NWNjWUZEVkZWeDY3YndUcG1MMFcybVMwLzlYZFgrWnFXNS9YYm43TWNLSDEzMzFLMTcrVEYwMDBLUFBhbjdnazF1bm56QmxzekNWcEVYOE45ajkreFh6bEh0dDlkeU5YeU5QS3J6NUdsOXROZFRvOHAzU3EyVGVIUTNCMFFmTytRUUViSDYwdG5IK2dmUHZzbWRiMTVwMk1SeUdsaHNIbWRpWkRSbzNEcGtDa2VVQWg0eGpMMmc4WVdCQ0x4QzFXQTBaR2RtQlM4OEJWV3owS2puWkRia1FSNDVCem9kd2VNMjVETkFsaFUxVUVab1pERUU1dHRyQytmZjErZnhEdlFvWEpqR2U1dEw0cFc1M1IrRElpUXRQSVlwQmtrTExCck1HSHdaTWhtU0dZb1k4c0dENzJrTUpRd0tERzVBVmg2WUZjYVFDcFFyQnFvQmlTZ3dtRExvTVJnd0dDeFVhMURCbWJaTEtndnkwNHNTQ3pJcTBWdVRMRTJNRFBWUnQvd1MwdjhyeGUrNTVHVVc4L3RZdGZWajdWQzNOVVYyMVg3MU82L256VnJqZU1UWDdzY3QxbGxNSDdkRy9Nclk3T005K1pWUXpOeE9JVmN0OGVtU01kNTJvcjg2bzR2ZVNpeVBZdlBNMDVhWnVkaktkTXJKZVJPcjdpZldwMDdwZWZIQ3hGT3luK09Kd2F1cGxZczN5cW9uUDkwUXNyb25kbW9zcytTS0RMM3pWd0xteXRkRXVETDcxclFwaExOVzZCdXo2VTk1cUNtMi9ydW9oR1RlbC9KdG4zM2lmaS9nWWI3bSsrM3ZldGVYN1MzMXA3a0xqdlN5ZkdzNU5hT0tMeUt0Y2ttbGxNOHZtemYyL3hwZmhyMS9aRnZDMHFlMzFDYjVnL0tkSFJ2QzNKNFh2VTZRU0daaUNMc1pzcmovUUJOLzZkT0NueUZUTEFLTy85NzQ0cnJraCtjbEQ1b1N2b29zYkFJMmk1b1lmeU5pak0yd2lmRU5VT2dGS0htbjAyUlFFOHRRS2c4YkI4UUJUTUJTWmtHa2dRUnkydU5HVE8wd0FwTWVYSWJWa0I5VTN3TXJlQ1BRa0llaGVSU3cvRVZLZWtJc0FnRkdlN1dYS0hLVUthbjllS0NZWGxHREpRbE1Qams1T25XbHhQS3I3eU42Wi9Eb3NPK3Rmck5NK3IyOWRHdGc0cFlUbHZkblYxckxlay9jKzRncGMyZmo1emRMK09WbmJaVE5xZWRlTENkZ3h2bkxUenYwbjdORzdsazdsdTlyYzRvZUIvbUxWUlpPNW4xaitydzJZWXBibk9RQnpYVjl2NUlPVGJUY3ZMb2wxWGpadlcreE9adGZ6WjZqVnI1STgrd0xxVVpyeHFXdmk0SU1tTDlGeUo0NTUvVi9idExEN0l3bkpoZDM3YXExMGxWNkc1NVVaTHdwdi9pSnpNSUlnM2VQZ2xPUGRVKzNPUjNSTzJ2cGRla2phL29WVDF2TGJqUjJDRERJMy9UYzJuNnRkUEszK3VkUEorblYvL3hSY3RkSm12SDB2VWtwazY3dE9QWWh1bmxEWE1EaHlzYnFybDM1S1pPZk9tcGtMazEvc2k2MnRzRXQ3b3VXRmhORDFRSUFhMW8wTlEwS1pXNWtjM1J5WldGdERRcGxibVJ2WW1vTkNqRTJJREFnYjJKcURRbzhQQzlVZVhCbEwxaFNaV1l2VTJsNlpTQXhOaTlYV3lBeElEUWdNbDBnTDFKdmIzUWdNU0F3SUZJdlNXNW1ieUEzSURBZ1VpOUpSRnM4TVRBM09VSTNNMFV6TlVVeE1UTTBPVGhCTmpoRlFUWkJPRUkzUTBWQ05qTStQREV3TnpsQ056TkZNelZGTVRFek5EazRRVFk0UlVFMlFUaENOME5GUWpZelBsMGdMMFpwYkhSbGNpOUdiR0YwWlVSbFkyOWtaUzlNWlc1bmRHZ2dOekErUGcwS2MzUnlaV0Z0RFFwNG5HTmdBSUwvL3htQnBDQURBNGlxZ1ZCYndCVGpMRERGMUF5bW1MWEJGSXNVVUFTb2hKZUJDVUl4UXloR0NBV1ZZd0dxWkdVQ2EyRDlDcWJZN2pBd0FBRExVZ2J1RFFwbGJtUnpkSEpsWVcwTkNtVnVaRzlpYWcwS2VISmxaZzBLTUNBeE53MEtNREF3TURBd01EQXdPQ0EyTlRVek5TQm1EUW93TURBd01EQXdNREUzSURBd01EQXdJRzROQ2pBd01EQXdNREF4TWpRZ01EQXdNREFnYmcwS01EQXdNREF3TURFNE1DQXdNREF3TUNCdURRb3dNREF3TURBd05ERXdJREF3TURBd0lHNE5DakF3TURBd01EQTJORE1nTURBd01EQWdiZzBLTURBd01EQXdNRGd4TVNBd01EQXdNQ0J1RFFvd01EQXdNREF4TURVd0lEQXdNREF3SUc0TkNqQXdNREF3TURBd01Ea2dOalUxTXpVZ1pnMEtNREF3TURBd01EQXhNQ0EyTlRVek5TQm1EUW93TURBd01EQXdNREV4SURZMU5UTTFJR1lOQ2pBd01EQXdNREF3TVRJZ05qVTFNelVnWmcwS01EQXdNREF3TURBeE15QTJOVFV6TlNCbURRb3dNREF3TURBd01EQXdJRFkxTlRNMUlHWU5DakF3TURBd01ERTFNalVnTURBd01EQWdiZzBLTURBd01EQXdNVGMxTmlBd01EQXdNQ0J1RFFvd01EQXdNRFV5TnpnNUlEQXdNREF3SUc0TkNuUnlZV2xzWlhJTkNqdzhMMU5wZW1VZ01UY3ZVbTl2ZENBeElEQWdVaTlKYm1adklEY2dNQ0JTTDBsRVd6d3hNRGM1UWpjelJUTTFSVEV4TXpRNU9FRTJPRVZCTmtFNFFqZERSVUkyTXo0OE1UQTNPVUkzTTBVek5VVXhNVE0wT1RoQk5qaEZRVFpCT0VJM1EwVkNOak0rWFNBK1BnMEtjM1JoY25SNGNtVm1EUW8xTXpBMU9BMEtKU1ZGVDBZTkNuaHlaV1lOQ2pBZ01BMEtkSEpoYVd4bGNnMEtQRHd2VTJsNlpTQXhOeTlTYjI5MElERWdNQ0JTTDBsdVptOGdOeUF3SUZJdlNVUmJQREV3TnpsQ056TkZNelZGTVRFek5EazRRVFk0UlVFMlFUaENOME5GUWpZelBqd3hNRGM1UWpjelJUTTFSVEV4TXpRNU9FRTJPRVZCTmtFNFFqZERSVUkyTXo1ZElDOVFjbVYySURVek1EVTRMMWhTWldaVGRHMGdOVEkzT0RrK1BnMEtjM1JoY25SNGNtVm1EUW8xTXpVMU5BMEtKU1ZGVDBZPQ==</urn:binaryDocument>
                  <urn:storeAction>update</urn:storeAction>
               </urn:binaryDocumentPolicyCriterion>
               <urn:binaryDocumentPolicyCriterion>
                  <urn:policyOID>defaultBinaryOID_3</urn:policyOID>
                  <urn:documentUniqueId>77.777.7.7</urn:documentUniqueId>
                  <urn:documentTitle>Binary Doc 77</urn:documentTitle>
                  <urn:effectiveTime>2009-12-01T00:00:00.000-05:00</urn:effectiveTime>
                  <urn:binaryDocument></urn:binaryDocument>
                  <urn:storeAction>delete</urn:storeAction>
               </urn:binaryDocumentPolicyCriterion>
            </urn:binaryDocumentPolicyCriteria>
            <urn:fineGrainedPolicyMetadata>
               <urn:policyOID>44444444-4444-4444-4444-4444444444444</urn:policyOID>
               <urn:authorPerson>author_person</urn:authorPerson>
            </urn:fineGrainedPolicyMetadata>
         </urn:patientPreferences>
      </urn:StorePtConsentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="RetrievePtConsentByPtId" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>RetrievePtConsentByPtId</con:operation>
					<con:request name="RetrievePtConsentByPtId">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-AdapterPIP}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtId - pdfdoc -minimaldoc">
      <urn:RetrievePtConsentByPtIdRequest>
         <urn:patientId>${#Project#PatientId}</urn:patientId>
         <urn:assigningAuthority>1.1</urn:assigningAuthority>
      </urn:RetrievePtConsentByPtIdRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns17='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns17:RetrievePtConsentByPtIdResponse[1]/ns17:patientPreferences[1]/ns17:optIn[1]</path>
								<content>${StorePtConsent - fine\binary#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:optIn[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns18:RetrievePtConsentByPtIdResponse[1]/ns18:patientPreferences[1]/ns18:patientId[1]</path>
								<content>${StorePtConsent - fine\binary#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:patientId[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns18:RetrievePtConsentByPtIdResponse[1]/ns18:patientPreferences[1]/ns18:assigningAuthority[1]</path>
								<content>${StorePtConsent - fine\binary#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:assigningAuthority[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="RetrievePtConsentByDocId - Fine" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>RetrievePtConsentByPtDocId</con:operation>
					<con:request name="RetrievePtConsentByDocId - Fine">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-AdapterPIP}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtId - pdfdoc -minimaldoc">
      <urn:RetrievePtConsentByPtDocIdRequest>
         <urn:documentId>44444444-4444-4444-4444-4444444444444</urn:documentId>
         <urn:repositoryId>1</urn:repositoryId>
         <urn:homeCommunityId>1.1</urn:homeCommunityId>
      </urn:RetrievePtConsentByPtDocIdRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="RetrievePtConsentByDocId - Binary1" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>RetrievePtConsentByPtDocId</con:operation>
					<con:request name="RetrievePtConsentByDocId - Binary1">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-AdapterPIP}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtId - pdfdoc -minimaldoc">
      <urn:RetrievePtConsentByPtDocIdRequest>
         <urn:documentId>99.999.9.9</urn:documentId>
         <urn:repositoryId>1</urn:repositoryId>
         <urn:homeCommunityId>1.1</urn:homeCommunityId>
      </urn:RetrievePtConsentByPtDocIdRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="RetrievePtConsentByDocId - Binary2" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>RetrievePtConsentByPtDocId</con:operation>
					<con:request name="RetrievePtConsentByDocId - Binary2">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-AdapterPIP}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtId - pdfdoc -minimaldoc">
      <urn:RetrievePtConsentByPtDocIdRequest>
         <urn:documentId>88.888.8.8</urn:documentId>
         <urn:repositoryId>1</urn:repositoryId>
         <urn:homeCommunityId>1.1</urn:homeCommunityId>
      </urn:RetrievePtConsentByPtDocIdRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="QueryByPatientId" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>RetrievePtConsentByPtDocId</con:operation>
					<con:request name="QueryByPatientId">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-DocRegistry}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:urn1="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtId - pdfdoc -minimaldoc">
      <urn:AdhocQueryRequest id="?" comment="?" federated="false" federation="?" startIndex="0" maxResults="-1">
         <urn:ResponseOption returnType="LeafClass" returnComposedObjects="true"/>
         <urn1:AdhocQuery id="urn:uuid:14d4debf-8f97-4251-9a74-a90016b0af0d" home="1.1">
            <urn1:Slot name="$XDSDocumentEntryPatientId">
               <urn1:ValueList>
                  <urn1:Value>${#Project#PatientId}^^^&amp;1.1&amp;ISO</urn1:Value>
               </urn1:ValueList>
            </urn1:Slot>
         </urn1:AdhocQuery>
      </urn:AdhocQueryRequest>
   <urn2:RetrievePtConsentByPtDocIdRequest xmlns:urn2="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter"/></soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Slot[@name='languageCode']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>en-US</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Slot[@name='sourcePatientId']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>${StorePtConsent - fine\binary#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:patientId[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Consent to Share Information</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d']/ns2:Slot[@name='authorPerson']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>${StorePtConsent - fine\binary#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:authorPerson[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[1]/ns3:Classification[2]/@nodeRepresentation</path>
								<content>57017-6</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:41a5887f-8865-4c09-adf7-e362475b143a']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>2.16.840.1.113883.6.1</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:41a5887f-8865-4c09-adf7-e362475b143a']/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Privacy Policy</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/@mimeType</path>
								<content>text/xml</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f']/@nodeRepresentation</path>
								<content>R</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>2.16.840.1.113883.5.25</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f']/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Restricted</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1']/@nodeRepresentation</path>
								<content>385432009</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>2.16.840.1.113883.6.96</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1']/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Not Applicable</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead']/@nodeRepresentation</path>
								<content>385432009</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>2.16.840.1.113883.6.96</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead']/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Not Applicable</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f0306f51-975f-434e-a61c-c59651d33983']/@nodeRepresentation</path>
								<content>57017-6</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f0306f51-975f-434e-a61c-c59651d33983']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>2.16.840.1.113883.6.1</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f0306f51-975f-434e-a61c-c59651d33983']/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Privacy Policy</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[1]/ns3:ExternalIdentifier[@identificationScheme='urn:uuid:58a6f841-87b3-4a3e-92fd-a8ffeff98427']/@value</path>
								<content>'ADPTPIPTST98769876Z^^^&amp;1.1&amp;ISO'</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="Remove Documents" type="groovy">
				<con:settings/>
				<con:config>
					<script>def table = context.findProperty('DocumentTable')
def val = context.findProperty('PatientId')

context.withSql('DocRepositoryDB') { sql -&gt; 
sql.execute("delete from " + table + " where SourcePatientId='" + val + "'")
}


					</script>
				</con:config>
			</con:testStep>
			<con:properties>
				<con:property>
					<con:name>startDate</con:name>
					<con:value>2012-03-02T17:23:15Z</con:value>
				</con:property>
				<con:property>
					<con:name>endDate</con:name>
					<con:value>2012-03-02T17:33:15Z</con:value>
				</con:property>
				<con:property>
					<con:name>sigDate</con:name>
					<con:value>03/02/2012 17:23:15</con:value>
				</con:property>
				<con:property>
					<con:name>expireDate</con:name>
					<con:value>2012-04-01T00:00:00Z</con:value>
				</con:property>
			</con:properties>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="d811a39c-26af-423c-bee1-4737af87321c" keepSession="false" maxResults="0" name="RetrievePtConsentByPtId - pdfdoc - fulldoc" searchProperties="true">
			<con:settings/>
			<con:testStep name="Clear Docs For Patient" type="groovy">
				<con:settings/>
				<con:config>
					<script>def table = context.findProperty('DocumentTable')
def val = context.findProperty('PatientId')

context.withSql('DocRepositoryDB') { sql -&gt; 
sql.execute("delete from " + table + " where SourcePatientId='" + val + "'")
}


					</script>
				</con:config>
			</con:testStep>
			<con:testStep name="StorePtConsent - fine\binary" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>StorePtConsent</con:operation>
					<con:request name="StorePtConsent - fine\binary">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-AdapterPIP}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtId - pdfdoc - fulldoc">
      <urn:StorePtConsentRequest>
         <urn:patientPreferences>
            <urn:patientId>${#Project#PatientId}</urn:patientId>
            <urn:assigningAuthority>1.1</urn:assigningAuthority>
            <urn:optIn>false</urn:optIn>
            <urn:binaryDocumentPolicyCriteria>
               <urn:binaryDocumentPolicyCriterion>
                  <urn:policyOID>defaultBinaryOID_1</urn:policyOID>
                  <urn:documentUniqueId>99.999.9.9</urn:documentUniqueId>
                  <urn:documentTitle>Binary Doc 99</urn:documentTitle>
                  <urn:patientInfo>
                     <urn:name>
                        <urn1:familyName>Ross</urn1:familyName>
                        <urn1:givenName>Ellen</urn1:givenName>
                        <urn1:prefix>Mrs.</urn1:prefix>
                     </urn:name>
                     <urn:addr>
                        <urn1:address>
                           <urn1:city>Blue Bell</urn1:city>
                           <urn1:country>USA</urn1:country>
                           <urn1:state>MA</urn1:state>
                           <urn1:streetAddress>17 Daws Rd.</urn1:streetAddress>
                           <urn1:zipCode>02368</urn1:zipCode>
                        </urn1:address>
                     </urn:addr>
                     <urn:gender>
                        <urn1:code>F</urn1:code>
                        <urn1:codeSystem>2.16.840.1.113883.5.1</urn1:codeSystem>
                     </urn:gender>
                     <urn:birthTime>19600127</urn:birthTime>
                  </urn:patientInfo>
                  <urn:documentTypeCode>
                     <urn1:code>34133-9</urn1:code>
                     <urn1:codeSystem>2.16.840.1.113883.6.2</urn1:codeSystem>
                     <urn1:codeSystemName>LOINC</urn1:codeSystemName>
                     <urn1:displayName>SUMMARIZATION OF EPISODE NOTE</urn1:displayName>
                  </urn:documentTypeCode>
                  <urn:authorOriginal>
                     <urn:authorTime>19990522</urn:authorTime>
                     <urn:authorIdAssigningAuthority>1.3.5.35.1.4436.7</urn:authorIdAssigningAuthority>
                     <urn:authorId>11111111</urn:authorId>
                     <urn:name>
                        <urn1:familyName>Wiseman</urn1:familyName>
                        <urn1:givenName>Bernard</urn1:givenName>
                        <urn1:prefix>Dr.</urn1:prefix>
                        <urn1:suffix>Sr.</urn1:suffix>
                     </urn:name>
                     <urn:representedOrganizationIdAssigningAuthority>1.3.5.35.1.4436.7</urn:representedOrganizationIdAssigningAuthority>
                     <urn:representedOrganizationId>aaaaabbbbb</urn:representedOrganizationId>
                     <urn:representedOrganizationName>Dr. Wiseman's Clinic</urn:representedOrganizationName>
                  </urn:authorOriginal>
                  <urn:authorScanner>
                     <urn:authorTime>20050329204411-0700</urn:authorTime>
                     <urn:authorIdAssigningAuthority>1.3.6.4.1.4.1.2835.2.1234</urn:authorIdAssigningAuthority>
                     <urn:authoringDevice>
                        <urn1:code>CAPTURE</urn1:code>
                        <urn1:codeSystem>1.2.840.10008.2.16.4</urn1:codeSystem>
                        <urn1:displayName>Image Capture</urn1:displayName>
                     </urn:authoringDevice>
                     <urn:deviceManufactureModelName>SOME SCANNER NAME AND MODEL</urn:deviceManufactureModelName>
                     <urn:deviceSoftwareName>SCAN SOFTWARE NAME v0.0</urn:deviceSoftwareName>
                     <urn:representedOrganizationIdAssigningAuthority>1.3.6.4.1.4.1.2835.2</urn:representedOrganizationIdAssigningAuthority>
                     <urn:representedOrganizationName>SOME Scanning Facility</urn:representedOrganizationName>
                     <urn:representedOrganizationAddress>
                        <urn1:city>Burlington</urn1:city>
                        <urn1:country>USA</urn1:country>
                        <urn1:state>MA</urn1:state>
                        <urn1:streetAddress>21 North Ave</urn1:streetAddress>
                        <urn1:zipCode>01803</urn1:zipCode>
                     </urn:representedOrganizationAddress>
                  </urn:authorScanner>
                  <urn:dataEnterer>
                     <urn:dataEntererTime>20050329204411-0700</urn:dataEntererTime>
                     <urn:dataEntererIdAssigningAuthority>1.3.6.4.1.4.1.2835.2</urn:dataEntererIdAssigningAuthority>
                     <urn:dataEntererId>22222222</urn:dataEntererId>
                     <urn:name>
                        <urn1:familyName>Smith</urn1:familyName>
                        <urn1:givenName>Bernice</urn1:givenName>
                        <urn1:prefix>Mrs.</urn1:prefix>
                     </urn:name>
                  </urn:dataEnterer>
                  <urn:custodian>
                     <urn:organizationIdAssigningAuthority>1.3.6.4.1.4.1.2835.2</urn:organizationIdAssigningAuthority>
                     <urn:organizationName>SOME Scanning Facility</urn:organizationName>
                     <urn:organizationAddress>
                        <urn1:city>Burlington</urn1:city>
                        <urn1:country>USA</urn1:country>
                        <urn1:state>MA</urn1:state>
                        <urn1:streetAddress>21 North Ave</urn1:streetAddress>
                        <urn1:zipCode>01803</urn1:zipCode>
                     </urn:organizationAddress>
                  </urn:custodian>
                  <urn:legalAuthenticator>
                     <urn:authenticationTime>19990522</urn:authenticationTime>
                     <urn:authenticatorIdAssigningAuthority>1.3.5.35.1.4436.7</urn:authenticatorIdAssigningAuthority>
                     <urn:authenticatorId>11111111</urn:authenticatorId>
                     <urn:signatureCode>
                        <urn1:code>S</urn1:code>
                     </urn:signatureCode>
                     <urn:authenticatorPersonName>
                        <urn1:familyName>Wiseman-S</urn1:familyName>
                        <urn1:givenName>Bernard-L</urn1:givenName>
                        <urn1:prefix>Dr.</urn1:prefix>
                        <urn1:suffix>Sr.</urn1:suffix>
                     </urn:authenticatorPersonName>
                  </urn:legalAuthenticator>
                  <urn:startDate>19800127000000</urn:startDate>
                  <urn:endDate>19990522000000</urn:endDate>
                  <urn:mimeType>test</urn:mimeType>
                  <urn:intendedRecipient>intendedRecipient</urn:intendedRecipient>
                  <urn:healthcareFacilityTypeCode>
                     <urn1:code>Hcode</urn1:code>
                     <urn1:codeSystem>Htest</urn1:codeSystem>
                     <urn1:codeSystemName>HSystemName</urn1:codeSystemName>
                     <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                     <urn1:displayName>HDisplayName</urn1:displayName>
                     <urn1:originalText>testing</urn1:originalText>
                     <urn1:translation/>
                  </urn:healthcareFacilityTypeCode>
                  <urn:practiceSettingCode>
                     <urn1:code>Pcode</urn1:code>
                     <urn1:codeSystem>Ptest</urn1:codeSystem>
                     <urn1:codeSystemName>PSystemName</urn1:codeSystemName>
                     <urn1:codeSystemVersion>2.0</urn1:codeSystemVersion>
                     <urn1:displayName>PDisplayName</urn1:displayName>
                     <urn1:originalText>testing</urn1:originalText>
                     <urn1:translation/>
                  </urn:practiceSettingCode>
                  <urn:confidentialityCode>
                     <urn1:code>N</urn1:code>
                     <urn1:codeSystem>2.16.840.1.113883.5.</urn1:codeSystem>
                  </urn:confidentialityCode>
                  <urn:effectiveTime>20091217111502</urn:effectiveTime>
                  <urn:binaryDocument></urn:binaryDocument>
                  <urn:storeAction>add</urn:storeAction>
               </urn:binaryDocumentPolicyCriterion>
            </urn:binaryDocumentPolicyCriteria>
            <urn:fineGrainedPolicyMetadata>
               <urn:policyOID>44444444-4444-4444-4444-4444444444444</urn:policyOID>
               <urn:authorPerson>author_person</urn:authorPerson>
            </urn:fineGrainedPolicyMetadata>
         </urn:patientPreferences>
      </urn:StorePtConsentRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="RetrievePtConsentByPtId" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>RetrievePtConsentByPtId</con:operation>
					<con:request name="RetrievePtConsentByPtId">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-AdapterPIP}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtId - pdfdoc - fulldoc">
      <urn:RetrievePtConsentByPtIdRequest>
         <urn:patientId>${#Project#PatientId}</urn:patientId>
         <urn:assigningAuthority>1.1</urn:assigningAuthority>
      </urn:RetrievePtConsentByPtIdRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion disabled="true" type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns17='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns17:RetrievePtConsentByPtIdResponse[1]/ns17:patientPreferences[1]/ns17:optIn[1]</path>
								<content>${StorePtConsent - fine\binary#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:optIn[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns18:RetrievePtConsentByPtIdResponse[1]/ns18:patientPreferences[1]/ns18:patientId[1]</path>
								<content>${StorePtConsent - fine\binary#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:patientId[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion type="XPath Match">
							<con:configuration>
								<path>declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns18:RetrievePtConsentByPtIdResponse[1]/ns18:patientPreferences[1]/ns18:assigningAuthority[1]</path>
								<content>${StorePtConsent - fine\binary#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:assigningAuthority[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="RetrievePtConsentByDocId - Fine" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>RetrievePtConsentByPtDocId</con:operation>
					<con:request name="RetrievePtConsentByDocId - Fine">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-AdapterPIP}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtId - pdfdoc - fulldoc">
      <urn:RetrievePtConsentByPtDocIdRequest>
         <urn:documentId>44444444-4444-4444-4444-4444444444444</urn:documentId>
         <urn:repositoryId>1</urn:repositoryId>
         <urn:homeCommunityId>1.1</urn:homeCommunityId>
      </urn:RetrievePtConsentByPtDocIdRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="RetrievePtConsentByDocId - Binary1" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>RetrievePtConsentByPtDocId</con:operation>
					<con:request name="RetrievePtConsentByDocId - Binary1">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-AdapterPIP}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtId - pdfdoc - fulldoc">
      <urn:RetrievePtConsentByPtDocIdRequest>
         <urn:documentId>99.999.9.9</urn:documentId>
         <urn:repositoryId>1</urn:repositoryId>
         <urn:homeCommunityId>1.1</urn:homeCommunityId>
      </urn:RetrievePtConsentByPtDocIdRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="QueryByPatientId" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>AdapterPIPBindingSoap</con:interface>
					<con:operation>RetrievePtConsentByPtDocId</con:operation>
					<con:request name="QueryByPatientId">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>${#Project#Endpoint-DocRegistry}</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:urn1="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0">
   <soapenv:Header/>
   <soapenv:Body projectName="AdapterPIP" testCase="RetrievePtConsentByPtId - pdfdoc - fulldoc">
      <urn:AdhocQueryRequest id="?" comment="?" federated="false" federation="?" startIndex="0" maxResults="-1">
         <urn:ResponseOption returnType="LeafClass" returnComposedObjects="true"/>
         <urn1:AdhocQuery id="urn:uuid:14d4debf-8f97-4251-9a74-a90016b0af0d" home="1.1">
            <urn1:Slot name="$XDSDocumentEntryPatientId">
               <urn1:ValueList>
                  <urn1:Value>${#Project#PatientId}^^^&amp;1.1&amp;ISO</urn1:Value>
               </urn1:ValueList>
            </urn1:Slot>
         </urn1:AdhocQuery>
      </urn:AdhocQueryRequest>
   <urn2:RetrievePtConsentByPtDocIdRequest xmlns:urn2="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter"/></soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:assertion name="en-US" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Slot[@name='languageCode']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>en-US</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="patientId" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Slot[@name='sourcePatientId']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>${StorePtConsent - fine\binary#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:patientId[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="fine - Title" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Consent to Share Information</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="fine - author person" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:93606bcf-9494-43ec-9b4e-a7748d1a838d']/ns2:Slot[@name='authorPerson']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>${StorePtConsent - fine\binary#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:fineGrainedPolicyMetadata[1]/urn:authorPerson[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="fine - classcode" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[1]/ns3:Classification[2]/@nodeRepresentation</path>
								<content>57017-6</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="fine - classcodesystem" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:41a5887f-8865-4c09-adf7-e362475b143a']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>2.16.840.1.113883.6.1</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="fine - classcodedisplayname" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:41a5887f-8865-4c09-adf7-e362475b143a']/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Privacy Policy</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="fine - mimetype" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/@mimeType</path>
								<content>text/xml</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="fine - confidentialityCode" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f']/@nodeRepresentation</path>
								<content>R</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="fine - confidentialitycodesystem" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>2.16.840.1.113883.5.25</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="fine - confidentialitydisplayname" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f4f85eac-e6cb-4883-b524-f2705394840f']/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Restricted</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="fine - facilitycode" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1']/@nodeRepresentation</path>
								<content>385432009</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="fine - facilitycodesystem" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>2.16.840.1.113883.6.96</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="fine - facilityDisplayName" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f33fb8ac-18af-42cc-ae0e-ed0b0bdb91e1']/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Not Applicable</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="fine - practiseSettingcode" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead']/@nodeRepresentation</path>
								<content>385432009</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="fine - practisecodesystem" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>2.16.840.1.113883.6.96</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="fine - practisecodedisplayname" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:cccf5598-8b07-4b77-a05e-ae952c785ead']/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Not Applicable</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="fine - typecode" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f0306f51-975f-434e-a61c-c59651d33983']/@nodeRepresentation</path>
								<content>57017-6</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="fine - typecodesystem" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f0306f51-975f-434e-a61c-c59651d33983']/ns2:Slot[@name='codingScheme']/ns2:ValueList[1]/ns2:Value[1]</path>
								<content>2.16.840.1.113883.6.1</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="fine - typecodedisplayname" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns5='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns5:AdhocQueryResponse[1]/ns2:RegistryObjectList[1]/ns2:ExtrinsicObject[1]/ns2:Classification[@classificationScheme='urn:uuid:f0306f51-975f-434e-a61c-c59651d33983']/ns2:Name[1]/ns2:LocalizedString[1]/@value</path>
								<content>Privacy Policy</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>true</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="fine - patientid" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[1]/ns3:ExternalIdentifier[@identificationScheme='urn:uuid:58a6f841-87b3-4a3e-92fd-a8ffeff98427']/@value</path>
								<content>'ADPTPIPTST98769876Z^^^&amp;1.1&amp;ISO'</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="MimeType" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[2]/@mimeType</path>
								<content>application/pdf</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="DocUniqueId" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[2]/ns3:ExternalIdentifier[1]/@value</path>
								<content>99.999.9.9</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="CreationTime" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[2]/ns3:Slot[@name='creationTime']/ns3:ValueList[1]/ns3:Value[1]</path>
								<content>${StorePtConsent - fine\binary#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:binaryDocumentPolicyCriteria[1]/urn:binaryDocumentPolicyCriterion[1]/urn:effectiveTime[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="ConfidentialityCode" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[2]/ns3:Classification[3]/@nodeRepresentation</path>
								<content>N</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="ConfidentialityCodeSystem" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[2]/ns3:Classification[3]/ns3:Slot[1]/ns3:ValueList[1]/ns3:Value[1]</path>
								<content>2.16.840.1.113883.5.</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion disabled="true" name="ConfidentialityCodeDisplayName" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[2]/ns3:Classification[3]/ns3:Name[1]/ns3:LocalizedString[1]/@value</path>
								<content/>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="ServiceStartDate" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns6='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns7='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns7:AdhocQueryResponse[1]/ns6:RegistryObjectList[1]/ns6:ExtrinsicObject[2]/ns6:Slot[@name='serviceStartTime']/ns6:ValueList[1]/ns6:Value[1]</path>
								<content>${StorePtConsent - fine\binary#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:binaryDocumentPolicyCriteria[1]/urn:binaryDocumentPolicyCriterion[1]/urn:startDate[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="ServiceStopDate" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns6='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns7='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns7:AdhocQueryResponse[1]/ns6:RegistryObjectList[1]/ns6:ExtrinsicObject[2]/ns6:Slot[@name='serviceStopTime']/ns6:ValueList[1]/ns6:Value[1]</path>
								<content>${StorePtConsent - fine\binary#Request#//urn:StorePtConsentRequest[1]/urn:patientPreferences[1]/urn:binaryDocumentPolicyCriteria[1]/urn:binaryDocumentPolicyCriterion[1]/urn:endDate[1]}</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="ClassCode" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[2]/ns3:Classification[2]/@nodeRepresentation</path>
								<content>34133-9</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="ClassCodeSystem" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[2]/ns3:Classification[2]/ns3:Slot[1]/ns3:ValueList[1]/ns3:Value[1]</path>
								<content>2.16.840.1.113883.6.2</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="ClassCodeDisplayName" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[2]/ns3:Classification[2]/ns3:Name[1]/ns3:LocalizedString[1]/@value</path>
								<content>SUMMARIZATION OF EPISODE NOTE</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="TypeCode" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[2]/ns3:Classification[7]/@nodeRepresentation</path>
								<content>34133-9</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="TypeCodeSystem" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[2]/ns3:Classification[7]/ns3:Slot[1]/ns3:ValueList[1]/ns3:Value[1]</path>
								<content>2.16.840.1.113883.6.2</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="TypeCodeDisplayName" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[2]/ns3:Classification[7]/ns3:Name[1]/ns3:LocalizedString[1]/@value</path>
								<content>SUMMARIZATION OF EPISODE NOTE</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="Title" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[2]/ns3:Name[1]/ns3:LocalizedString[1]/@value</path>
								<content>Binary Doc 99</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="Aauthor" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns6='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns7='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns7:AdhocQueryResponse[1]/ns6:RegistryObjectList[1]/ns6:ExtrinsicObject[2]/ns6:Classification[1]/ns6:Slot[1]/ns6:ValueList[1]/ns6:Value[1]</path>
								<content>Dr.Bernard, Wiseman</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="FacilityCode" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[2]/ns3:Classification[5]/@nodeRepresentation</path>
								<content>Hcode</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="FacilityCodeSystem" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[2]/ns3:Classification[5]/ns3:Slot[1]/ns3:ValueList[1]/ns3:Value[1]</path>
								<content>Htest</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="FacilityDisplayName" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[2]/ns3:Classification[5]/ns3:Name[1]/ns3:LocalizedString[1]/@value</path>
								<content>HDisplayName</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="practiseSettingcode" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[2]/ns3:Classification[6]/@nodeRepresentation</path>
								<content>Pcode</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="practisecodesystem" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[2]/ns3:Classification[6]/ns3:Slot[1]/ns3:ValueList[1]/ns3:Value[1]</path>
								<content>Ptest</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="practisecodedisplayname" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns3='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns2='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns2:AdhocQueryResponse[1]/ns3:RegistryObjectList[1]/ns3:ExtrinsicObject[2]/ns3:Classification[6]/ns3:Name[1]/ns3:LocalizedString[1]/@value</path>
								<content>PDisplayName</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="Legal Authenticator" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns6='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns7='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns7:AdhocQueryResponse[1]/ns6:RegistryObjectList[1]/ns6:ExtrinsicObject[2]/ns6:Slot[5]/ns6:ValueList[1]/ns6:Value[1]</path>
								<content>Dr.Bernard-L, Wiseman-S</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="IntendedRecipient" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns6='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns7='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns7:AdhocQueryResponse[1]/ns6:RegistryObjectList[1]/ns6:ExtrinsicObject[2]/ns6:Slot[3]/ns6:ValueList[1]/ns6:Value[1]</path>
								<content>intendedRecipient</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:assertion name="AauthorInstitution" type="XPath Match">
							<con:configuration>
								<path>declare namespace ns6='urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0';
declare namespace ns7='urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0';
//ns7:AdhocQueryResponse[1]/ns6:RegistryObjectList[1]/ns6:ExtrinsicObject[2]/ns6:Classification[1]/ns6:Slot[2]/ns6:ValueList[1]/ns6:Value[1]</path>
								<content>Dr. Wiseman's Clinic</content>
								<allowWildcards>false</allowWildcards>
								<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
							</con:configuration>
						</con:assertion>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="Remove Documents" type="groovy">
				<con:settings/>
				<con:config>
					<script>def table = context.findProperty('DocumentTable')
def val = context.findProperty('PatientId')

context.withSql('DocRepositoryDB') { sql -&gt; 
sql.execute("delete from " + table + " where SourcePatientId='" + val + "'")
}


					</script>
				</con:config>
			</con:testStep>
			<con:properties>
				<con:property>
					<con:name>startDate</con:name>
					<con:value>2012-03-02T17:23:15Z</con:value>
				</con:property>
				<con:property>
					<con:name>endDate</con:name>
					<con:value>2012-03-02T17:33:15Z</con:value>
				</con:property>
				<con:property>
					<con:name>sigDate</con:name>
					<con:value>03/02/2012 17:23:15</con:value>
				</con:property>
				<con:property>
					<con:name>expireDate</con:name>
					<con:value>2012-04-01T00:00:00Z</con:value>
				</con:property>
			</con:properties>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:properties/>
		<con:reportParameters/>
	</con:testSuite>
	<con:requirements/>
	<con:properties>
		
		
		<con:property><con:name>DBHost</con:name><con:value>localhost</con:value></con:property><con:property><con:name>DBPass</con:name><con:value>nhincpass</con:value></con:property><con:property><con:name>DBPort</con:name><con:value>3306</con:value></con:property>
		<con:property><con:name>DBUser</con:name><con:value>nhincuser</con:value></con:property>
		
		
		<con:property><con:name>DocRepositoryDB</con:name><con:value>docrepository</con:value></con:property>
		
		<con:property><con:name>DocumentTable</con:name><con:value>document</con:value></con:property><con:property><con:name>Endpoint-AdapterPIP</con:name><con:value>http://localhost:8080/CONNECTAdapter/AdapterPIP</con:value></con:property><con:property><con:name>Endpoint-DocRegistry</con:name><con:value>http://localhost:8080/CONNECTAdapter/DocumentRegistry_Service</con:value></con:property>
		
		
	<con:property><con:name>EventCode</con:name><con:value>zptcstfulldoc</con:value></con:property><con:property><con:name>EventCodeTable</con:name><con:value>eventcode</con:value></con:property><con:property><con:name>PatientId</con:name><con:value>ADPTPIPTST98769876Z</con:value></con:property></con:properties>
	<con:afterLoadScript>def propertiesFilename = project.path[0..(project.path.size()-4)] + 'properties'
def propertiesFile = new File(propertiesFilename)
if (propertiesFile.exists()) {
	def props = new Properties()
	props.load(new FileReader(propertiesFile))
	props.each { key, value -&gt;
	    project.setPropertyValue(key, value)
	}
}


TimeZone.setDefault(TimeZone.getTimeZone("UTC"))
def testRunListener = [
  afterRun: { testRunner, runContext -&gt; },
  afterStep: { testRunner, runContext, result -&gt; },
  beforeStep: { testRunner, runContext -&gt; },
  beforeStep: { testRunner, runContext, testStep -&gt; },
  beforeRun: { testRunner, runContext -&gt; 
    use (org.codehaus.groovy.runtime.TimeCategory) {
      def startDate = 5.minutes.ago
      def endDate = 5.minutes.from.now
      def expireDate = 30.days.from.now

      def df = "yyyy-MM-dd'T'HH:mm:ss'Z'"
      def dfSig = "MM/dd/yyyy' 'HH:mm:ss"

      runContext.testCase.setPropertyValue("startDate", startDate.format(df))
      runContext.testCase.setPropertyValue("endDate", endDate.format(df))
      runContext.testCase.setPropertyValue("sigDate", startDate.format(dfSig))
      runContext.testCase.setPropertyValue("expireDate", expireDate.format(df))
    }
  }   
] as com.eviware.soapui.model.testsuite.TestRunListener

project.testSuiteList*.testCaseList.flatten()*.addTestRunListener(testRunListener)



com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.findProperty = { propertyName -&gt;
    return delegate.getProperty(propertyName) ?:
                delegate.testCase.getPropertyValue(propertyName) ?:
                delegate.testCase.testSuite.getPropertyValue(propertyName) ?:
                delegate.testCase.testSuite.project.getPropertyValue(propertyName)
}

com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.withSql = { dbOrPropertyName, block -&gt;
  def dbName = delegate.findProperty(dbOrPropertyName) ?: dbOrPropertyName
  def host = delegate.findProperty('DBHost')
  def port = delegate.findProperty('DBPort')
  def user = delegate.findProperty('DBUser')
  def pass = delegate.findProperty('DBPass')

  def connectString = "jdbc:mysql://${host}:${port}/${dbName}"
  def sql = groovy.sql.Sql.newInstance(connectString, user, pass, "com.mysql.jdbc.Driver");
  try {
     block(sql)
  } finally {
    sql.close()
  }
}
	</con:afterLoadScript>
	<con:wssContainer/>
	<con:databaseConnectionContainer/>
	<con:reporting>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:parameters/>
	</con:reporting>
	<con:eventHandlers name="TestSuiteRunListener.beforeTestCase" type="TestSuiteRunListener.beforeTestCase">
		<con:script>FileUtils.backupConfiguration(context, log);</con:script>
	</con:eventHandlers>
	<con:eventHandlers name="TestSuiteRunListener.afterTestCase" type="TestSuiteRunListener.afterTestCase">
		<con:script>FileUtils.restoreConfiguration(context, log)</con:script>
	</con:eventHandlers>
</con:soapui-project>