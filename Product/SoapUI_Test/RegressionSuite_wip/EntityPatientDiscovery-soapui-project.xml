<?xml version="1.0" encoding="UTF-8" standalone="no"?><con:soapui-project xmlns:con="http://eviware.com/soapui/config" abortOnError="false" name="EntityPatientDiscovery" resourceRoot="" runType="SEQUENTIAL" soapui-version="3.5.1">
	<con:settings/>
	<con:interface xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" anonymous="optional" bindingName="{urn:gov:hhs:fha:nhinc:entitypatientdiscovery}EntityPatientDiscoveryBindingSoap" definition="WSDL path not set.  #EntityPatientDiscovery.wsdl" name="EntityPatientDiscoveryBindingSoap" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface">
		<con:settings/>
		
		<con:endpoints>
			<con:endpoint>https://localhost:${HttpsDefaultPort}/NhinConnect/EntityPatientDiscovery</con:endpoint>
			<con:endpoint>http://localhost:8080/CONNECTGateway/EntityPatientDiscovery</con:endpoint>
		</con:endpoints>
		<con:operation action="urn:RespondingGateway_PRPA_IN201305UV02" anonymous="optional" bindingOperationName="RespondingGateway_PRPA_IN201305UV02" inputName="RespondingGateway_PRPA_IN201305UV02Request" isOneWay="false" name="RespondingGateway_PRPA_IN201305UV02" outputName="RespondingGateway_PRPA_IN201306UV02Response" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
		</con:operation>
	</con:interface>
	<con:interface xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" anonymous="optional" bindingName="{urn:gov:hhs:fha:nhinc:nhincproxypatientdiscovery}NhincProxyPatientDiscoveryBinding" definition="WSDL path not set.  #NhincProxyPatientDiscovery.wsdl" name="NhincProxyPatientDiscoveryBinding" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface">
		<con:settings/>
		
		<con:endpoints>
			<con:endpoint>https://localhost:8181/CONNECTGatewayTest/NhinPatientDiscoveryTestHelper</con:endpoint>
			<con:endpoint>http://localhost:${HttpDefaultPort}/NhinConnect/NhincProxyPatientDiscovery</con:endpoint>
		</con:endpoints>
		<con:operation action="urn:Proxy_PRPA_IN201305UV" anonymous="optional" bindingOperationName="Proxy_PRPA_IN201305UV" inputName="Proxy_PRPA_IN201305UVProxyRequest" isOneWay="false" name="Proxy_PRPA_IN201305UV" outputName="Proxy_PRPA_IN201306UVProxyResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
		</con:operation>
	</con:interface>
	<con:interface xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" anonymous="optional" bindingName="{urn:gov:hhs:fha:nhinc:adapterpolicyengine}AdapterPolicyEngineBindingSoap" definition="WSDL path not set.  #AdapterPolicyEngine.wsdl" name="AdapterPolicyEngineBindingSoap" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface">
		<con:settings/>

		
		<con:endpoints>
			<con:endpoint>http://localhost:${HttpDefaultPort}/CONNECTAdapter/AdapterProxyService/AdapterPolicyEngine</con:endpoint>
			<con:endpoint>http://localhost:${HttpDefaultPort}/NhinConnect/AdapterPolicyEngine</con:endpoint>
		</con:endpoints>
		<con:operation action="urn:CheckPolicy" anonymous="optional" bindingOperationName="CheckPolicy" inputName="CheckPolicyRequest" isOneWay="false" name="CheckPolicy" outputName="CheckPolicyResponse" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
			<con:call name="Request 1">
				<con:settings/>
				<con:encoding>UTF-8</con:encoding>
				<con:endpoint>http://localhost:${HttpDefaultPort}/CONNECTAdapter/AdapterProxyService/AdapterPolicyEngine</con:endpoint>
				<con:request><![CDATA[
					<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:urn2="urn:oasis:names:tc:xacml:2.0:context:schema:os">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:CheckPolicyRequest>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:addressType>
               <urn1:city>?</urn1:city>
               <urn1:country>?</urn1:country>
               <urn1:state>?</urn1:state>
               <urn1:streetAddress>?</urn1:streetAddress>
               <urn1:zipCode>?</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>?</urn1:dateOfBirth>
            <urn1:dateOfSignature>?</urn1:dateOfSignature>
            <urn1:expirationDate>?</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>?</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>?</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>?</urn1:haveSignature>
            <urn1:haveWitnessSignature>?</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>?</urn1:description>
               <urn1:homeCommunityId>?</urn1:homeCommunityId>
               <urn1:name>?</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>?</urn1:familyName>
               <urn1:givenName>?</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:nameType>
               <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>?</urn1:areaCode>
               <urn1:countryCode>?</urn1:countryCode>
               <urn1:extension>?</urn1:extension>
               <urn1:localNumber>?</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:purposeOfDisclosure>?</urn1:purposeOfDisclosure>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:addressType>
               <urn1:city>?</urn1:city>
               <urn1:country>?</urn1:country>
               <urn1:state>?</urn1:state>
               <urn1:streetAddress>?</urn1:streetAddress>
               <urn1:zipCode>?</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>?</urn1:familyName>
               <urn1:givenName>?</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:nameType>
               <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>?</urn1:areaCode>
               <urn1:countryCode>?</urn1:countryCode>
               <urn1:extension>?</urn1:extension>
               <urn1:localNumber>?</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>?</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>?</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:addressType>
               <urn1:city>?</urn1:city>
               <urn1:country>?</urn1:country>
               <urn1:state>?</urn1:state>
               <urn1:streetAddress>?</urn1:streetAddress>
               <urn1:zipCode>?</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>?</urn1:familyName>
               <urn1:givenName>?</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:nameType>
               <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>?</urn1:areaCode>
               <urn1:countryCode>?</urn1:countryCode>
               <urn1:extension>?</urn1:extension>
               <urn1:localNumber>?</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>?</urn1:familyName>
                  <urn1:givenName>?</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>?</urn1:code>
                     <urn1:codeSystem>?</urn1:codeSystem>
                     <urn1:codeSystemName>?</urn1:codeSystemName>
                     <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                     <urn1:displayName>?</urn1:displayName>
                     <urn1:originalText>?</urn1:originalText>
                     <!--Zero or more repetitions:-->
                     <urn1:translation/>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>?</urn1:secondNameOrInitials>
               </urn1:personName>
               <urn1:userName>?</urn1:userName>
               <urn1:role>?</urn1:role>
               <urn1:org>
                  <urn1:description>?</urn1:description>
                  <urn1:homeCommunityId>?</urn1:homeCommunityId>
                  <urn1:name>?</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>?</urn1:code>
                  <urn1:codeSystem>?</urn1:codeSystem>
                  <urn1:codeSystemName>?</urn1:codeSystemName>
                  <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
                  <urn1:displayName>?</urn1:displayName>
                  <urn1:originalText>?</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>?</urn1:authorized>
            <!--Optional:-->
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>?</urn1:code>
               <urn1:codeSystem>?</urn1:codeSystem>
               <urn1:codeSystemName>?</urn1:codeSystemName>
               <urn1:codeSystemVersion>?</urn1:codeSystemVersion>
               <urn1:displayName>?</urn1:displayName>
               <urn1:originalText>?</urn1:originalText>
               <!--Zero or more repetitions:-->
               <urn1:translation/>
            </urn1:purposeOfDisclosureCoded>
            <!--Optional:-->
            <urn1:claimFormRef>?</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:878096191505</urn1:claimFormRaw>
         </urn:assertion>
         <urn:request>
            <!--1 or more repetitions:-->
            <urn2:Subject SubjectCategory="urn:oasis:names:tc:xacml:1.0:subject-category:access-subject">
               <!--Zero or more repetitions:-->
               <urn2:Attribute AttributeId="?" DataType="?" Issuer="?">
                  <!--1 or more repetitions:-->
                  <urn2:AttributeValue>
                     e
                     <!--You may enter ANY elements at this point-->
                     gero
                  </urn2:AttributeValue>
               </urn2:Attribute>
            </urn2:Subject>
            <!--1 or more repetitions:-->
            <urn2:Resource>
               <!--Optional:-->
               <urn2:ResourceContent>
                  cum
                  <!--You may enter ANY elements at this point-->
                  sonoras
               </urn2:ResourceContent>
               <!--Zero or more repetitions:-->
               <urn2:Attribute AttributeId="?" DataType="?" Issuer="?">
                  <!--1 or more repetitions:-->
                  <urn2:AttributeValue>
                     aeoliam
                     <!--You may enter ANY elements at this point-->
                     quae
                  </urn2:AttributeValue>
               </urn2:Attribute>
            </urn2:Resource>
            <urn2:Action>
               <!--Zero or more repetitions:-->
               <urn2:Attribute AttributeId="?" DataType="?" Issuer="?">
                  <!--1 or more repetitions:-->
                  <urn2:AttributeValue>
                     ventos
                     <!--You may enter ANY elements at this point-->
                     verrantque
                  </urn2:AttributeValue>
               </urn2:Attribute>
            </urn2:Action>
            <urn2:Environment>
               <!--Zero or more repetitions:-->
               <urn2:Attribute AttributeId="?" DataType="?" Issuer="?">
                  <!--1 or more repetitions:-->
                  <urn2:AttributeValue>
                     temperat
                     <!--You may enter ANY elements at this point-->
                     per
                  </urn2:AttributeValue>
               </urn2:Attribute>
            </urn2:Environment>
         </urn:request>
      </urn:CheckPolicyRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
				<con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig action="urn:gov:hhs:fha:nhinc:adapterpolicyengine/AdapterPolicyEnginePortType/CheckPolicyRequest" mustUnderstand="NONE" version="200508"/>
				<con:wsrmConfig version="1.2"/>
			</con:call>
		</con:operation>
	</con:interface>
	<con:interface xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" anonymous="optional" bindingName="{urn:ihe:iti:xcpd:2009}RespondingGateway_Binding_Soap" definition="WSDL path not set.  #NhinPatientDiscovery.wsdl" name="RespondingGateway_Binding_Soap" soapVersion="1_2" type="wsdl" wsaVersion="NONE" xsi:type="con:WsdlInterface">
		<con:settings/>
		
		<con:endpoints>
			<con:endpoint>https://localhost:${HttpsDefaultPort}/NhinConnect/PatientDiscovery</con:endpoint>
		</con:endpoints>
		<con:operation action="urn:hl7-org:v3:PRPA_IN201305UV02:CrossGatewayPatientDiscovery" anonymous="optional" bindingOperationName="RespondingGateway_PRPA_IN201305UV02" inputName="" isOneWay="false" name="RespondingGateway_PRPA_IN201305UV02" receivesAttachments="false" sendsAttachments="false" type="Request-Response">
			<con:settings/>
		</con:operation>
	</con:interface>
	
	<con:testSuite name="EntityPatientDiscoverTestSuite">
		<con:settings/>
		<con:runType>SEQUENTIAL</con:runType>
		<con:testCase disabled="true" failOnError="true" failTestCaseOnErrors="true" id="233480a7-8367-4cb2-828e-149a3aa76c22" keepSession="false" maxResults="0" name="PatientDiscoveryOutboundTest" searchProperties="true">
			<con:settings/>
			<con:testStep name="EntityPatientDiscovery Test Case Properties" type="properties">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" createMissingOnLoad="true" discardValuesOnSave="true" saveFirst="true" xsi:type="con:PropertiesStep">
					<con:source>C:/Projects/NHINC/Current/Product/SoapUI_Test/RegressionSuite/EntityPatientDiscovery.properties</con:source>
					<con:target/>
					<con:properties>
						<con:property>
							<con:name>LocalAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDescription</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PatientDiscoveryEndpoint</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSubjectID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDzipCode</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDpurposeOfDisclosure</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSSN</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdOB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDexpirationDate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDuniquePatientId</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstreetAddress</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDCity</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDcountry</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdateOfSignature</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCDesc</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectAdministrativeGender</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectBirthTime</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDAssignAuthID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayConfigDir</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PEReceivingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>mockHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPort</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationDB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationUser</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPass</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationTable</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscovery Property Transfer" type="transfer">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:PropertyTransfersStep">
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PatientDiscoveryEndPoint</con:name>
						<con:sourceType>PatientDiscoveryEndpoint</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Endpoint</con:targetType>
						<con:targetStep>EntityPatientDiscoveryFanOut</con:targetStep>
						<con:targetPath/>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>LocalHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryFanOut</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>ReceivingHCID</con:name>
						<con:sourceType>PDRespondingHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryFanOut</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:receiver[1]/urn:device[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true" transferToAll="false">
						<con:name>PDQueryRequestHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryFanOut</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>PDQueryRequestSubjectGivenName</con:name>
						<con:sourceType>SingleMatchGivenName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryFanOut</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:given[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>PDQueryRequestSubjectFamName</con:name>
						<con:sourceType>SingleMatchFamilyName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryFanOut</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:family[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectBirthTime</con:name>
						<con:sourceType>PDlivingSubjectBirthTime</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryFanOut</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectBirthTime[1]/urn:value[1]/@value</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectGender</con:name>
						<con:sourceType>PDlivingSubjectAdministrativeGender</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryFanOut</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectAdministrativeGender[1]/urn:value[1]/@code</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionSSN</con:name>
						<con:sourceType>PDSSN</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryFanOut</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:SSN[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionUniquePatientID</con:name>
						<con:sourceType>PDuniquePatientId</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryFanOut</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:uniquePatientId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDAssignAuthId</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryFanOut</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:authorOrPerformer[1]/urn:assignedDevice[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>PDQueryReqSubjectAssignAuthID</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryFanOut</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectID</con:name>
						<con:sourceType>PDSubjectID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryFanOut</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@extension</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryFanOut</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:homeCommunityId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true" transferToAll="false">
						<con:name>AssertionHCIDDesc</con:name>
						<con:sourceType>LocalHCIDescription</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryFanOut</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:description[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCIDname</con:name>
						<con:sourceType>LocalHCIDName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryFanOut</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:name[1]</con:targetPath>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep name="Intialize Configurations" type="groovy">
				<con:settings/>
				<con:config>
					<script>FileUtils.InitializeNHINCProperties(context, log);
					</script>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscoveryFanOut" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>EntityPatientDiscoveryBindingSoap</con:interface>
					<con:operation>RespondingGateway_PRPA_IN201305UV02</con:operation>
					<con:request name="EntityPatientDiscoveryFanOut">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>https://localhost:${HttpsDefaultPort}/NhinConnect/EntityPatientDiscovery</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="I"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="2.2"/>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="1.1"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="1.1.1"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.2" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="M"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="19630804" operator="I"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">Smith</urn:family>
                           <urn:given partType="GIV">Joe</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value root="1.1.1" extension="1111" assigningAuthorityName="?"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:NhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>2.2</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Winslet</urn1:familyName>
               <urn1:givenName>Kate</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:purposeOfDisclosure>Mental</urn1:purposeOfDisclosure>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1111^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:assertion type="SOAP Response"/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:properties/>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="69bfa4a1-1cbe-49d2-8a98-40fade68d36a" keepSession="false" maxResults="0" name="EntityPatientDiscoveryWithDenyMockPE" searchProperties="true">
			<con:settings/>
			<con:testStep name="EntityPatientDiscovery Test Case Properties" type="properties">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" createMissingOnLoad="true" discardValuesOnSave="true" saveFirst="true" xsi:type="con:PropertiesStep">
					<con:source>F:/MTiller/Regression_Suite/EntityPatientDiscovery.properties</con:source>
					<con:target/>
					<con:properties>
						<con:property>
							<con:name>LocalAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDescription</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PatientDiscoveryEndpoint</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSubjectID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDzipCode</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDpurposeOfDisclosure</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSSN</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdOB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDexpirationDate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDuniquePatientId</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstreetAddress</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDCity</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDcountry</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdateOfSignature</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCDesc</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectAdministrativeGender</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectBirthTime</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDAssignAuthID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayConfigDir</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PEReceivingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>mockHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPort</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationDB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationUser</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPass</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationTable</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
					<con:property><con:name>AuditDB</con:name><con:value xsi:nil="true"/></con:property><con:property><con:name>AuditTable</con:name><con:value xsi:nil="true"/></con:property></con:properties>
				</con:config>
			</con:testStep>
			<con:testStep disabled="true" name="Generate patient ID for PD" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def propertyList = testRunner.testCase.getTestStepByName( "Test Case Properties" );
def LocalAA = propertyList.getPropertyValue( "LocalAA" );
def AuditPatientID = propertyList.getPropertyValue( "AuditPatientID" );

fullPatientID = AuditPatientID + "^^^&amp;" + LocalAA + "&amp;ISO";
groovyUtils.setPropertyValue( "Test Case Properties", "FullPatientID", fullPatientID);
					</script>
				</con:config>
			</con:testStep>
			<con:testStep name="Intialize Configurations" type="groovy">
				<con:settings/>
				<con:config>
					<script>FileUtils.InitializeNHINCProperties(context, log);
					</script>
				</con:config>
			</con:testStep>
			<con:testStep name="Set Response Mode" type="groovy">
				<con:settings/>
				<con:config>
					<script>def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destDir = dataSource.getPropertyValue( "NHINGatewayConfigDir" );

FileUtils.UpdateProperty(destDir, 'gateway.properties', 'patientDiscoveryResponseMode', 'Verify',context,log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="clear correlations table" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def host = dataSource.getPropertyValue( "SUT.PatientCorrelationHost" );
def port = dataSource.getPropertyValue( "SUT.PatientCorrelationPort" );
def db = dataSource.getPropertyValue( "SUT.PatientCorrelationDB" );
def user = dataSource.getPropertyValue( "SUT.PatientCorrelationUser" );
def pass = dataSource.getPropertyValue( "SUT.PatientCorrelationPass" );
def table = dataSource.getPropertyValue( "SUT.PatientCorrelationTable" );

DBFunctions.clearTable(host, port, db, user, pass, table);</script>
				</con:config>
			</con:testStep>
			<con:testStep name="ModifyInterrnalConnectionInfo" type="groovy">
				<con:settings/>
				<con:config>
					<script>//****Created by Aleena Dhar on Nov 16 2009
//“Script Library” setting in soapUI Preferences changed to path - 
//'C:\Projects\NHINC\Current\Product\IntegrationTest\scripts'
//Descrpiption - PolicyEngine Response is mocked
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destConfigFileLocation = dataSource.getPropertyValue("NHINGatewayConfigDir");
def NHINGatewayHost = dataSource.getPropertyValue("NHINGatewayHost");//**** Redbox (remove later)
//**** mockHost is localhost because Groovy script resides in local machine ****
def mockHost = dataSource.getPropertyValue("mockHost");
def mockPEURL = "http://" + mockHost + ":2222/mockPE";//http://localhost:18080/mockPE
def InitiatingHCID = dataSource.getPropertyValue( "LocalHCID" );

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, InitiatingHCID, "policyengineservice", mockPEURL, context, log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscovery Property Transfer" type="transfer">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:PropertyTransfersStep">
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PatientDiscoveryEndPoint</con:name>
						<con:sourceType>PatientDiscoveryEndpoint</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Endpoint</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath/>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>LocalHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>ReceivingHCID</con:name>
						<con:sourceType>PDRespondingHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:receiver[1]/urn:device[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true" transferToAll="false">
						<con:name>PDQueryRequestHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>PDQueryRequestSubjectGivenName</con:name>
						<con:sourceType>SingleMatchGivenName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:given[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>PDQueryRequestSubjectFamName</con:name>
						<con:sourceType>SingleMatchFamilyName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:family[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectBirthTime</con:name>
						<con:sourceType>PDlivingSubjectBirthTime</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectBirthTime[1]/urn:value[1]/@value</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectGender</con:name>
						<con:sourceType>PDlivingSubjectAdministrativeGender</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectAdministrativeGender[1]/urn:value[1]/@code</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionSSN</con:name>
						<con:sourceType>PDSSN</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:SSN[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionUniquePatientID</con:name>
						<con:sourceType>PDuniquePatientId</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:uniquePatientId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDAssignAuthId</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:authorOrPerformer[1]/urn:assignedDevice[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>PDQueryReqSubjectAssignAuthID</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectID</con:name>
						<con:sourceType>PDSubjectID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@extension</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:homeCommunityId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCIDDesc</con:name>
						<con:sourceType>LocalHCIDescription</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:description[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCIDname</con:name>
						<con:sourceType>LocalHCIDName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:name[1]</con:targetPath>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscoveryRequest" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>EntityPatientDiscoveryBindingSoap</con:interface>
					<con:operation>RespondingGateway_PRPA_IN201305UV02</con:operation>
					<con:request name="EntityPatientDiscoveryRequest">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://localhost:8080/CONNECTGateway/EntityPatientDiscovery</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="I"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="2.2"/>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="1.1"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="1.1.2.16.840.1.113883.3.198"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.2" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="M"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="19630804" operator="I"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">Smith</urn:family>
                           <urn:given partType="GIV">Joe</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value root="1.1.2.16.840.1.113883.3.198" extension="1234" assigningAuthorityName="?"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:NhinTargetCommunities>
<!--            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>5.5</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>-->
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>2.2</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
<urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>AddrCode</urn1:code>
                  <urn1:codeSystem>AddrCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>AddrCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>AddrCode</urn1:displayName>
                  <urn1:originalText>AddrCode</urn1:originalText>
               </urn1:addressType>
               <urn1:city>AddrCity</urn1:city>
               <urn1:country>AddrCountry</urn1:country>
               <urn1:state>AddrState</urn1:state>
               <urn1:streetAddress>AddrStreet</urn1:streetAddress>
               <urn1:zipCode>AddrZip</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>06/04/1959 05:21:00</urn1:dateOfBirth>
            <urn1:explanationNonClaimantSignature>Electronic</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>false</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>false</urn1:haveSignature>
            <urn1:haveWitnessSignature>false</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Sandy</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>nameCode</urn1:code>
                  <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>nameCode</urn1:displayName>
                  <urn1:originalText>nameCode</urn1:originalText>
               </urn1:nameType>
               <urn1:secondNameOrInitials>S</urn1:secondNameOrInitials>
               <urn1:fullName>Sandy S. Smith</urn1:fullName>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>321</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>5436</urn1:extension>
               <urn1:localNumber>253-6849</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>phoneCode</urn1:code>
                  <urn1:codeSystem>phoneCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>phoneCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>phoneCode</urn1:displayName>
                  <urn1:originalText>phoneCode</urn1:originalText>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>AddrCode</urn1:code>
                  <urn1:codeSystem>AddrCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>AddrCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>AddrCode</urn1:displayName>
                  <urn1:originalText>AddrCode</urn1:originalText>
               </urn1:addressType>
               <urn1:city>Addr2City</urn1:city>
               <urn1:country>Addr2Country</urn1:country>
               <urn1:state>Addr2State</urn1:state>
               <urn1:streetAddress>Addr2Street</urn1:streetAddress>
               <urn1:zipCode>Addr2Zip</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Sammy</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>nameCode</urn1:code>
                  <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>nameCode</urn1:displayName>
                  <urn1:originalText>nameCode</urn1:originalText>
               </urn1:nameType>
               <urn1:secondNameOrInitials>s</urn1:secondNameOrInitials>
               <urn1:fullName>Sammy S. Smith</urn1:fullName>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>321</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>5424</urn1:extension>
               <urn1:localNumber>542-6823</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>phoneCode</urn1:code>
                  <urn1:codeSystem>phoneCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>phoneCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>phoneCode</urn1:displayName>
                  <urn1:originalText>phoneCode</urn1:originalText>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>addrCode</urn1:code>
                  <urn1:codeSystem>addrCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>addrCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>addrCode</urn1:displayName>
                  <urn1:originalText>addrCode</urn1:originalText>
               </urn1:addressType>
               <urn1:city>Burnell</urn1:city>
               <urn1:country>USA</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>825 North</urn1:streetAddress>
               <urn1:zipCode>32184</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Scott</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>nameCode</urn1:code>
                  <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>nameCode</urn1:displayName>
                  <urn1:originalText>nameCode</urn1:originalText>
               </urn1:nameType>
               <urn1:secondNameOrInitials>S.</urn1:secondNameOrInitials>
               <urn1:fullName>Scott S. Smith</urn1:fullName>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>321</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>8432</urn1:extension>
               <urn1:localNumber>985-2239</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>phoneCode</urn1:code>
                  <urn1:codeSystem>phoneCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>phoneCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>phoneCode</urn1:displayName>
                  <urn1:originalText>phoneCode</urn1:originalText>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Skagerberg</urn1:familyName>
                  <urn1:givenName>Karl</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>nameCode</urn1:code>
                     <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                     <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                     <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                     <urn1:displayName>nameCode</urn1:displayName>
                     <urn1:originalText>nameCode</urn1:originalText>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>S</urn1:secondNameOrInitials>
                  <urn1:fullName>Kasrl S. Skagerberg</urn1:fullName>
               </urn1:personName>
               <urn1:userName>kskagerb</urn1:userName>
               <urn1:org>
                  <urn1:description>InternalSelfTest2</urn1:description>
                  <urn1:homeCommunityId>2.2</urn1:homeCommunityId>
                  <urn1:name>InternalSelfTest2</urn1:name>
               </urn1:org>
               <urn1:roleCoded>
                  <urn1:code>307969004</urn1:code>
                  <urn1:codeSystem>2.16.840.1.113883.6.96</urn1:codeSystem>
                  <urn1:codeSystemName>SNOMED_CT</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>Public Health</urn1:displayName>
                  <urn1:originalText>Public Health</urn1:originalText>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>true</urn1:authorized>
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>PUBLICHEALTH</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Use or disclosure of Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <urn1:samlAuthnStatement>
               <urn1:authInstant>2009-04-16T13:15:39Z</urn1:authInstant>
               <urn1:sessionIndex>987</urn1:sessionIndex>
               <urn1:authContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:X509</urn1:authContextClassRef>
               <urn1:subjectLocalityAddress>158.147.185.168</urn1:subjectLocalityAddress>
               <urn1:subjectLocalityDNSName>cs.myharris.net</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <urn1:samlAuthzDecisionStatement>
               <urn1:decision>Permit</urn1:decision>
               <urn1:resource>https://158.147.185.168:8181/SamlReceiveService/SamlProcessWS</urn1:resource>
               <urn1:action>EXECUTE</urn1:action>
               <urn1:evidence>
                  <urn1:assertion>
                     <urn1:id>40df7c0a-ff3e-4b26-baeb-f2910f6d05a9</urn1:id>
                     <urn1:issueInstant>2009-04-16T13:10:39.093Z</urn1:issueInstant>
                     <urn1:version>2.0</urn1:version>
                     <urn1:issuerFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</urn1:issuerFormat>
                     <urn1:issuer>CN=SAML User,OU=Harris,O=HITS,L=Melbourne,ST=FL,C=US</urn1:issuer>
                     <urn1:conditions>
                        <urn1:notBefore>2009-04-16T13:10:39.093Z</urn1:notBefore>
                        <urn1:notOnOrAfter>2009-12-31T12:00:00.000Z</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <urn1:accessConsentPolicy>urn:oid:1.2.3.4</urn1:accessConsentPolicy>
                     <urn1:instanceAccessConsentPolicy>urn:oid:1.2.3.4.123456789</urn1:instanceAccessConsentPolicy>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
         </urn:assertion>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion disabled="true" type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="Policy Engine Mock" type="mockresponse">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" startStep="EntityPatientDiscoveryRequest" xsi:type="con:MockResponseStep">
					<con:interface>AdapterPolicyEngineBindingSoap</con:interface>
					<con:operation>CheckPolicy</con:operation>
					<con:path>/mockPE</con:path>
					<con:port>2222</con:port>
					<con:timeout>30000</con:timeout>
					<con:response>
						<con:settings/>
						<con:responseContent><![CDATA[
							<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns15:CheckPolicyResponse xmlns:ns2="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:ns3="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:ns4="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:ns5="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:ns6="http://www.hhs.gov/healthit/nhin/cdc" xmlns:ns7="http://nhinc.services.com/schema/auditmessage" xmlns:ns8="http://www.w3.org/2005/08/addressing" xmlns:ns9="http://docs.oasis-open.org/wsn/b-2" xmlns:ns10="urn:ihe:iti:xds-b:2007" xmlns:ns11="urn:gov:hhs:fha:nhinc:common:subscriptionb2overridefordocuments" xmlns:ns12="http://docs.oasis-open.org/wsrf/bf-2" xmlns:ns13="http://docs.oasis-open.org/wsn/t-1" xmlns:ns14="urn:oasis:names:tc:xacml:2.0:policy:schema:os" xmlns:ns15="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:ns16="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns17="urn:gov:hhs:fha:nhinc:common:subscriptionb2overrideforcdc" xmlns:ns18="urn:oasis:names:tc:xacml:2.0:context:schema:os" xmlns:ns19="http://schemas.xmlsoap.org/ws/2004/08/addressing">
         <ns15:response>
            <ns18:Result>
               <ns18:Decision>Deny</ns18:Decision>
            </ns18:Result>
         </ns15:response>
      </ns15:CheckPolicyResponse>
   </S:Body>
</S:Envelope>]]></con:responseContent>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
					</con:response>
					<con:assertion name="AuthnStatementAuthnInstant " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='authInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authInstant'
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-instant';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementSessionIndex" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='sessionIndex';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:sessionIndex';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:session-index';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementAthnContextClassRef " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='authContextClassRef';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authContextClassRef';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-context-class-ref';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementSubjectLocalityAddress " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='subjectLocalityAddress';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityAddress';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:ip-address';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementDNSName " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='subjectLocalityDNSName';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityDNSName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:dns-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserPersonName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='personname';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:userName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserOrganizationName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user organization';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:name';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-organization-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCode" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role coded';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code';
def XacmlAttributeId='urn:oasis:names:tc:xacml:2.0:subject:role';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCodeSystem " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role system';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCodeSystemName " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role system name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCodeDiplayName " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role display name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-description';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCode" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCode';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:purposeofuse';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCodeSystem" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCodeSystem';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCodeSystemName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCodeSystemName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCodeDisplayName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCodeDisplayName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementDecision" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementDecision';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementResource" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementResource';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementAction" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementAction';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:action';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
//log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);
def ExpectedValue='EXECUTE';
//log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (ExpectedValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionID " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionID';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionIssueInstant" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssueInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionVersion" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionVersion';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionIssuer" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssuer';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotBefore" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotBefore';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2001-01-01T06:00:00.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2009-05-07T02:00:17.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentReference " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentReference';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentType " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentType';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContent " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="HomeCommunityId" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='home-community-id';
def AssertionXpath='//ec:RespondingGateway_PRPA_IN201305UV02Request[1]/ec:PRPA_IN201305UV02[1]/ec:receiver[1]/ec:device[1]/ec:id[1]/@root';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:home-community-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("EntityPatientDiscoveryRequest");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:hl7-org:v3';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="OrganizationId" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='organizationid';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:homeCommunityId';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:organization-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="PatientId" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PatientId';
def XacmlAttributeId='http://www.hhs.gov/healthit/nhin#subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';
mockRequestHolder.namespaces['hl7'] = 'urn:hl7-org:v3';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValueExtension = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@extension"]
def ExpectedExtension = '1234';
log.info('XacmlAttributeValue(' + FieldName + '@extension)=' + XacmlValueExtension);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) =&gt; ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueExtension==ExpectedExtension);

def XacmlValueRoot = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@root"]
def ExpectedRoot = '2.2.2';
log.info('XacmlAttributeValue(' + FieldName + '@root)=' + XacmlValueRoot);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) =&gt; ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueRoot==ExpectedRoot);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'urn:hl7-org:v3#II';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionAccessConsent" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:accessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:instanceAccessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-instance-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns19='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns18:CheckPolicyRequest[1]/ns18:request[1]/ns19:Subject[2]/ns19:Attribute[1]/@AttributeId</path>
							<content>urn:gov:hhs:fha:nhinc:home-community-id</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:assertion name="assigning authority" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns18='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns15='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns15:CheckPolicyRequest[1]/ns15:request[1]/ns18:Resource[1]/ns18:Attribute[1]/ns18:AttributeValue[1]</path>
							<content>1.1.2.16.840.1.113883.3.198</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:assertion name="local patient id" type="XPath Match">
						<con:configuration>
							<path>declare namespace xacml='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace adapter='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//xacml:Resource/xacml:Attribute[@AttributeId='urn:oasis:names:tc:xacml:1.0:resource:resource-id']/xacml:AttributeValue</path>
							<content>1234</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
				</con:config>
			</con:testStep>
			<con:testStep name="count correlations (0)" type="groovy">
				<con:settings/>
				<con:config>
					<script>import groovy.sql.Sql;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def host = dataSource.getPropertyValue( "SUT.PatientCorrelationHost" );
def port = dataSource.getPropertyValue( "SUT.PatientCorrelationPort" );
def db = dataSource.getPropertyValue( "SUT.PatientCorrelationDB" );
def user = dataSource.getPropertyValue( "SUT.PatientCorrelationUser" );
def pass = dataSource.getPropertyValue( "SUT.PatientCorrelationPass" );
def table = dataSource.getPropertyValue( "SUT.PatientCorrelationTable" );
def PatientId =  dataSource.getPropertyValue( "PDSubjectID" );



int countRows(host, port, dbName, user, password, table, patId) {

   def sqlConnect = 'jdbc:mysql://' + host + ':' + port + '/' + dbName;
   def sql = Sql.newInstance(sqlConnect, user, password, "com.mysql.jdbc.Driver");
   def count = 0;
   sql.eachRow("select count(*) from " + table + " where PatientId = '" + patId + "'") { row -&gt;
	count = row[0];
   }
   return count;
}

def count = countRows(host, port, db, user, pass, table, PatientId);
assert count == 0;
					</script>
				</con:config>
			</con:testStep>
			<con:properties><con:property><con:name>startDate</con:name><con:value>2012-02-21T02:10:11Z</con:value></con:property><con:property><con:name>endDate</con:name><con:value>2012-02-21T02:20:11Z</con:value></con:property><con:property><con:name>sigDate</con:name><con:value>02/21/2012 02:10:11</con:value></con:property><con:property><con:name>expireDate</con:name><con:value>2012-03-22T00:00:00Z</con:value></con:property></con:properties>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="b344157d-d4a9-4501-947b-0391e62f502f" keepSession="false" maxResults="0" name="EntityPatientDiscoveryWithPermitMockPE" searchProperties="true">
			<con:settings/>
			<con:testStep name="EntityPatientDiscovery Test Case Properties" type="properties">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" createMissingOnLoad="true" discardValuesOnSave="true" saveFirst="true" xsi:type="con:PropertiesStep">
					<con:source>C:/Projects/NHINC/Current/Product/SoapUI_Test/RegressionSuite/EntityPatientDiscovery.properties</con:source>
					<con:target/>
					<con:properties>
						<con:property>
							<con:name>LocalAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDescription</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PatientDiscoveryEndpoint</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSubjectID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDzipCode</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDpurposeOfDisclosure</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSSN</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdOB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDexpirationDate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDuniquePatientId</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstreetAddress</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDCity</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDcountry</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdateOfSignature</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCDesc</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectAdministrativeGender</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectBirthTime</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDAssignAuthID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayConfigDir</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PEReceivingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>mockHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPort</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationDB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationUser</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPass</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationTable</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscovery Property Transfer" type="transfer">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:PropertyTransfersStep">
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PatientDiscoveryEndPoint</con:name>
						<con:sourceType>PatientDiscoveryEndpoint</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Endpoint</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath/>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>LocalHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>ReceivingHCID</con:name>
						<con:sourceType>PDRespondingHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:receiver[1]/urn:device[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true" transferToAll="false">
						<con:name>PDQueryRequestHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>PDQueryRequestSubjectGivenName</con:name>
						<con:sourceType>SingleMatchGivenName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:given[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectFamName</con:name>
						<con:sourceType>SingleMatchFamilyName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:family[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectBirthTime</con:name>
						<con:sourceType>PDlivingSubjectBirthTime</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectBirthTime[1]/urn:value[1]/@value</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectGender</con:name>
						<con:sourceType>PDlivingSubjectAdministrativeGender</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectAdministrativeGender[1]/urn:value[1]/@code</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionSSN</con:name>
						<con:sourceType>PDSSN</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:SSN[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionUniquePatientID</con:name>
						<con:sourceType>PDuniquePatientId</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:uniquePatientId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDAssignAuthId</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:authorOrPerformer[1]/urn:assignedDevice[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers disabled="false" entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryReqSubjectAssignAuthID</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers disabled="false" entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectID</con:name>
						<con:sourceType>PDSubjectID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@extension</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:homeCommunityId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true" transferToAll="false">
						<con:name>AssertionHCIDDesc</con:name>
						<con:sourceType>LocalHCIDescription</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:description[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCIDname</con:name>
						<con:sourceType>LocalHCIDName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:name[1]</con:targetPath>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep disabled="true" name="Generate patient ID for PD" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def propertyList = testRunner.testCase.getTestStepByName( "Test Case Properties" );
def LocalAA = propertyList.getPropertyValue( "LocalAA" );
def AuditPatientID = propertyList.getPropertyValue( "AuditPatientID" );

fullPatientID = AuditPatientID + "^^^&amp;" + LocalAA + "&amp;ISO";
groovyUtils.setPropertyValue( "Test Case Properties", "FullPatientID", fullPatientID);
					</script>
				</con:config>
			</con:testStep>
			<con:testStep name="Intialize Configurations" type="groovy">
				<con:settings/>
				<con:config>
					<script>FileUtils.InitializeNHINCProperties(context, log);
					</script>
				</con:config>
			</con:testStep>
			<con:testStep name="Set Response Mode" type="groovy">
				<con:settings/>
				<con:config>
					<script>def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destDir = dataSource.getPropertyValue( "NHINGatewayConfigDir" );

FileUtils.UpdateProperty(destDir, 'gateway.properties', 'patientDiscoveryResponseMode', 'Verify',context,log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="clear correlations table" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def host = dataSource.getPropertyValue( "SUT.PatientCorrelationHost" );
def port = dataSource.getPropertyValue( "SUT.PatientCorrelationPort" );
def db = dataSource.getPropertyValue( "SUT.PatientCorrelationDB" );
def user = dataSource.getPropertyValue( "SUT.PatientCorrelationUser" );
def pass = dataSource.getPropertyValue( "SUT.PatientCorrelationPass" );
def table = dataSource.getPropertyValue( "SUT.PatientCorrelationTable" );

DBFunctions.clearTable(host, port, db, user, pass, table);</script>
				</con:config>
			</con:testStep>
			<con:testStep name="ModifyInterrnalConnectionInfoForPE" type="groovy">
				<con:settings/>
				<con:config>
					<script>//****Created by Aleena Dhar on Nov 16 2009
//“Script Library” setting in soapUI Preferences changed to path - 
//'C:\Projects\NHINC\Current\Product\IntegrationTest\scripts'
//Descrpiption - PolicyEngine Response is mocked
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destConfigFileLocation = dataSource.getPropertyValue("NHINGatewayConfigDir");
def NHINGatewayHost = dataSource.getPropertyValue("NHINGatewayHost");//**** Redbox (remove later)
//**** mockHost is localhost because Groovy script resides in local machine ****
def mockHost = dataSource.getPropertyValue("mockHost");
def mockPEURL = "http://" + mockHost + ":2222/mockPE";//http://localhost:18080/mockPE
def InitiatingHCID = dataSource.getPropertyValue( "LocalHCID" );

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, InitiatingHCID, "policyengineservice", mockPEURL, context, log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="ModifyInternalConnectionInfoUsingTestHelper" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destConfigFileLocation = dataSource.getPropertyValue("NHINGatewayConfigDir");
def NHINGatewayHost = dataSource.getPropertyValue("NHINGatewayHost");
def mockHost = dataSource.getPropertyValue("mockHost");
def patientdiscoveryURL = "https://" + NHINGatewayHost + ":8181/CONNECTGatewayTest/NhinPatientDiscoveryTestHelper";
def mockPatientDiscoveryURL = "http://" + mockHost + ":3333/EntityPatientDiscoveryMockResponse";
def LocalHCID = dataSource.getPropertyValue( "LocalHCID" );
def RemoteHCID = dataSource.getPropertyValue("PDRespondingHCID");

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "PatientDiscovery", patientdiscoveryURL, context, log)
FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "mockpatientdiscovery", mockPatientDiscoveryURL, context, log)
					</script>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscoveryRequest" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>EntityPatientDiscoveryBindingSoap</con:interface>
					<con:operation>RespondingGateway_PRPA_IN201305UV02</con:operation>
					<con:request name="EntityPatientDiscoveryRequest">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://localhost:8080/CONNECTGateway/EntityPatientDiscovery</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="I"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="2.2"/>
		   <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="2.2"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="1.1"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="1.1.2.16.840.1.113883.3.198"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.2" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="M"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="19630804" operator="I"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">Smith</urn:family>
                           <urn:given partType="GIV">Joe</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value root="1.1.2.16.840.1.113883.3.198" extension="1234" assigningAuthorityName="?"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:NhinTargetCommunities>
<!--            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>5.5</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>-->
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>2.2</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
<urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>AddrCode</urn1:code>
                  <urn1:codeSystem>AddrCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>AddrCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>AddrCode</urn1:displayName>
                  <urn1:originalText>AddrCode</urn1:originalText>
               </urn1:addressType>
               <urn1:city>AddrCity</urn1:city>
               <urn1:country>AddrCountry</urn1:country>
               <urn1:state>AddrState</urn1:state>
               <urn1:streetAddress>AddrStreet</urn1:streetAddress>
               <urn1:zipCode>AddrZip</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>06/04/1959 05:21:00</urn1:dateOfBirth>
            <urn1:explanationNonClaimantSignature>Electronic</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>false</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>false</urn1:haveSignature>
            <urn1:haveWitnessSignature>false</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Sandy</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>nameCode</urn1:code>
                  <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>nameCode</urn1:displayName>
                  <urn1:originalText>nameCode</urn1:originalText>
               </urn1:nameType>
               <urn1:secondNameOrInitials>S</urn1:secondNameOrInitials>
               <urn1:fullName>Sandy S. Smith</urn1:fullName>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>321</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>5436</urn1:extension>
               <urn1:localNumber>253-6849</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>phoneCode</urn1:code>
                  <urn1:codeSystem>phoneCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>phoneCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>phoneCode</urn1:displayName>
                  <urn1:originalText>phoneCode</urn1:originalText>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>AddrCode</urn1:code>
                  <urn1:codeSystem>AddrCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>AddrCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>AddrCode</urn1:displayName>
                  <urn1:originalText>AddrCode</urn1:originalText>
               </urn1:addressType>
               <urn1:city>Addr2City</urn1:city>
               <urn1:country>Addr2Country</urn1:country>
               <urn1:state>Addr2State</urn1:state>
               <urn1:streetAddress>Addr2Street</urn1:streetAddress>
               <urn1:zipCode>Addr2Zip</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Sammy</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>nameCode</urn1:code>
                  <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>nameCode</urn1:displayName>
                  <urn1:originalText>nameCode</urn1:originalText>
               </urn1:nameType>
               <urn1:secondNameOrInitials>s</urn1:secondNameOrInitials>
               <urn1:fullName>Sammy S. Smith</urn1:fullName>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>321</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>5424</urn1:extension>
               <urn1:localNumber>542-6823</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>phoneCode</urn1:code>
                  <urn1:codeSystem>phoneCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>phoneCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>phoneCode</urn1:displayName>
                  <urn1:originalText>phoneCode</urn1:originalText>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>addrCode</urn1:code>
                  <urn1:codeSystem>addrCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>addrCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>addrCode</urn1:displayName>
                  <urn1:originalText>addrCode</urn1:originalText>
               </urn1:addressType>
               <urn1:city>Burnell</urn1:city>
               <urn1:country>USA</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>825 North</urn1:streetAddress>
               <urn1:zipCode>32184</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Scott</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>nameCode</urn1:code>
                  <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>nameCode</urn1:displayName>
                  <urn1:originalText>nameCode</urn1:originalText>
               </urn1:nameType>
               <urn1:secondNameOrInitials>S.</urn1:secondNameOrInitials>
               <urn1:fullName>Scott S. Smith</urn1:fullName>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>321</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>8432</urn1:extension>
               <urn1:localNumber>985-2239</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>phoneCode</urn1:code>
                  <urn1:codeSystem>phoneCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>phoneCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>phoneCode</urn1:displayName>
                  <urn1:originalText>phoneCode</urn1:originalText>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Skagerberg</urn1:familyName>
                  <urn1:givenName>Karl</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>nameCode</urn1:code>
                     <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                     <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                     <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                     <urn1:displayName>nameCode</urn1:displayName>
                     <urn1:originalText>nameCode</urn1:originalText>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>S</urn1:secondNameOrInitials>
                  <urn1:fullName>Kasrl S. Skagerberg</urn1:fullName>
               </urn1:personName>
               <urn1:userName>kskagerb</urn1:userName>
               <urn1:org>
                  <urn1:description>InternalSelfTest2</urn1:description>
                  <urn1:homeCommunityId>2.2</urn1:homeCommunityId>
                  <urn1:name>InternalSelfTest2</urn1:name>
               </urn1:org>
               <urn1:roleCoded>
                  <urn1:code>307969004</urn1:code>
                  <urn1:codeSystem>2.16.840.1.113883.6.96</urn1:codeSystem>
                  <urn1:codeSystemName>SNOMED_CT</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>Public Health</urn1:displayName>
                  <urn1:originalText>Public Health</urn1:originalText>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>true</urn1:authorized>
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>PUBLICHEALTH</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Use or disclosure of Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <urn1:samlAuthnStatement>
               <urn1:authInstant>2009-04-16T13:15:39Z</urn1:authInstant>
               <urn1:sessionIndex>987</urn1:sessionIndex>
               <urn1:authContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:X509</urn1:authContextClassRef>
               <urn1:subjectLocalityAddress>158.147.185.168</urn1:subjectLocalityAddress>
               <urn1:subjectLocalityDNSName>cs.myharris.net</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <urn1:samlAuthzDecisionStatement>
               <urn1:decision>Permit</urn1:decision>
               <urn1:resource>https://158.147.185.168:8181/SamlReceiveService/SamlProcessWS</urn1:resource>
               <urn1:action>EXECUTE</urn1:action>
               <urn1:evidence>
                  <urn1:assertion>
                     <urn1:id>40df7c0a-ff3e-4b26-baeb-f2910f6d05a9</urn1:id>
                     <urn1:issueInstant>2009-04-16T13:10:39.093Z</urn1:issueInstant>
                     <urn1:version>2.0</urn1:version>
                     <urn1:issuerFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</urn1:issuerFormat>
                     <urn1:issuer>CN=SAML User,OU=Harris,O=HITS,L=Melbourne,ST=FL,C=US</urn1:issuer>
                     <urn1:conditions>
                        <urn1:notBefore>2009-04-16T13:10:39.093Z</urn1:notBefore>
                        <urn1:notOnOrAfter>2009-12-31T12:00:00.000Z</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <urn1:accessConsentPolicy>urn:oid:1.2.3.4</urn1:accessConsentPolicy>
                     <urn1:instanceAccessConsentPolicy>urn:oid:1.2.3.4.123456789</urn1:instanceAccessConsentPolicy>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
         </urn:assertion>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion disabled="true" type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:assertion type="XPath Match">
							<con:configuration/>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="Policy Engine Mock" type="mockresponse">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" startStep="EntityPatientDiscoveryRequest" xsi:type="con:MockResponseStep">
					<con:interface>AdapterPolicyEngineBindingSoap</con:interface>
					<con:operation>CheckPolicy</con:operation>
					<con:path>/mockPE</con:path>
					<con:port>2222</con:port>
					<con:timeout>30000</con:timeout>
					<con:response>
						<con:settings/>
						<con:responseContent><![CDATA[
							<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns15:CheckPolicyResponse xmlns:ns2="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:ns3="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:ns4="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:ns5="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:ns6="http://www.hhs.gov/healthit/nhin/cdc" xmlns:ns7="http://nhinc.services.com/schema/auditmessage" xmlns:ns8="http://www.w3.org/2005/08/addressing" xmlns:ns9="http://docs.oasis-open.org/wsn/b-2" xmlns:ns10="urn:ihe:iti:xds-b:2007" xmlns:ns11="urn:gov:hhs:fha:nhinc:common:subscriptionb2overridefordocuments" xmlns:ns12="http://docs.oasis-open.org/wsrf/bf-2" xmlns:ns13="http://docs.oasis-open.org/wsn/t-1" xmlns:ns14="urn:oasis:names:tc:xacml:2.0:policy:schema:os" xmlns:ns15="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:ns16="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns17="urn:gov:hhs:fha:nhinc:common:subscriptionb2overrideforcdc" xmlns:ns18="urn:oasis:names:tc:xacml:2.0:context:schema:os" xmlns:ns19="http://schemas.xmlsoap.org/ws/2004/08/addressing">
         <ns15:response>
            <ns18:Result>
               <ns18:Decision>Permit</ns18:Decision>
            </ns18:Result>
         </ns15:response>
      </ns15:CheckPolicyResponse>
   </S:Body>
</S:Envelope>]]></con:responseContent>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
					</con:response>
					<con:assertion name="AuthnStatementAuthnInstant " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='authInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authInstant'
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-instant';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementSessionIndex" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='sessionIndex';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:sessionIndex';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:session-index';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementAthnContextClassRef " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='authContextClassRef';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authContextClassRef';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-context-class-ref';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementSubjectLocalityAddress " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='subjectLocalityAddress';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityAddress';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:ip-address';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementDNSName " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='subjectLocalityDNSName';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityDNSName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:dns-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserPersonName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='personname';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:userName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserOrganizationName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user organization';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:name';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-organization-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCode" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role coded';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code';
def XacmlAttributeId='urn:oasis:names:tc:xacml:2.0:subject:role';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCodeSystem " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role system';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCodeSystemName " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role system name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCodeDiplayName " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role display name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-description';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCode" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCode';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:purposeofuse';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCodeSystem" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCodeSystem';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCodeSystemName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCodeSystemName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCodeDisplayName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCodeDisplayName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementDecision" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementDecision';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementResource" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementResource';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementAction" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementAction';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:action';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
//log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);
def ExpectedValue='EXECUTE';
//log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (ExpectedValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionID " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionID';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionIssueInstant" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssueInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionVersion" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionVersion';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionIssuer" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssuer';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotBefore" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotBefore';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2001-01-01T06:00:00.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2009-05-07T02:00:17.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentReference " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentReference';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentType " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentType';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContent " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="HomeCommunityId" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='home-community-id';
def AssertionXpath='//ec:RespondingGateway_PRPA_IN201305UV02Request[1]/ec:PRPA_IN201305UV02[1]/ec:receiver[1]/ec:device[1]/ec:id[1]/@root';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:home-community-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("EntityPatientDiscoveryRequest");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:hl7-org:v3';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="OrganizationId" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='organizationid';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:homeCommunityId';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:organization-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="PatientId" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PatientId';
def XacmlAttributeId='http://www.hhs.gov/healthit/nhin#subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';
mockRequestHolder.namespaces['hl7'] = 'urn:hl7-org:v3';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValueExtension = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@extension"]
def ExpectedExtension = '1234';
log.info('XacmlAttributeValue(' + FieldName + '@extension)=' + XacmlValueExtension);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) =&gt; ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueExtension==ExpectedExtension);

def XacmlValueRoot = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@root"]
def ExpectedRoot = '2.2.2';
log.info('XacmlAttributeValue(' + FieldName + '@root)=' + XacmlValueRoot);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) =&gt; ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueRoot==ExpectedRoot);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'urn:hl7-org:v3#II';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionAccessConsent" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:accessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:instanceAccessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-instance-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns19='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns18:CheckPolicyRequest[1]/ns18:request[1]/ns19:Subject[2]/ns19:Attribute[1]/@AttributeId</path>
							<content>urn:gov:hhs:fha:nhinc:home-community-id</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:assertion name="assigning authority" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns18='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns15='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns15:CheckPolicyRequest[1]/ns15:request[1]/ns18:Resource[1]/ns18:Attribute[1]/ns18:AttributeValue[1]</path>
							<content>1.1.2.16.840.1.113883.3.198</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:assertion name="local patient id" type="XPath Match">
						<con:configuration>
							<path>declare namespace xacml='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace adapter='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//xacml:Resource/xacml:Attribute[@AttributeId='urn:oasis:names:tc:xacml:1.0:resource:resource-id']/xacml:AttributeValue</path>
							<content>1234</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
				</con:config>
			</con:testStep>
			<con:testStep name="NHINCProxyPatientDiscoveryMockResponse" type="mockresponse">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" startStep="EntityPatientDiscoveryRequest" xsi:type="con:MockResponseStep">
					<con:interface>NhincProxyPatientDiscoveryBinding</con:interface>
					<con:operation>Proxy_PRPA_IN201305UV</con:operation>
					<con:path>/EntityPatientDiscoveryMockResponse</con:path>
					<con:port>3333</con:port>
					<con:timeout>40000</con:timeout>
					<con:response>
						<con:settings/>
						<con:responseContent><![CDATA[
							<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns3:PRPA_IN201306UV02 ITSVersion="XML_1.0" xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns3="urn:hl7-org:v3" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:patientcorrelationfacade">
         <ns3:id extension="4191797c:1259356875e:-7c2d" root="1.1.1"/>
         <ns3:creationTime value="2009121522276"/>
         <ns3:interactionId extension="PRPA_IN201306UV" root="2.16.840.1.113883.1.6"/>
         <ns3:processingCode code="P"/>
         <ns3:processingModeCode code="R"/>
         <ns3:acceptAckCode code="AL"/>
         <ns3:receiver typeCode="RCV">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:receiver>
         <ns3:sender typeCode="SND">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:sender>
         <ns3:acknowledgement>
            <ns3:typeId extension="PRPA_IN201305UV02" root="2.16.840.1.113883.1.6"/>
            <ns3:typeCode code="AA"/>
            <ns3:targetMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:acknowledgement>
         <ns3:controlActProcess moodCode="EVN" classCode="">
            <ns3:code codeSystem="2.16.840.1.113883.1.6" code="PRPA_TE201306UV"/>
            <ns3:subject typeCode="SUBJ">
               <ns3:registrationEvent moodCode="" classCode="">
                  <ns3:id nullFlavor="NA"/>
                  <ns3:statusCode code="active"/>
                  <ns3:subject1 typeCode="">
                     <ns3:patient classCode="PAT">
                        <ns3:id extension="1234" root="2.2.2"/>
                        <ns3:statusCode code="SD"/>
                        <ns3:patientPerson>
                           <ns3:name>
                              <ns3:family partType="FAM">Smith</ns3:family>
                              <ns3:given partType="GIV">Joe</ns3:given>
                           </ns3:name>
                           <ns3:administrativeGenderCode code="M"/>
                           <ns3:birthTime value="19560301"/>
                           <ns3:addr>
                              <ns3:city>Orlando</ns3:city>
                              <ns3:state>FL</ns3:state>
                              <ns3:postalCode>98765</ns3:postalCode>
                           </ns3:addr>
                        </ns3:patientPerson>
                        <ns3:providerOrganization determinerCode="" classCode="">
                           <ns3:id root="2.2.2"/>
                           <ns3:contactParty xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        </ns3:providerOrganization>
                        <ns3:subjectOf1>
                           <ns3:queryMatchObservation moodCode="" classCode="">
                              <ns3:code code="IHE_PDQ"/>
                              <ns3:value xsi:type="ns3:INT" value="100" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                           </ns3:queryMatchObservation>
                        </ns3:subjectOf1>
                     </ns3:patient>
                  </ns3:subject1>
                  <ns3:custodian typeCode="">
                     <ns3:assignedEntity classCode="">
                        <ns3:id root="1.1.2.16.840.1.113883.3.198"/>
                     </ns3:assignedEntity>
                  </ns3:custodian>
               </ns3:registrationEvent>
            </ns3:subject>
            <ns3:queryAck>
               <ns3:queryId extension="-abd3453dcd24wkkks545" root="1.1"/>
               <ns3:queryResponseCode code="OK"/>
               <ns3:resultTotalQuantity value="1"/>
               <ns3:resultCurrentQuantity value="1"/>
               <ns3:resultRemainingQuantity value="0"/>
            </ns3:queryAck>
            <ns3:queryByParameter xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:controlActProcess>
      </ns3:PRPA_IN201306UV02>
   </S:Body>
</S:Envelope>]]></con:responseContent>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
					</con:response>
					<con:assertion disabled="true" name="NoMatchGivenName" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns1='urn:hl7-org:v3';
//ns1:Proxy_PRPA_IN201305UVProxyRequest[1]/ns1:PRPA_IN201305UV02[1]/ns1:controlActProcess[1]/ns1:queryByParameter[1]/ns1:parameterList[1]/ns1:livingSubjectName[1]/ns1:value[1]/ns1:given[1]</path>
							<content>${NoMatchGivenName}</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="NoMatchFamilyName" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns1='urn:hl7-org:v3';
//ns1:Proxy_PRPA_IN201305UVProxyRequest[1]/ns1:PRPA_IN201305UV02[1]/ns1:controlActProcess[1]/ns1:queryByParameter[1]/ns1:parameterList[1]/ns1:livingSubjectName[1]/ns1:value[1]/ns1:family[1]</path>
							<content>${NoMatchFamilyName}</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:host/>
				</con:config>
			</con:testStep>
			<con:testStep name="count correlations (1)" type="groovy">
				<con:settings/>
				<con:config>
					<script>import groovy.sql.Sql;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def host = dataSource.getPropertyValue( "SUT.PatientCorrelationHost" );
def port = dataSource.getPropertyValue( "SUT.PatientCorrelationPort" );
def db = dataSource.getPropertyValue( "SUT.PatientCorrelationDB" );
def user = dataSource.getPropertyValue( "SUT.PatientCorrelationUser" );
def pass = dataSource.getPropertyValue( "SUT.PatientCorrelationPass" );
def table = dataSource.getPropertyValue( "SUT.PatientCorrelationTable" );
def PatientId =  dataSource.getPropertyValue( "PDSubjectID" );



int countRows(host, port, dbName, user, password, table, patId) {

   def sqlConnect = 'jdbc:mysql://' + host + ':' + port + '/' + dbName;
   def sql = Sql.newInstance(sqlConnect, user, password, "com.mysql.jdbc.Driver");
   def count = 0;
   sql.eachRow("select count(*) from " + table + " where PatientId = '" + patId + "'") { row -&gt;
	count = row[0];
   }
   return count;
}

def count = countRows(host, port, db, user, pass, table, PatientId);
assert count == 1;
					</script>
				</con:config>
			</con:testStep>
			<con:properties/>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="93a5b7be-08f6-4b81-8311-1af1d450eb73" keepSession="false" maxResults="0" name="EntityPatientDiscoveryNoPatIDWithPermitMockPE" searchProperties="true">
			<con:settings/>
			<con:testStep name="EntityPatientDiscovery Test Case Properties" type="properties">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" createMissingOnLoad="true" discardValuesOnSave="true" saveFirst="true" xsi:type="con:PropertiesStep">
					<con:source>C:/Projects/NHINC/Current/Product/SoapUI_Test/RegressionSuite/EntityPatientDiscovery.properties</con:source>
					<con:target/>
					<con:properties>
						<con:property>
							<con:name>LocalAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDescription</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PatientDiscoveryEndpoint</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSubjectID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDzipCode</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDpurposeOfDisclosure</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSSN</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdOB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDexpirationDate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDuniquePatientId</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstreetAddress</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDCity</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDcountry</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdateOfSignature</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCDesc</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectAdministrativeGender</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectBirthTime</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDAssignAuthID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayConfigDir</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PEReceivingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>mockHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPort</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationDB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationUser</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPass</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationTable</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscovery Property Transfer" type="transfer">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:PropertyTransfersStep">
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PatientDiscoveryEndPoint</con:name>
						<con:sourceType>PatientDiscoveryEndpoint</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Endpoint</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath/>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>LocalHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>ReceivingHCID</con:name>
						<con:sourceType>PDRespondingHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:receiver[1]/urn:device[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true" transferToAll="false">
						<con:name>PDQueryRequestHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>PDQueryRequestSubjectGivenName</con:name>
						<con:sourceType>SingleMatchGivenName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:given[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectFamName</con:name>
						<con:sourceType>SingleMatchFamilyName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:family[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectBirthTime</con:name>
						<con:sourceType>PDlivingSubjectBirthTime</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectBirthTime[1]/urn:value[1]/@value</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectGender</con:name>
						<con:sourceType>PDlivingSubjectAdministrativeGender</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectAdministrativeGender[1]/urn:value[1]/@code</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionSSN</con:name>
						<con:sourceType>PDSSN</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:SSN[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionUniquePatientID</con:name>
						<con:sourceType>PDuniquePatientId</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:uniquePatientId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDAssignAuthId</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:authorOrPerformer[1]/urn:assignedDevice[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers disabled="true" entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryReqSubjectAssignAuthID</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers disabled="true" entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectID</con:name>
						<con:sourceType>PDSubjectID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@extension</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:homeCommunityId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true" transferToAll="false">
						<con:name>AssertionHCIDDesc</con:name>
						<con:sourceType>LocalHCIDescription</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:description[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCIDname</con:name>
						<con:sourceType>LocalHCIDName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:name[1]</con:targetPath>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep name="Intialize Configurations" type="groovy">
				<con:settings/>
				<con:config>
					<script>FileUtils.InitializeNHINCProperties(context, log);
					</script>
				</con:config>
			</con:testStep>
			<con:testStep name="Set Response Mode" type="groovy">
				<con:settings/>
				<con:config>
					<script>def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destDir = dataSource.getPropertyValue( "NHINGatewayConfigDir" );

FileUtils.UpdateProperty(destDir, 'gateway.properties', 'patientDiscoveryResponseMode', 'Verify',context,log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="clear correlations table" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def host = dataSource.getPropertyValue( "SUT.PatientCorrelationHost" );
def port = dataSource.getPropertyValue( "SUT.PatientCorrelationPort" );
def db = dataSource.getPropertyValue( "SUT.PatientCorrelationDB" );
def user = dataSource.getPropertyValue( "SUT.PatientCorrelationUser" );
def pass = dataSource.getPropertyValue( "SUT.PatientCorrelationPass" );
def table = dataSource.getPropertyValue( "SUT.PatientCorrelationTable" );

DBFunctions.clearTable(host, port, db, user, pass, table);</script>
				</con:config>
			</con:testStep>
			<con:testStep name="ModifyInterrnalConnectionInfoForPE" type="groovy">
				<con:settings/>
				<con:config>
					<script>//****Created by Aleena Dhar on Nov 16 2009
//“Script Library” setting in soapUI Preferences changed to path - 
//'C:\Projects\NHINC\Current\Product\IntegrationTest\scripts'
//Descrpiption - PolicyEngine Response is mocked
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destConfigFileLocation = dataSource.getPropertyValue("NHINGatewayConfigDir");
def NHINGatewayHost = dataSource.getPropertyValue("NHINGatewayHost");//**** Redbox (remove later)
//**** mockHost is localhost because Groovy script resides in local machine ****
def mockHost = dataSource.getPropertyValue("mockHost");
def mockPEURL = "http://" + mockHost + ":2222/mockPE";//http://localhost:18080/mockPE
def InitiatingHCID = dataSource.getPropertyValue( "LocalHCID" );

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, InitiatingHCID, "policyengineservice", mockPEURL, context, log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="ModifyInternalConnectionInfoUsingTestHelper" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destConfigFileLocation = dataSource.getPropertyValue("NHINGatewayConfigDir");
def NHINGatewayHost = dataSource.getPropertyValue("NHINGatewayHost");
def mockHost = dataSource.getPropertyValue("mockHost");
def patientdiscoveryURL = "https://" + NHINGatewayHost + ":8181/CONNECTGatewayTest/NhinPatientDiscoveryTestHelper";
def mockPatientDiscoveryURL = "http://" + mockHost + ":3333/EntityPatientDiscoveryMockResponse";
def LocalHCID = dataSource.getPropertyValue( "LocalHCID" );
def RemoteHCID = dataSource.getPropertyValue("PDRespondingHCID");

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "PatientDiscovery", patientdiscoveryURL, context, log)
FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "mockpatientdiscovery", mockPatientDiscoveryURL, context, log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscoveryRequest" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>EntityPatientDiscoveryBindingSoap</con:interface>
					<con:operation>RespondingGateway_PRPA_IN201305UV02</con:operation>
					<con:request name="EntityPatientDiscoveryRequest">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://localhost:8080/CONNECTGateway/EntityPatientDiscovery</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="I"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
		  <urn:id root="2.2"/>
		    <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="2.2"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="1.1"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="1.1.2.16.840.1.113883.3.198"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.2" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="M"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="19630804" operator="I"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">Smith</urn:family>
                           <urn:given partType="GIV">Joe</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value root="" extension="" assigningAuthorityName="?"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:NhinTargetCommunities>
<!--            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>5.5</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>-->
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>2.2</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
<urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>AddrCode</urn1:code>
                  <urn1:codeSystem>AddrCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>AddrCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>AddrCode</urn1:displayName>
                  <urn1:originalText>AddrCode</urn1:originalText>
               </urn1:addressType>
               <urn1:city>AddrCity</urn1:city>
               <urn1:country>AddrCountry</urn1:country>
               <urn1:state>AddrState</urn1:state>
               <urn1:streetAddress>AddrStreet</urn1:streetAddress>
               <urn1:zipCode>AddrZip</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>06/04/1959 05:21:00</urn1:dateOfBirth>
            <urn1:explanationNonClaimantSignature>Electronic</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>false</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>false</urn1:haveSignature>
            <urn1:haveWitnessSignature>false</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Sandy</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>nameCode</urn1:code>
                  <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>nameCode</urn1:displayName>
                  <urn1:originalText>nameCode</urn1:originalText>
               </urn1:nameType>
               <urn1:secondNameOrInitials>S</urn1:secondNameOrInitials>
               <urn1:fullName>Sandy S. Smith</urn1:fullName>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>321</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>5436</urn1:extension>
               <urn1:localNumber>253-6849</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>phoneCode</urn1:code>
                  <urn1:codeSystem>phoneCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>phoneCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>phoneCode</urn1:displayName>
                  <urn1:originalText>phoneCode</urn1:originalText>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>AddrCode</urn1:code>
                  <urn1:codeSystem>AddrCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>AddrCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>AddrCode</urn1:displayName>
                  <urn1:originalText>AddrCode</urn1:originalText>
               </urn1:addressType>
               <urn1:city>Addr2City</urn1:city>
               <urn1:country>Addr2Country</urn1:country>
               <urn1:state>Addr2State</urn1:state>
               <urn1:streetAddress>Addr2Street</urn1:streetAddress>
               <urn1:zipCode>Addr2Zip</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Sammy</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>nameCode</urn1:code>
                  <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>nameCode</urn1:displayName>
                  <urn1:originalText>nameCode</urn1:originalText>
               </urn1:nameType>
               <urn1:secondNameOrInitials>s</urn1:secondNameOrInitials>
               <urn1:fullName>Sammy S. Smith</urn1:fullName>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>321</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>5424</urn1:extension>
               <urn1:localNumber>542-6823</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>phoneCode</urn1:code>
                  <urn1:codeSystem>phoneCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>phoneCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>phoneCode</urn1:displayName>
                  <urn1:originalText>phoneCode</urn1:originalText>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>addrCode</urn1:code>
                  <urn1:codeSystem>addrCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>addrCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>addrCode</urn1:displayName>
                  <urn1:originalText>addrCode</urn1:originalText>
               </urn1:addressType>
               <urn1:city>Burnell</urn1:city>
               <urn1:country>USA</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>825 North</urn1:streetAddress>
               <urn1:zipCode>32184</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Scott</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>nameCode</urn1:code>
                  <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>nameCode</urn1:displayName>
                  <urn1:originalText>nameCode</urn1:originalText>
               </urn1:nameType>
               <urn1:secondNameOrInitials>S.</urn1:secondNameOrInitials>
               <urn1:fullName>Scott S. Smith</urn1:fullName>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>321</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>8432</urn1:extension>
               <urn1:localNumber>985-2239</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>phoneCode</urn1:code>
                  <urn1:codeSystem>phoneCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>phoneCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>phoneCode</urn1:displayName>
                  <urn1:originalText>phoneCode</urn1:originalText>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Skagerberg</urn1:familyName>
                  <urn1:givenName>Karl</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>nameCode</urn1:code>
                     <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                     <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                     <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                     <urn1:displayName>nameCode</urn1:displayName>
                     <urn1:originalText>nameCode</urn1:originalText>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>S</urn1:secondNameOrInitials>
                  <urn1:fullName>Kasrl S. Skagerberg</urn1:fullName>
               </urn1:personName>
               <urn1:userName>kskagerb</urn1:userName>
               <urn1:org>
                  <urn1:description>InternalSelfTest2</urn1:description>
                  <urn1:homeCommunityId>2.2</urn1:homeCommunityId>
                  <urn1:name>InternalSelfTest2</urn1:name>
               </urn1:org>
               <urn1:roleCoded>
                  <urn1:code>307969004</urn1:code>
                  <urn1:codeSystem>2.16.840.1.113883.6.96</urn1:codeSystem>
                  <urn1:codeSystemName>SNOMED_CT</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>Public Health</urn1:displayName>
                  <urn1:originalText>Public Health</urn1:originalText>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>true</urn1:authorized>
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>PUBLICHEALTH</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Use or disclosure of Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <urn1:samlAuthnStatement>
               <urn1:authInstant>2009-04-16T13:15:39Z</urn1:authInstant>
               <urn1:sessionIndex>987</urn1:sessionIndex>
               <urn1:authContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:X509</urn1:authContextClassRef>
               <urn1:subjectLocalityAddress>158.147.185.168</urn1:subjectLocalityAddress>
               <urn1:subjectLocalityDNSName>cs.myharris.net</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <urn1:samlAuthzDecisionStatement>
               <urn1:decision>Permit</urn1:decision>
               <urn1:resource>https://158.147.185.168:8181/SamlReceiveService/SamlProcessWS</urn1:resource>
               <urn1:action>EXECUTE</urn1:action>
               <urn1:evidence>
                  <urn1:assertion>
                     <urn1:id>40df7c0a-ff3e-4b26-baeb-f2910f6d05a9</urn1:id>
                     <urn1:issueInstant>2009-04-16T13:10:39.093Z</urn1:issueInstant>
                     <urn1:version>2.0</urn1:version>
                     <urn1:issuerFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</urn1:issuerFormat>
                     <urn1:issuer>CN=SAML User,OU=Harris,O=HITS,L=Melbourne,ST=FL,C=US</urn1:issuer>
                     <urn1:conditions>
                        <urn1:notBefore>2009-04-16T13:10:39.093Z</urn1:notBefore>
                        <urn1:notOnOrAfter>2009-12-31T12:00:00.000Z</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <urn1:accessConsentPolicy>urn:oid:1.2.3.4</urn1:accessConsentPolicy>
                     <urn1:instanceAccessConsentPolicy>urn:oid:1.2.3.4.123456789</urn1:instanceAccessConsentPolicy>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
         </urn:assertion>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion disabled="true" type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:assertion type="XPath Match">
							<con:configuration/>
						</con:assertion>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="Policy Engine Mock" type="mockresponse">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" startStep="EntityPatientDiscoveryRequest" xsi:type="con:MockResponseStep">
					<con:interface>AdapterPolicyEngineBindingSoap</con:interface>
					<con:operation>CheckPolicy</con:operation>
					<con:path>/mockPE</con:path>
					<con:port>2222</con:port>
					<con:timeout>30000</con:timeout>
					<con:response>
						<con:settings/>
						<con:responseContent><![CDATA[
							<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns15:CheckPolicyResponse xmlns:ns2="urn:oasis:names:tc:ebxml-regrep:xsd:rim:3.0" xmlns:ns3="urn:oasis:names:tc:ebxml-regrep:xsd:rs:3.0" xmlns:ns4="urn:oasis:names:tc:ebxml-regrep:xsd:lcm:3.0" xmlns:ns5="urn:oasis:names:tc:ebxml-regrep:xsd:query:3.0" xmlns:ns6="http://www.hhs.gov/healthit/nhin/cdc" xmlns:ns7="http://nhinc.services.com/schema/auditmessage" xmlns:ns8="http://www.w3.org/2005/08/addressing" xmlns:ns9="http://docs.oasis-open.org/wsn/b-2" xmlns:ns10="urn:ihe:iti:xds-b:2007" xmlns:ns11="urn:gov:hhs:fha:nhinc:common:subscriptionb2overridefordocuments" xmlns:ns12="http://docs.oasis-open.org/wsrf/bf-2" xmlns:ns13="http://docs.oasis-open.org/wsn/t-1" xmlns:ns14="urn:oasis:names:tc:xacml:2.0:policy:schema:os" xmlns:ns15="urn:gov:hhs:fha:nhinc:common:nhinccommonadapter" xmlns:ns16="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns17="urn:gov:hhs:fha:nhinc:common:subscriptionb2overrideforcdc" xmlns:ns18="urn:oasis:names:tc:xacml:2.0:context:schema:os" xmlns:ns19="http://schemas.xmlsoap.org/ws/2004/08/addressing">
         <ns15:response>
            <ns18:Result>
               <ns18:Decision>Permit</ns18:Decision>
            </ns18:Result>
         </ns15:response>
      </ns15:CheckPolicyResponse>
   </S:Body>
</S:Envelope>]]></con:responseContent>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
					</con:response>
					<con:assertion name="AuthnStatementAuthnInstant " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='authInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authInstant'
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-instant';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementSessionIndex" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='sessionIndex';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:sessionIndex';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:session-index';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementAthnContextClassRef " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='authContextClassRef';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:authContextClassRef';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authn-statement:auth-context-class-ref';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementSubjectLocalityAddress " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='subjectLocalityAddress';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityAddress';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:ip-address';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthnStatementDNSName " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='subjectLocalityDNSName';
def AssertionXpath='//ec:assertion/nc:samlAuthnStatement/nc:subjectLocalityDNSName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:authn-locality:dns-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserPersonName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='personname';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:userName';
def XacmlAttributeId='urn:oasis:names:tc:xacml:1.0:subject:subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserOrganizationName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user organization';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:name';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-organization-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCode" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role coded';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code';
def XacmlAttributeId='urn:oasis:names:tc:xacml:2.0:subject:role';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCodeSystem " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role system';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCodeSystemName " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role system name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="UserRoleCodeDiplayName " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='user role display name';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:roleCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:user-role-description';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCode" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCode';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:code';
//def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:purposeofuse';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCodeSystem" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCodeSystem';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystem';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCodeSystemName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCodeSystemName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:codeSystemName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-code-system-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="PurposeForUseCodeDisplayName" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PurposeForUseCodeDisplayName';
def AssertionXpath='//ec:assertion/nc:purposeOfDisclosureCoded/nc:displayName';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:purpose-of-use-display-name';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementDecision" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementDecision';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:decision';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-decision';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementResource" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementResource';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:resource';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-resource';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementAction" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementAction';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:action';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-action';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
//log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);
def ExpectedValue='EXECUTE';
//log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (ExpectedValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionID " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionID';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:id';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-id';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionIssueInstant" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssueInstant';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issueInstant';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issue-instant';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionVersion" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionVersion';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:version';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-version';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="AuthzDecisionStatementEvidenceAssertionIssuer" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionIssuer';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:issuer';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-issuer';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotBefore" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotBefore';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notBefore';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-before';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2001-01-01T06:00:00.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionConditionsNotOnOrAfter';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:conditions/nc:notOnOrAfter';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-not-on-or-after';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
//assert (AssertionValue==XacmlValue);
assert (XacmlValue == '2009-05-07T02:00:17.000Z')

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#date';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentReference " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentReference';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentReference';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-reference';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContentType " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContentType';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:contentType';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content-type';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionContent " type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionContent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:content';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-content';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="HomeCommunityId" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='home-community-id';
def AssertionXpath='//ec:RespondingGateway_PRPA_IN201305UV02Request[1]/ec:PRPA_IN201305UV02[1]/ec:receiver[1]/ec:device[1]/ec:id[1]/@root';

def XacmlAttributeId='urn:gov:hhs:fha:nhinc:home-community-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("EntityPatientDiscoveryRequest");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:hl7-org:v3';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#string';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion name="OrganizationId" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='organizationid';
def AssertionXpath='//ec:assertion/nc:userInfo/nc:org/nc:homeCommunityId';
def XacmlAttributeId='urn:oasis:names:tc:xspa:1.0:subject:organization-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:Subject/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="PatientId" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='PatientId';
def XacmlAttributeId='http://www.hhs.gov/healthit/nhin#subject-id';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';
mockRequestHolder.namespaces['hl7'] = 'urn:hl7-org:v3';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValueExtension = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@extension"]
def ExpectedExtension = '1234';
log.info('XacmlAttributeValue(' + FieldName + '@extension)=' + XacmlValueExtension);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) =&gt; ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueExtension==ExpectedExtension);

def XacmlValueRoot = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue/hl7:PatientId/@root"]
def ExpectedRoot = '2.2.2';
log.info('XacmlAttributeValue(' + FieldName + '@root)=' + XacmlValueRoot);
//log.info('XacmlAttributeValue(' + FieldName + '@extension) == ' + 'AssertionValue(' + FieldName + '@extension) =&gt; ' + (AssertionValue==XacmlValueExtension));
assert(XacmlValueRoot==ExpectedRoot);

def ActualDataType = mockRequestHolder["//xacml:Resource/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'urn:hl7-org:v3#II';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionAccessConsent" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:accessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent" type="GroovyScriptAssertion">
						<con:configuration>
							<scriptText>def FieldName='AuthzDecisionStatementEvidenceAssertionInstanceAccessConsent';
def AssertionXpath='//ec:assertion/nc:samlAuthzDecisionStatement/nc:evidence/nc:assertion/nc:instanceAccessConsentPolicy';
def XacmlAttributeId='urn:gov:hhs:fha:nhinc:saml-authz-decision-statement-evidence-assertion-instance-access-consent';
def XacmlAttributeParent='Resource';

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

log.debug('Checking ' + FieldName);

log.debug("access initial request message");
def requestTestStep = context.getTestRunner().testCase.getTestStepByName("Policy Engine Mock");
def sourceRequestHolder = groovyUtils.getXmlHolder(requestTestStep.getProperty("request").value);

sourceRequestHolder.namespaces['ec'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
sourceRequestHolder.namespaces['nc'] = 'urn:gov:hhs:fha:nhinc:common:nhinccommon';

def AssertionCount = sourceRequestHolder["count(" + AssertionXpath + ")"];
log.info('AssertionCount(' + FieldName + ')=' + AssertionCount);
assert(AssertionCount=="1");

def AssertionValue = sourceRequestHolder[AssertionXpath];
log.info('AssertionValue(' + FieldName + ')=' + AssertionValue);

def mockRequestHolder = groovyUtils.getXmlHolder( messageExchange.requestContent );
mockRequestHolder.namespaces['xacml'] = 'urn:oasis:names:tc:xacml:2.0:context:schema:os';

def XacmlAttributeCount = mockRequestHolder["count(//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "'])"];
log.info('XacmlAttributeCount(' + FieldName + ')='+XacmlAttributeCount);
assert(XacmlAttributeCount=="1");

def XacmlValue = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/xacml:AttributeValue"];
log.info('XacmlAttributeValue(' + FieldName + ')=' + XacmlValue);

log.info('XacmlAttributeValue(' + FieldName + ') == ' + 'AssertionValue(' + FieldName + ') =&gt; ' + (AssertionValue==XacmlValue));
assert (AssertionValue==XacmlValue);

def ActualDataType = mockRequestHolder["//xacml:" + XacmlAttributeParent + "/xacml:Attribute[@AttributeId='" + XacmlAttributeId + "']/@DataType"];
def ExpectedDataType = 'http://www.w3.org/2001/XMLSchema#anyURI';
assert(ActualDataType==ExpectedDataType);

log.debug('Finished checking ' + FieldName);
							</scriptText>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns19='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns18='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns18:CheckPolicyRequest[1]/ns18:request[1]/ns19:Subject[2]/ns19:Attribute[1]/@AttributeId</path>
							<content>urn:gov:hhs:fha:nhinc:home-community-id</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="assigning authority" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns18='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace ns15='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//ns15:CheckPolicyRequest[1]/ns15:request[1]/ns18:Resource[1]/ns18:Attribute[1]/ns18:AttributeValue[1]</path>
							<content>1.1.2.16.840.1.113883.3.198</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="local patient id" type="XPath Match">
						<con:configuration>
							<path>declare namespace xacml='urn:oasis:names:tc:xacml:2.0:context:schema:os';
declare namespace adapter='urn:gov:hhs:fha:nhinc:common:nhinccommonadapter';
//xacml:Resource/xacml:Attribute[@AttributeId='urn:oasis:names:tc:xacml:1.0:resource:resource-id']/xacml:AttributeValue</path>
							<content>1234</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
				</con:config>
			</con:testStep>
			<con:testStep name="NHINCProxyPatientDiscoveryMockResponse" type="mockresponse">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" startStep="EntityPatientDiscoveryRequest" xsi:type="con:MockResponseStep">
					<con:interface>NhincProxyPatientDiscoveryBinding</con:interface>
					<con:operation>Proxy_PRPA_IN201305UV</con:operation>
					<con:path>/EntityPatientDiscoveryMockResponse</con:path>
					<con:port>3333</con:port>
					<con:timeout>30000</con:timeout>
					<con:response>
						<con:settings/>
						<con:responseContent><![CDATA[
							<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns3:PRPA_IN201306UV02 ITSVersion="XML_1.0" xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns3="urn:hl7-org:v3" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:patientcorrelationfacade">
         <ns3:id extension="4191797c:1259356875e:-7c2d" root="1.1.1"/>
         <ns3:creationTime value="2009121522276"/>
         <ns3:interactionId extension="PRPA_IN201306UV" root="2.16.840.1.113883.1.6"/>
         <ns3:processingCode code="P"/>
         <ns3:processingModeCode code="R"/>
         <ns3:acceptAckCode code="AL"/>
         <ns3:receiver typeCode="RCV">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:receiver>
         <ns3:sender typeCode="SND">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:sender>
         <ns3:acknowledgement>
            <ns3:typeId extension="PRPA_IN201305UV02" root="2.16.840.1.113883.1.6"/>
            <ns3:typeCode code="AA"/>
            <ns3:targetMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:acknowledgement>
         <ns3:controlActProcess moodCode="EVN" classCode="">
            <ns3:code codeSystem="2.16.840.1.113883.1.6" code="PRPA_TE201306UV"/>
            <ns3:subject typeCode="SUBJ">
               <ns3:registrationEvent moodCode="" classCode="">
                  <ns3:id nullFlavor="NA"/>
                  <ns3:statusCode code="active"/>
                  <ns3:subject1 typeCode="">
                     <ns3:patient classCode="PAT">
                        <ns3:id extension="1234" root="2.2.2"/>
                        <ns3:statusCode code="SD"/>
                        <ns3:patientPerson>
                           <ns3:name>
                              <ns3:family partType="FAM">Smith</ns3:family>
                              <ns3:given partType="GIV">Joe</ns3:given>
                           </ns3:name>
                           <ns3:administrativeGenderCode code="M"/>
                           <ns3:birthTime value="19560301"/>
                           <ns3:addr>
                              <ns3:city>Orlando</ns3:city>
                              <ns3:state>FL</ns3:state>
                              <ns3:postalCode>98765</ns3:postalCode>
                           </ns3:addr>
                        </ns3:patientPerson>
                        <ns3:providerOrganization determinerCode="" classCode="">
                           <ns3:id root="2.2.2"/>
                           <ns3:contactParty xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        </ns3:providerOrganization>
                        <ns3:subjectOf1>
                           <ns3:queryMatchObservation moodCode="" classCode="">
                              <ns3:code code="IHE_PDQ"/>
                              <ns3:value xsi:type="ns3:INT" value="100" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                           </ns3:queryMatchObservation>
                        </ns3:subjectOf1>
                     </ns3:patient>
                  </ns3:subject1>
                  <ns3:custodian typeCode="">
                     <ns3:assignedEntity classCode="">
                        <ns3:id root="2.2.2"/>
                     </ns3:assignedEntity>
                  </ns3:custodian>
               </ns3:registrationEvent>
            </ns3:subject>
            <ns3:queryAck>
               <ns3:queryId extension="-abd3453dcd24wkkks545" root="1.1"/>
               <ns3:queryResponseCode code="OK"/>
               <ns3:resultTotalQuantity value="1"/>
               <ns3:resultCurrentQuantity value="1"/>
               <ns3:resultRemainingQuantity value="0"/>
            </ns3:queryAck>
            <ns3:queryByParameter xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:controlActProcess>
      </ns3:PRPA_IN201306UV02>
   </S:Body>
</S:Envelope>]]></con:responseContent>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
					</con:response>
					<con:assertion disabled="true" name="NoMatchGivenName" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns1='urn:hl7-org:v3';
//ns1:Proxy_PRPA_IN201305UVProxyRequest[1]/ns1:PRPA_IN201305UV02[1]/ns1:controlActProcess[1]/ns1:queryByParameter[1]/ns1:parameterList[1]/ns1:livingSubjectName[1]/ns1:value[1]/ns1:given[1]</path>
							<content>${NoMatchGivenName}</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:assertion disabled="true" name="NoMatchFamilyName" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns1='urn:hl7-org:v3';
//ns1:Proxy_PRPA_IN201305UVProxyRequest[1]/ns1:PRPA_IN201305UV02[1]/ns1:controlActProcess[1]/ns1:queryByParameter[1]/ns1:parameterList[1]/ns1:livingSubjectName[1]/ns1:value[1]/ns1:family[1]</path>
							<content>${NoMatchFamilyName}</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:host/>
				</con:config>
			</con:testStep>
			<con:testStep name="count correlations (0)" type="groovy">
				<con:settings/>
				<con:config>
					<script>import groovy.sql.Sql;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def host = dataSource.getPropertyValue( "SUT.PatientCorrelationHost" );
def port = dataSource.getPropertyValue( "SUT.PatientCorrelationPort" );
def db = dataSource.getPropertyValue( "SUT.PatientCorrelationDB" );
def user = dataSource.getPropertyValue( "SUT.PatientCorrelationUser" );
def pass = dataSource.getPropertyValue( "SUT.PatientCorrelationPass" );
def table = dataSource.getPropertyValue( "SUT.PatientCorrelationTable" );
def PatientId =  dataSource.getPropertyValue( "PDSubjectID" );



int countRows(host, port, dbName, user, password, table, patId) {

   def sqlConnect = 'jdbc:mysql://' + host + ':' + port + '/' + dbName;
   def sql = Sql.newInstance(sqlConnect, user, password, "com.mysql.jdbc.Driver");
   def count = 0;
   sql.eachRow("select count(*) from " + table + " where PatientId = '" + patId + "'") { row -&gt;
	count = row[0];
   }
   return count;
}

def count = countRows(host, port, db, user, pass, table, PatientId);
assert count == 0;
					</script>
				</con:config>
			</con:testStep>
			<con:properties/>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="6c7e77a8-e053-4760-b5d6-ebe365015ad8" keepSession="false" maxResults="0" name="PatientDiscoveryNoMatchMockResponseTest" searchProperties="true">
			<con:settings/>
			<con:testStep name="EntityPatientDiscovery Test Case Properties" type="properties">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" createMissingOnLoad="true" discardValuesOnSave="true" saveFirst="true" xsi:type="con:PropertiesStep">
					<con:source>C:/Projects/NHINC/Current/Product/SoapUI_Test/RegressionSuite/EntityPatientDiscovery.properties</con:source>
					<con:target/>
					<con:properties>
						<con:property>
							<con:name>LocalAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDescription</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PatientDiscoveryEndpoint</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSubjectID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDzipCode</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDpurposeOfDisclosure</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSSN</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdOB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDexpirationDate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDuniquePatientId</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstreetAddress</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDCity</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDcountry</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdateOfSignature</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCDesc</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectAdministrativeGender</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectBirthTime</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDAssignAuthID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayConfigDir</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PEReceivingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>mockHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPort</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationDB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationUser</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPass</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationTable</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscovery Property Transfer" type="transfer">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:PropertyTransfersStep">
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PatientDiscoveryEndPoint</con:name>
						<con:sourceType>PatientDiscoveryEndpoint</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Endpoint</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath/>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>LocalHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>ReceivingHCID</con:name>
						<con:sourceType>PDRespondingHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:receiver[1]/urn:device[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>PDQueryRequestSubjectGivenName</con:name>
						<con:sourceType>NoMatchGivenName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:given[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>PDQueryRequestSubjectFamName</con:name>
						<con:sourceType>NoMatchFamilyName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:family[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectBirthTime</con:name>
						<con:sourceType>PDlivingSubjectBirthTime</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectBirthTime[1]/urn:value[1]/@value</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectGender</con:name>
						<con:sourceType>PDlivingSubjectAdministrativeGender</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectAdministrativeGender[1]/urn:value[1]/@code</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionSSN</con:name>
						<con:sourceType>PDSSN</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:SSN[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionUniquePatientID</con:name>
						<con:sourceType>PDuniquePatientId</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:uniquePatientId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDAssignAuthId</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:authorOrPerformer[1]/urn:assignedDevice[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>PDQueryReqSubjectAssignAuthID</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectID</con:name>
						<con:sourceType>PDSubjectID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@extension</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:homeCommunityId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true" transferToAll="false">
						<con:name>AssertionHCIDDesc</con:name>
						<con:sourceType>LocalHCIDescription</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:description[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCIDname</con:name>
						<con:sourceType>LocalHCIDName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:name[1]</con:targetPath>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep name="Intialize Configurations" type="groovy">
				<con:settings/>
				<con:config>
					<script>FileUtils.InitializeNHINCProperties(context, log);
					</script>
				</con:config>
			</con:testStep>
			<con:testStep name="Set Response Mode" type="groovy">
				<con:settings/>
				<con:config>
					<script>def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destDir = dataSource.getPropertyValue( "NHINGatewayConfigDir" );

FileUtils.UpdateProperty(destDir, 'gateway.properties', 'patientDiscoveryResponseMode', 'Verify',context,log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="clear correlations table" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def host = dataSource.getPropertyValue( "SUT.PatientCorrelationHost" );
def port = dataSource.getPropertyValue( "SUT.PatientCorrelationPort" );
def db = dataSource.getPropertyValue( "SUT.PatientCorrelationDB" );
def user = dataSource.getPropertyValue( "SUT.PatientCorrelationUser" );
def pass = dataSource.getPropertyValue( "SUT.PatientCorrelationPass" );
def table = dataSource.getPropertyValue( "SUT.PatientCorrelationTable" );

DBFunctions.clearTable(host, port, db, user, pass, table);</script>
				</con:config>
			</con:testStep>
			<con:testStep name="ModifyInternalConnectionInfoUsingTestHelper" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destConfigFileLocation = dataSource.getPropertyValue("NHINGatewayConfigDir");
def NHINGatewayHost = dataSource.getPropertyValue("NHINGatewayHost");
def mockHost = dataSource.getPropertyValue("mockHost");
def patientdiscoveryURL = "https://" + NHINGatewayHost + ":8181/CONNECTGatewayTest/NhinPatientDiscoveryTestHelper";
def mockPatientDiscoveryURL = "http://" + mockHost + ":2222/EntityPatientDiscoveryMockResponse";
def LocalHCID = dataSource.getPropertyValue( "LocalHCID" );
def RemoteHCID = dataSource.getPropertyValue("PDRespondingHCID");

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "PatientDiscovery", patientdiscoveryURL, context, log)
FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "mockpatientdiscovery", mockPatientDiscoveryURL, context, log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscoveryRequest" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>EntityPatientDiscoveryBindingSoap</con:interface>
					<con:operation>RespondingGateway_PRPA_IN201305UV02</con:operation>
					<con:request name="EntityPatientDiscoveryRequest">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://localhost:8080/CONNECTGateway/EntityPatientDiscovery</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="I"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
		  <urn:id root="2.2"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="2.2"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="1.1"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="1.1.2.16.840.1.113883.3.198"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.2" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="M"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="19630804" operator="I"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">Winslet</urn:family>
                           <urn:given partType="GIV">Kate</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value root="1.1.2.16.840.1.113883.3.198" extension="1234" assigningAuthorityName="?"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:NhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>2.2</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Winslet</urn1:familyName>
               <urn1:givenName>Kate</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:purposeOfDisclosure>Mental</urn1:purposeOfDisclosure>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion disabled="true" type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="NHINCProxyPatientDiscoveryMockResponse" type="mockresponse">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" startStep="EntityPatientDiscoveryRequest" xsi:type="con:MockResponseStep">
					<con:interface>NhincProxyPatientDiscoveryBinding</con:interface>
					<con:operation>Proxy_PRPA_IN201305UV</con:operation>
					<con:path>/EntityPatientDiscoveryMockResponse</con:path>
					<con:port>2222</con:port>
					<con:timeout>30000</con:timeout>
					<con:response>
						<con:settings/>
						<con:responseContent><![CDATA[
							<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns3:PRPA_IN201306UV02 ITSVersion="XML_1.0" xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns3="urn:hl7-org:v3" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:patientcorrelationfacade">
         <ns3:id extension="4191797c:1259356875e:-7c31" root="1.1"/>
         <ns3:creationTime value="20091215222518"/>
         <ns3:interactionId extension="PRPA_IN201306UV" root="2.16.840.1.113883.1.6"/>
         <ns3:processingCode code="P"/>
         <ns3:processingModeCode code="R"/>
         <ns3:acceptAckCode code="AL"/>
         <ns3:receiver typeCode="RCV">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:receiver>
         <ns3:sender typeCode="SND">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:sender>
         <ns3:acknowledgement>
            <ns3:typeId extension="PRPA_IN201305UV02" root="2.16.840.1.113883.1.6"/>
            <ns3:typeCode code="AA"/>
            <ns3:targetMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:acknowledgement>
         <ns3:controlActProcess moodCode="EVN" classCode="">
            <ns3:code codeSystem="2.16.840.1.113883.1.6" code="PRPA_TE201306UV"/>
            <ns3:queryAck>
               <ns3:queryId extension="-abd3453dcd24wkkks545" root="1.1"/>
               <ns3:queryResponseCode code="OK"/>
               <ns3:resultTotalQuantity value="1"/>
               <ns3:resultCurrentQuantity value="1"/>
               <ns3:resultRemainingQuantity value="0"/>
            </ns3:queryAck>
            <ns3:queryByParameter xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:controlActProcess>
      </ns3:PRPA_IN201306UV02>
   </S:Body>
</S:Envelope>]]></con:responseContent>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
					</con:response>
					<con:assertion name="NoMatchGivenName" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns1='urn:hl7-org:v3';
//ns1:Proxy_PRPA_IN201305UVProxyRequest[1]/ns1:PRPA_IN201305UV02[1]/ns1:controlActProcess[1]/ns1:queryByParameter[1]/ns1:parameterList[1]/ns1:livingSubjectName[1]/ns1:value[1]/ns1:given[1]</path>
							<content>${NoMatchGivenName}</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:assertion name="NoMatchFamilyName" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns1='urn:hl7-org:v3';
//ns1:Proxy_PRPA_IN201305UVProxyRequest[1]/ns1:PRPA_IN201305UV02[1]/ns1:controlActProcess[1]/ns1:queryByParameter[1]/ns1:parameterList[1]/ns1:livingSubjectName[1]/ns1:value[1]/ns1:family[1]</path>
							<content>${NoMatchFamilyName}</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:host/>
				</con:config>
			</con:testStep>
			<con:testStep name="count correlations (0)" type="groovy">
				<con:settings/>
				<con:config>
					<script>import groovy.sql.Sql;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def host = dataSource.getPropertyValue( "SUT.PatientCorrelationHost" );
def port = dataSource.getPropertyValue( "SUT.PatientCorrelationPort" );
def db = dataSource.getPropertyValue( "SUT.PatientCorrelationDB" );
def user = dataSource.getPropertyValue( "SUT.PatientCorrelationUser" );
def pass = dataSource.getPropertyValue( "SUT.PatientCorrelationPass" );
def table = dataSource.getPropertyValue( "SUT.PatientCorrelationTable" );
def PatientId =  dataSource.getPropertyValue( "PDSubjectID" );



int countRows(host, port, dbName, user, password, table, patId) {

   def sqlConnect = 'jdbc:mysql://' + host + ':' + port + '/' + dbName;
   def sql = Sql.newInstance(sqlConnect, user, password, "com.mysql.jdbc.Driver");
   def count = 0;
   sql.eachRow("select count(*) from " + table + " where PatientId = '" + patId + "'") { row -&gt;
	count = row[0];
   }
   return count;
}

def count = countRows(host, port, db, user, pass, table, PatientId);
assert count == 0;
					</script>
				</con:config>
			</con:testStep>
			<con:properties/>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="a90326e3-2321-4e36-a44a-561b557c1c87" keepSession="false" maxResults="0" name="PatientDiscoverySingleMatchMockResponseTest" searchProperties="true">
			<con:settings/>
			<con:testStep name="EntityPatientDiscovery Test Case Properties" type="properties">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" createMissingOnLoad="true" discardValuesOnSave="true" saveFirst="true" xsi:type="con:PropertiesStep">
					<con:source>C:/Projects/NHINC/Current/Product/SoapUI_Test/RegressionSuite/EntityPatientDiscovery.properties</con:source>
					<con:target/>
					<con:properties>
						<con:property>
							<con:name>LocalAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDescription</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PatientDiscoveryEndpoint</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSubjectID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDzipCode</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDpurposeOfDisclosure</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSSN</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdOB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDexpirationDate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDuniquePatientId</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstreetAddress</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDCity</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDcountry</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdateOfSignature</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCDesc</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectAdministrativeGender</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectBirthTime</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDAssignAuthID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayConfigDir</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PEReceivingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>mockHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPort</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationDB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationUser</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPass</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationTable</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscovery Property Transfer" type="transfer">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:PropertyTransfersStep">
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PatientDiscoveryEndPoint</con:name>
						<con:sourceType>PatientDiscoveryEndpoint</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Endpoint</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath/>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>LocalHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>ReceivingHCID</con:name>
						<con:sourceType>PDRespondingHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:receiver[1]/urn:device[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true" transferToAll="false">
						<con:name>PDQueryRequestHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>PDQueryRequestSubjectGivenName</con:name>
						<con:sourceType>SingleMatchGivenName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:given[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectFamName</con:name>
						<con:sourceType>SingleMatchFamilyName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:family[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectBirthTime</con:name>
						<con:sourceType>PDlivingSubjectBirthTime</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectBirthTime[1]/urn:value[1]/@value</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectGender</con:name>
						<con:sourceType>PDlivingSubjectAdministrativeGender</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectAdministrativeGender[1]/urn:value[1]/@code</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionSSN</con:name>
						<con:sourceType>PDSSN</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:SSN[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionUniquePatientID</con:name>
						<con:sourceType>PDuniquePatientId</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:uniquePatientId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDAssignAuthId</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:authorOrPerformer[1]/urn:assignedDevice[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>PDQueryReqSubjectAssignAuthID</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectID</con:name>
						<con:sourceType>PDSubjectID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@extension</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:homeCommunityId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true" transferToAll="false">
						<con:name>AssertionHCIDDesc</con:name>
						<con:sourceType>LocalHCIDescription</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:description[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCIDname</con:name>
						<con:sourceType>LocalHCIDName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:name[1]</con:targetPath>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep name="Intialize Configurations" type="groovy">
				<con:settings/>
				<con:config>
					<script>FileUtils.InitializeNHINCProperties(context, log);
					</script>
				</con:config>
			</con:testStep>
			<con:testStep name="Set Response Mode" type="groovy">
				<con:settings/>
				<con:config>
					<script>def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destDir = dataSource.getPropertyValue( "NHINGatewayConfigDir" );

FileUtils.UpdateProperty(destDir, 'gateway.properties', 'patientDiscoveryResponseMode', 'Verify',context,log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="clear correlations table" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def host = dataSource.getPropertyValue( "SUT.PatientCorrelationHost" );
def port = dataSource.getPropertyValue( "SUT.PatientCorrelationPort" );
def db = dataSource.getPropertyValue( "SUT.PatientCorrelationDB" );
def user = dataSource.getPropertyValue( "SUT.PatientCorrelationUser" );
def pass = dataSource.getPropertyValue( "SUT.PatientCorrelationPass" );
def table = dataSource.getPropertyValue( "SUT.PatientCorrelationTable" );

DBFunctions.clearTable(host, port, db, user, pass, table);</script>
				</con:config>
			</con:testStep>
			<con:testStep name="ModifyInternalConnectionInfoUsingTestHelper" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destConfigFileLocation = dataSource.getPropertyValue("NHINGatewayConfigDir");
def NHINGatewayHost = dataSource.getPropertyValue("NHINGatewayHost");
def mockHost = dataSource.getPropertyValue("mockHost");
def patientdiscoveryURL = "https://" + NHINGatewayHost + ":8181/CONNECTGatewayTest/NhinPatientDiscoveryTestHelper";
def mockPatientDiscoveryURL = "http://" + mockHost + ":2222/EntityPatientDiscoveryMockResponse";
def LocalHCID = dataSource.getPropertyValue( "LocalHCID" );
def RemoteHCID = dataSource.getPropertyValue("PDRespondingHCID");

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "PatientDiscovery", patientdiscoveryURL, context, log)
FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "mockpatientdiscovery", mockPatientDiscoveryURL, context, log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscoveryRequest" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>EntityPatientDiscoveryBindingSoap</con:interface>
					<con:operation>RespondingGateway_PRPA_IN201305UV02</con:operation>
					<con:request name="EntityPatientDiscoveryRequest">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://localhost:8080/CONNECTGateway/EntityPatientDiscovery</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="I"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="2.2"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="2.2"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="1.1"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="1.1.2.16.840.1.113883.3.198"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.2" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="M"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="19630804" operator="I"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">Smith</urn:family>
                           <urn:given partType="GIV">Joe</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value root="1.1.2.16.840.1.113883.3.198" extension="1234" assigningAuthorityName="?"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:NhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>2.2</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Winslet</urn1:familyName>
               <urn1:givenName>Kate</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:purposeOfDisclosure>Mental</urn1:purposeOfDisclosure>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion disabled="true" type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="NHINCProxyPatientDiscoveryMockResponse" type="mockresponse">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" startStep="EntityPatientDiscoveryRequest" xsi:type="con:MockResponseStep">
					<con:interface>NhincProxyPatientDiscoveryBinding</con:interface>
					<con:operation>Proxy_PRPA_IN201305UV</con:operation>
					<con:path>/EntityPatientDiscoveryMockResponse</con:path>
					<con:port>2222</con:port>
					<con:timeout>40000</con:timeout>
					<con:response>
						<con:settings/>
						<con:responseContent><![CDATA[
							<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns3:PRPA_IN201306UV02 ITSVersion="XML_1.0" xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns3="urn:hl7-org:v3" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:patientcorrelationfacade">
         <ns3:id extension="4191797c:1259356875e:-7c2d" root="1.1.1"/>
         <ns3:creationTime value="2009121522276"/>
         <ns3:interactionId extension="PRPA_IN201306UV" root="2.16.840.1.113883.1.6"/>
         <ns3:processingCode code="P"/>
         <ns3:processingModeCode code="R"/>
         <ns3:acceptAckCode code="AL"/>
         <ns3:receiver typeCode="RCV">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:receiver>
         <ns3:sender typeCode="SND">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:sender>
         <ns3:acknowledgement>
            <ns3:typeId extension="PRPA_IN201305UV02" root="2.16.840.1.113883.1.6"/>
            <ns3:typeCode code="AA"/>
            <ns3:targetMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:acknowledgement>
         <ns3:controlActProcess moodCode="EVN" classCode="">
            <ns3:code codeSystem="2.16.840.1.113883.1.6" code="PRPA_TE201306UV"/>
            <ns3:subject typeCode="SUBJ">
               <ns3:registrationEvent moodCode="" classCode="">
                  <ns3:id nullFlavor="NA"/>
                  <ns3:statusCode code="active"/>
                  <ns3:subject1 typeCode="">
                     <ns3:patient classCode="PAT">
                        <ns3:id extension="1234" root="2.2.2"/>
                        <ns3:statusCode code="SD"/>
                        <ns3:patientPerson>
                           <ns3:name>
                              <ns3:family partType="FAM">Smith</ns3:family>
                              <ns3:given partType="GIV">Joe</ns3:given>
                           </ns3:name>
                           <ns3:administrativeGenderCode code="M"/>
                           <ns3:birthTime value="19560301"/>
                           <ns3:addr>
                              <ns3:city>Orlando</ns3:city>
                              <ns3:state>FL</ns3:state>
                              <ns3:postalCode>98765</ns3:postalCode>
                           </ns3:addr>
                        </ns3:patientPerson>
                        <ns3:providerOrganization determinerCode="" classCode="">
                           <ns3:id root="2.2.2"/>
                           <ns3:contactParty xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        </ns3:providerOrganization>
                        <ns3:subjectOf1>
                           <ns3:queryMatchObservation moodCode="" classCode="">
                              <ns3:code code="IHE_PDQ"/>
                              <ns3:value xsi:type="ns3:INT" value="100" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                           </ns3:queryMatchObservation>
                        </ns3:subjectOf1>
                     </ns3:patient>
                  </ns3:subject1>
                  <ns3:custodian typeCode="">
                     <ns3:assignedEntity classCode="">
                        <ns3:id root="2.2.2"/>
                     </ns3:assignedEntity>
                  </ns3:custodian>
               </ns3:registrationEvent>
            </ns3:subject>
            <ns3:queryAck>
               <ns3:queryId extension="-abd3453dcd24wkkks545" root="1.1"/>
               <ns3:queryResponseCode code="OK"/>
               <ns3:resultTotalQuantity value="1"/>
               <ns3:resultCurrentQuantity value="1"/>
               <ns3:resultRemainingQuantity value="0"/>
            </ns3:queryAck>
            <ns3:queryByParameter xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:controlActProcess>
      </ns3:PRPA_IN201306UV02>
   </S:Body>
</S:Envelope>]]></con:responseContent>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
					</con:response>
					<con:assertion name="SingleMatchGivenName" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns1='urn:hl7-org:v3';
//ns1:Proxy_PRPA_IN201305UVProxyRequest[1]/ns1:PRPA_IN201305UV02[1]/ns1:controlActProcess[1]/ns1:queryByParameter[1]/ns1:parameterList[1]/ns1:livingSubjectName[1]/ns1:value[1]/ns1:given[1]</path>
							<content>${SingleMatchGivenName}</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:assertion name="SingleMatchFamilyName" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns1='urn:hl7-org:v3';
//ns1:Proxy_PRPA_IN201305UVProxyRequest[1]/ns1:PRPA_IN201305UV02[1]/ns1:controlActProcess[1]/ns1:queryByParameter[1]/ns1:parameterList[1]/ns1:livingSubjectName[1]/ns1:value[1]/ns1:family[1]</path>
							<content>${SingleMatchFamilyName}</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:host/>
				</con:config>
			</con:testStep>
			<con:testStep name="count correlations (1)" type="groovy">
				<con:settings/>
				<con:config>
					<script>import groovy.sql.Sql;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def host = dataSource.getPropertyValue( "SUT.PatientCorrelationHost" );
def port = dataSource.getPropertyValue( "SUT.PatientCorrelationPort" );
def db = dataSource.getPropertyValue( "SUT.PatientCorrelationDB" );
def user = dataSource.getPropertyValue( "SUT.PatientCorrelationUser" );
def pass = dataSource.getPropertyValue( "SUT.PatientCorrelationPass" );
def table = dataSource.getPropertyValue( "SUT.PatientCorrelationTable" );
def PatientId =  dataSource.getPropertyValue( "PDSubjectID" );



int countRows(host, port, dbName, user, password, table, patId) {

   def sqlConnect = 'jdbc:mysql://' + host + ':' + port + '/' + dbName;
   def sql = Sql.newInstance(sqlConnect, user, password, "com.mysql.jdbc.Driver");
   def count = 0;
   sql.eachRow("select count(*) from " + table + " where PatientId = '" + patId + "'") { row -&gt;
	count = row[0];
   }
   return count;
}

def count = countRows(host, port, db, user, pass, table, PatientId);
assert count == 1;</script>
				</con:config>
			</con:testStep>
			<con:properties/>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="af8c4ba9-f256-4e3e-b90b-168808533a29" keepSession="false" maxResults="0" name="PatientDiscoveryNoPatIDMockResponseTest" searchProperties="true">
			<con:settings/>
			<con:testStep name="EntityPatientDiscovery Test Case Properties" type="properties">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" createMissingOnLoad="true" discardValuesOnSave="true" saveFirst="true" xsi:type="con:PropertiesStep">
					<con:source>C:/Projects/NHINC/Current/Product/SoapUI_Test/RegressionSuite/EntityPatientDiscovery.properties</con:source>
					<con:target/>
					<con:properties>
						<con:property>
							<con:name>LocalAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDescription</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PatientDiscoveryEndpoint</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSubjectID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDzipCode</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDpurposeOfDisclosure</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSSN</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdOB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDexpirationDate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDuniquePatientId</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstreetAddress</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDCity</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDcountry</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdateOfSignature</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCDesc</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectAdministrativeGender</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectBirthTime</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDAssignAuthID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayConfigDir</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PEReceivingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>mockHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPort</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationDB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationUser</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPass</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationTable</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscovery Property Transfer" type="transfer">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:PropertyTransfersStep">
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PatientDiscoveryEndPoint</con:name>
						<con:sourceType>PatientDiscoveryEndpoint</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Endpoint</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath/>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>LocalHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>ReceivingHCID</con:name>
						<con:sourceType>PDRespondingHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:receiver[1]/urn:device[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true" transferToAll="false">
						<con:name>PDQueryRequestHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>PDQueryRequestSubjectGivenName</con:name>
						<con:sourceType>SingleMatchGivenName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:given[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectFamName</con:name>
						<con:sourceType>SingleMatchFamilyName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:family[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectBirthTime</con:name>
						<con:sourceType>PDlivingSubjectBirthTime</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectBirthTime[1]/urn:value[1]/@value</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectGender</con:name>
						<con:sourceType>PDlivingSubjectAdministrativeGender</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectAdministrativeGender[1]/urn:value[1]/@code</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionSSN</con:name>
						<con:sourceType>PDSSN</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:SSN[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionUniquePatientID</con:name>
						<con:sourceType>PDuniquePatientId</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:uniquePatientId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDAssignAuthId</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:authorOrPerformer[1]/urn:assignedDevice[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers disabled="true" entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryReqSubjectAssignAuthID</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers disabled="true" entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectID</con:name>
						<con:sourceType>PDSubjectID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@extension</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:homeCommunityId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true" transferToAll="false">
						<con:name>AssertionHCIDDesc</con:name>
						<con:sourceType>LocalHCIDescription</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:description[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCIDname</con:name>
						<con:sourceType>LocalHCIDName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:name[1]</con:targetPath>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep name="Intialize Configurations" type="groovy">
				<con:settings/>
				<con:config>
					<script>FileUtils.InitializeNHINCProperties(context, log);
					</script>
				</con:config>
			</con:testStep>
			<con:testStep name="Set Response Mode" type="groovy">
				<con:settings/>
				<con:config>
					<script>def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destDir = dataSource.getPropertyValue( "NHINGatewayConfigDir" );

FileUtils.UpdateProperty(destDir, 'gateway.properties', 'patientDiscoveryResponseMode', 'Verify',context,log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="clear correlations table" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def host = dataSource.getPropertyValue( "SUT.PatientCorrelationHost" );
def port = dataSource.getPropertyValue( "SUT.PatientCorrelationPort" );
def db = dataSource.getPropertyValue( "SUT.PatientCorrelationDB" );
def user = dataSource.getPropertyValue( "SUT.PatientCorrelationUser" );
def pass = dataSource.getPropertyValue( "SUT.PatientCorrelationPass" );
def table = dataSource.getPropertyValue( "SUT.PatientCorrelationTable" );

DBFunctions.clearTable(host, port, db, user, pass, table);</script>
				</con:config>
			</con:testStep>
			<con:testStep name="ModifyInternalConnectionInfoUsingTestHelper" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destConfigFileLocation = dataSource.getPropertyValue("NHINGatewayConfigDir");
def NHINGatewayHost = dataSource.getPropertyValue("NHINGatewayHost");
def mockHost = dataSource.getPropertyValue("mockHost");
def patientdiscoveryURL = "https://" + NHINGatewayHost + ":8181/CONNECTGatewayTest/NhinPatientDiscoveryTestHelper";
def mockPatientDiscoveryURL = "http://" + mockHost + ":2222/EntityPatientDiscoveryMockResponse";
def LocalHCID = dataSource.getPropertyValue( "LocalHCID" );
def RemoteHCID = dataSource.getPropertyValue("PDRespondingHCID");

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "PatientDiscovery", patientdiscoveryURL, context, log)
FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "mockpatientdiscovery", mockPatientDiscoveryURL, context, log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscoveryRequest" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>EntityPatientDiscoveryBindingSoap</con:interface>
					<con:operation>RespondingGateway_PRPA_IN201305UV02</con:operation>
					<con:request name="EntityPatientDiscoveryRequest">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://localhost:8080/CONNECTGateway/EntityPatientDiscovery</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="I"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="2.2"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="2.2"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="1.1"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="1.1.2.16.840.1.113883.3.198"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.2" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="M"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="19630804" operator="I"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">Smith</urn:family>
                           <urn:given partType="GIV">Joe</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value root="" extension="" assigningAuthorityName="?"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:NhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>2.2</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Winslet</urn1:familyName>
               <urn1:givenName>Kate</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:purposeOfDisclosure>Mental</urn1:purposeOfDisclosure>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion disabled="true" type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="NHINCProxyPatientDiscoveryMockResponse" type="mockresponse">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" startStep="EntityPatientDiscoveryRequest" xsi:type="con:MockResponseStep">
					<con:interface>NhincProxyPatientDiscoveryBinding</con:interface>
					<con:operation>Proxy_PRPA_IN201305UV</con:operation>
					<con:path>/EntityPatientDiscoveryMockResponse</con:path>
					<con:port>2222</con:port>
					<con:timeout>30000</con:timeout>
					<con:response>
						<con:settings/>
						<con:responseContent><![CDATA[
							<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns3:PRPA_IN201306UV02 ITSVersion="XML_1.0" xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns3="urn:hl7-org:v3" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:patientcorrelationfacade">
         <ns3:id extension="4191797c:1259356875e:-7c2d" root="1.1.1"/>
         <ns3:creationTime value="2009121522276"/>
         <ns3:interactionId extension="PRPA_IN201306UV" root="2.16.840.1.113883.1.6"/>
         <ns3:processingCode code="P"/>
         <ns3:processingModeCode code="R"/>
         <ns3:acceptAckCode code="AL"/>
         <ns3:receiver typeCode="RCV">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:receiver>
         <ns3:sender typeCode="SND">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:sender>
         <ns3:acknowledgement>
            <ns3:typeId extension="PRPA_IN201305UV02" root="2.16.840.1.113883.1.6"/>
            <ns3:typeCode code="AA"/>
            <ns3:targetMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:acknowledgement>
         <ns3:controlActProcess moodCode="EVN" classCode="">
            <ns3:code codeSystem="2.16.840.1.113883.1.6" code="PRPA_TE201306UV"/>
            <ns3:subject typeCode="SUBJ">
               <ns3:registrationEvent moodCode="" classCode="">
                  <ns3:id nullFlavor="NA"/>
                  <ns3:statusCode code="active"/>
                  <ns3:subject1 typeCode="">
                     <ns3:patient classCode="PAT">
                        <ns3:id extension="1234" root="2.2.2"/>
                        <ns3:statusCode code="SD"/>
                        <ns3:patientPerson>
                           <ns3:name>
                              <ns3:family partType="FAM">Smith</ns3:family>
                              <ns3:given partType="GIV">Joe</ns3:given>
                           </ns3:name>
                           <ns3:administrativeGenderCode code="M"/>
                           <ns3:birthTime value="19560301"/>
                           <ns3:addr>
                              <ns3:city>Orlando</ns3:city>
                              <ns3:state>FL</ns3:state>
                              <ns3:postalCode>98765</ns3:postalCode>
                           </ns3:addr>
                        </ns3:patientPerson>
                        <ns3:providerOrganization determinerCode="" classCode="">
                           <ns3:id root="2.2.2"/>
                           <ns3:contactParty xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        </ns3:providerOrganization>
                        <ns3:subjectOf1>
                           <ns3:queryMatchObservation moodCode="" classCode="">
                              <ns3:code code="IHE_PDQ"/>
                              <ns3:value xsi:type="ns3:INT" value="100" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                           </ns3:queryMatchObservation>
                        </ns3:subjectOf1>
                     </ns3:patient>
                  </ns3:subject1>
                  <ns3:custodian typeCode="">
                     <ns3:assignedEntity classCode="">
                        <ns3:id root="2.2.2"/>
                     </ns3:assignedEntity>
                  </ns3:custodian>
               </ns3:registrationEvent>
            </ns3:subject>
            <ns3:queryAck>
               <ns3:queryId extension="-abd3453dcd24wkkks545" root="1.1"/>
               <ns3:queryResponseCode code="OK"/>
               <ns3:resultTotalQuantity value="1"/>
               <ns3:resultCurrentQuantity value="1"/>
               <ns3:resultRemainingQuantity value="0"/>
            </ns3:queryAck>
            <ns3:queryByParameter xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:controlActProcess>
      </ns3:PRPA_IN201306UV02>
   </S:Body>
</S:Envelope>]]></con:responseContent>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
					</con:response>
					<con:assertion name="SingleMatchGivenName" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns1='urn:hl7-org:v3';
//ns1:Proxy_PRPA_IN201305UVProxyRequest[1]/ns1:PRPA_IN201305UV02[1]/ns1:controlActProcess[1]/ns1:queryByParameter[1]/ns1:parameterList[1]/ns1:livingSubjectName[1]/ns1:value[1]/ns1:given[1]</path>
							<content>${SingleMatchGivenName}</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:assertion name="SingleMatchFamilyName" type="XPath Match">
						<con:configuration>
							<path>declare namespace ns1='urn:hl7-org:v3';
//ns1:Proxy_PRPA_IN201305UVProxyRequest[1]/ns1:PRPA_IN201305UV02[1]/ns1:controlActProcess[1]/ns1:queryByParameter[1]/ns1:parameterList[1]/ns1:livingSubjectName[1]/ns1:value[1]/ns1:family[1]</path>
							<content>${SingleMatchFamilyName}</content>
							<allowWildcards>false</allowWildcards>
							<ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
						</con:configuration>
					</con:assertion>
					<con:host/>
				</con:config>
			</con:testStep>
			<con:testStep name="count correlations (0)" type="groovy">
				<con:settings/>
				<con:config>
					<script>import groovy.sql.Sql;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def host = dataSource.getPropertyValue( "SUT.PatientCorrelationHost" );
def port = dataSource.getPropertyValue( "SUT.PatientCorrelationPort" );
def db = dataSource.getPropertyValue( "SUT.PatientCorrelationDB" );
def user = dataSource.getPropertyValue( "SUT.PatientCorrelationUser" );
def pass = dataSource.getPropertyValue( "SUT.PatientCorrelationPass" );
def table = dataSource.getPropertyValue( "SUT.PatientCorrelationTable" );
def PatientId =  dataSource.getPropertyValue( "PDSubjectID" );



int countRows(host, port, dbName, user, password, table, patId) {

   def sqlConnect = 'jdbc:mysql://' + host + ':' + port + '/' + dbName;
   def sql = Sql.newInstance(sqlConnect, user, password, "com.mysql.jdbc.Driver");
   def count = 0;
   sql.eachRow("select count(*) from " + table + " where PatientId = '" + patId + "'") { row -&gt;
	count = row[0];
   }
   return count;
}

def count = countRows(host, port, db, user, pass, table, PatientId);
assert count == 0;</script>
				</con:config>
			</con:testStep>
			<con:properties/>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="25704c15-f705-41e9-8d8e-72f8c2cd448d" keepSession="false" maxResults="0" name="PatientDiscoveryTrustModeDiffNameMockResponseTest" searchProperties="true">
			<con:settings/>
			<con:testStep name="EntityPatientDiscovery Test Case Properties" type="properties">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" createMissingOnLoad="true" discardValuesOnSave="true" saveFirst="true" xsi:type="con:PropertiesStep">
					<con:source>C:/Projects/NHINC/Current/Product/SoapUI_Test/RegressionSuite/EntityPatientDiscovery.properties</con:source>
					<con:target/>
					<con:properties>
						<con:property>
							<con:name>LocalAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDescription</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PatientDiscoveryEndpoint</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSubjectID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDzipCode</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDpurposeOfDisclosure</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSSN</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdOB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDexpirationDate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDuniquePatientId</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstreetAddress</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDCity</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDcountry</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdateOfSignature</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCDesc</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectAdministrativeGender</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectBirthTime</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDAssignAuthID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayConfigDir</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PEReceivingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>mockHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPort</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationDB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationUser</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPass</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationTable</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscovery Property Transfer" type="transfer">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:PropertyTransfersStep">
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PatientDiscoveryEndPoint</con:name>
						<con:sourceType>PatientDiscoveryEndpoint</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Endpoint</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath/>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>LocalHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>ReceivingHCID</con:name>
						<con:sourceType>PDRespondingHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:receiver[1]/urn:device[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true" transferToAll="false">
						<con:name>PDQueryRequestHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectGivenName</con:name>
						<con:sourceType>SingleMatchGivenName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:given[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectFamName</con:name>
						<con:sourceType>SingleMatchFamilyName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:family[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectBirthTime</con:name>
						<con:sourceType>PDlivingSubjectBirthTime</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectBirthTime[1]/urn:value[1]/@value</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectGender</con:name>
						<con:sourceType>PDlivingSubjectAdministrativeGender</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectAdministrativeGender[1]/urn:value[1]/@code</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionSSN</con:name>
						<con:sourceType>PDSSN</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:SSN[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionUniquePatientID</con:name>
						<con:sourceType>PDuniquePatientId</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:uniquePatientId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDAssignAuthId</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:authorOrPerformer[1]/urn:assignedDevice[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>PDQueryReqSubjectAssignAuthID</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectID</con:name>
						<con:sourceType>PDSubjectID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@extension</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:homeCommunityId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true" transferToAll="false">
						<con:name>AssertionHCIDDesc</con:name>
						<con:sourceType>LocalHCIDescription</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:description[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCIDname</con:name>
						<con:sourceType>LocalHCIDName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:name[1]</con:targetPath>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep name="MockResponse Property Transfer" type="transfer">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:PropertyTransfersStep">
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>MockGivenName</con:name>
						<con:sourceType>NoMatchGivenName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Response</con:targetType>
						<con:targetStep>NHINCProxyPatientDiscoveryMockResponse</con:targetStep>
						<con:targetPath>declare namespace ns3='urn:hl7-org:v3';
//ns3:PRPA_IN201306UV02[1]/ns3:controlActProcess[1]/ns3:subject[1]/ns3:registrationEvent[1]/ns3:subject1[1]/ns3:patient[1]/ns3:patientPerson[1]/ns3:name[1]/ns3:given[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>MockFamilyName</con:name>
						<con:sourceType>NoMatchFamilyName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Response</con:targetType>
						<con:targetStep>NHINCProxyPatientDiscoveryMockResponse</con:targetStep>
						<con:targetPath>declare namespace ns3='urn:hl7-org:v3';
//ns3:PRPA_IN201306UV02[1]/ns3:controlActProcess[1]/ns3:subject[1]/ns3:registrationEvent[1]/ns3:subject1[1]/ns3:patient[1]/ns3:patientPerson[1]/ns3:name[1]/ns3:family[1]</con:targetPath>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep name="Intialize Configurations" type="groovy">
				<con:settings/>
				<con:config>
					<script>FileUtils.InitializeNHINCProperties(context, log);
					</script>
				</con:config>
			</con:testStep>
			<con:testStep name="Set Response Mode" type="groovy">
				<con:settings/>
				<con:config>
					<script>def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destDir = dataSource.getPropertyValue( "NHINGatewayConfigDir" );

FileUtils.UpdateProperty(destDir, 'gateway.properties', 'patientDiscoveryResponseMode', 'Trust',context,log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="clear correlations table" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def host = dataSource.getPropertyValue( "SUT.PatientCorrelationHost" );
def port = dataSource.getPropertyValue( "SUT.PatientCorrelationPort" );
def db = dataSource.getPropertyValue( "SUT.PatientCorrelationDB" );
def user = dataSource.getPropertyValue( "SUT.PatientCorrelationUser" );
def pass = dataSource.getPropertyValue( "SUT.PatientCorrelationPass" );
def table = dataSource.getPropertyValue( "SUT.PatientCorrelationTable" );

DBFunctions.clearTable(host, port, db, user, pass, table);</script>
				</con:config>
			</con:testStep>
			<con:testStep name="ModifyInternalConnectionInfoUsingTestHelper" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destConfigFileLocation = dataSource.getPropertyValue("NHINGatewayConfigDir");
def NHINGatewayHost = dataSource.getPropertyValue("NHINGatewayHost");
def mockHost = dataSource.getPropertyValue("mockHost");
def patientdiscoveryURL = "https://" + NHINGatewayHost + ":8181/CONNECTGatewayTest/NhinPatientDiscoveryTestHelper";
def mockPatientDiscoveryURL = "http://" + mockHost + ":2222/EntityPatientDiscoveryMockResponse";
def LocalHCID = dataSource.getPropertyValue( "LocalHCID" );
def RemoteHCID = dataSource.getPropertyValue("PDRespondingHCID");

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "PatientDiscovery", patientdiscoveryURL, context, log)
FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "mockpatientdiscovery", mockPatientDiscoveryURL, context, log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscoveryRequest" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>EntityPatientDiscoveryBindingSoap</con:interface>
					<con:operation>RespondingGateway_PRPA_IN201305UV02</con:operation>
					<con:request name="EntityPatientDiscoveryRequest">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://localhost:8080/CONNECTGateway/EntityPatientDiscovery</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="I"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="2.2"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="2.2"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="1.1"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="1.1.2.16.840.1.113883.3.198"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.2" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="M"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="19630804" operator="I"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">Smith</urn:family>
                           <urn:given partType="GIV">Joe</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value root="1.1.2.16.840.1.113883.3.198" extension="1234" assigningAuthorityName="?"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:NhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>2.2</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Winslet</urn1:familyName>
               <urn1:givenName>Kate</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:purposeOfDisclosure>Mental</urn1:purposeOfDisclosure>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion disabled="true" type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="NHINCProxyPatientDiscoveryMockResponse" type="mockresponse">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" startStep="EntityPatientDiscoveryRequest" xsi:type="con:MockResponseStep">
					<con:interface>NhincProxyPatientDiscoveryBinding</con:interface>
					<con:operation>Proxy_PRPA_IN201305UV</con:operation>
					<con:path>/EntityPatientDiscoveryMockResponse</con:path>
					<con:port>2222</con:port>
					<con:timeout>30000</con:timeout>
					<con:response>
						<con:settings/>
						<con:responseContent><![CDATA[
							<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns3:PRPA_IN201306UV02 ITSVersion="XML_1.0" xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns3="urn:hl7-org:v3" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:patientcorrelationfacade">
         <ns3:id extension="4191797c:1259356875e:-7c2d" root="1.1.1"/>
         <ns3:creationTime value="2009121522276"/>
         <ns3:interactionId extension="PRPA_IN201306UV" root="2.16.840.1.113883.1.6"/>
         <ns3:processingCode code="P"/>
         <ns3:processingModeCode code="R"/>
         <ns3:acceptAckCode code="AL"/>
         <ns3:receiver typeCode="RCV">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:receiver>
         <ns3:sender typeCode="SND">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:sender>
         <ns3:acknowledgement>
            <ns3:typeId extension="PRPA_IN201305UV02" root="2.16.840.1.113883.1.6"/>
            <ns3:typeCode code="AA"/>
            <ns3:targetMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:acknowledgement>
         <ns3:controlActProcess moodCode="EVN" classCode="">
            <ns3:code codeSystem="2.16.840.1.113883.1.6" code="PRPA_TE201306UV"/>
            <ns3:subject typeCode="SUBJ">
               <ns3:registrationEvent moodCode="" classCode="">
                  <ns3:id nullFlavor="NA"/>
                  <ns3:statusCode code="active"/>
                  <ns3:subject1 typeCode="">
                     <ns3:patient classCode="PAT">
                        <ns3:id extension="1234" root="2.2.2"/>
                        <ns3:statusCode code="SD"/>
                        <ns3:patientPerson>
                           <ns3:name>
                              <ns3:family partType="FAM">Winslet</ns3:family>
                              <ns3:given partType="GIV">Kate</ns3:given>
                           </ns3:name>
                           <ns3:administrativeGenderCode code="M"/>
                           <ns3:birthTime value="19560301"/>
                           <ns3:addr>
                              <ns3:city>Orlando</ns3:city>
                              <ns3:state>FL</ns3:state>
                              <ns3:postalCode>98765</ns3:postalCode>
                           </ns3:addr>
                        </ns3:patientPerson>
                        <ns3:providerOrganization determinerCode="" classCode="">
                           <ns3:id root="2.2.2"/>
                           <ns3:contactParty xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        </ns3:providerOrganization>
                        <ns3:subjectOf1>
                           <ns3:queryMatchObservation moodCode="" classCode="">
                              <ns3:code code="IHE_PDQ"/>
                              <ns3:value xsi:type="ns3:INT" value="100" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                           </ns3:queryMatchObservation>
                        </ns3:subjectOf1>
                     </ns3:patient>
                  </ns3:subject1>
                  <ns3:custodian typeCode="">
                     <ns3:assignedEntity classCode="">
                        <ns3:id root="1.1.2.16.840.1.113883.3.198"/>
                     </ns3:assignedEntity>
                  </ns3:custodian>
               </ns3:registrationEvent>
            </ns3:subject>
            <ns3:queryAck>
               <ns3:queryId extension="-abd3453dcd24wkkks545" root="1.1"/>
               <ns3:queryResponseCode code="OK"/>
               <ns3:resultTotalQuantity value="1"/>
               <ns3:resultCurrentQuantity value="1"/>
               <ns3:resultRemainingQuantity value="0"/>
            </ns3:queryAck>
            <ns3:queryByParameter xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:controlActProcess>
      </ns3:PRPA_IN201306UV02>
   </S:Body>
</S:Envelope>]]></con:responseContent>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
					</con:response>
					<con:host/>
				</con:config>
			</con:testStep>
			<con:testStep name="count correlations (1)" type="groovy">
				<con:settings/>
				<con:config>
					<script>import groovy.sql.Sql;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def host = dataSource.getPropertyValue( "SUT.PatientCorrelationHost" );
def port = dataSource.getPropertyValue( "SUT.PatientCorrelationPort" );
def db = dataSource.getPropertyValue( "SUT.PatientCorrelationDB" );
def user = dataSource.getPropertyValue( "SUT.PatientCorrelationUser" );
def pass = dataSource.getPropertyValue( "SUT.PatientCorrelationPass" );
def table = dataSource.getPropertyValue( "SUT.PatientCorrelationTable" );
def PatientId =  dataSource.getPropertyValue( "PDSubjectID" );



int countRows(host, port, dbName, user, password, table, patId) {

   def sqlConnect = 'jdbc:mysql://' + host + ':' + port + '/' + dbName;
   def sql = Sql.newInstance(sqlConnect, user, password, "com.mysql.jdbc.Driver");
   def count = 0;
   sql.eachRow("select count(*) from " + table + " where PatientId = '" + patId + "'") { row -&gt;
	count = row[0];
   }
   return count;
}

def count = countRows(host, port, db, user, pass, table, PatientId);
assert count == 1;</script>
				</con:config>
			</con:testStep>
			<con:properties/>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="56620715-3f7c-4e8e-aad3-731b7ddc220c" keepSession="false" maxResults="0" name="PatientDiscoveryVerifyModeDiffNameMockResponseTest" searchProperties="true">
			<con:settings/>
			<con:testStep name="EntityPatientDiscovery Test Case Properties" type="properties">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" createMissingOnLoad="true" discardValuesOnSave="true" saveFirst="true" xsi:type="con:PropertiesStep">
					<con:source>C:/Projects/NHINC/Current/Product/SoapUI_Test/RegressionSuite/EntityPatientDiscovery.properties</con:source>
					<con:target/>
					<con:properties>
						<con:property>
							<con:name>LocalAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDescription</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PatientDiscoveryEndpoint</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSubjectID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDzipCode</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDpurposeOfDisclosure</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSSN</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdOB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDexpirationDate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDuniquePatientId</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstreetAddress</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDCity</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDcountry</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdateOfSignature</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCDesc</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectAdministrativeGender</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectBirthTime</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDAssignAuthID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayConfigDir</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PEReceivingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>mockHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPort</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationDB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationUser</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPass</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationTable</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscovery Property Transfer" type="transfer">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:PropertyTransfersStep">
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PatientDiscoveryEndPoint</con:name>
						<con:sourceType>PatientDiscoveryEndpoint</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Endpoint</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath/>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>LocalHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>ReceivingHCID</con:name>
						<con:sourceType>PDRespondingHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:receiver[1]/urn:device[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true" transferToAll="false">
						<con:name>PDQueryRequestHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectGivenName</con:name>
						<con:sourceType>SingleMatchGivenName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:given[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectFamName</con:name>
						<con:sourceType>SingleMatchFamilyName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:family[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectBirthTime</con:name>
						<con:sourceType>PDlivingSubjectBirthTime</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectBirthTime[1]/urn:value[1]/@value</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectGender</con:name>
						<con:sourceType>PDlivingSubjectAdministrativeGender</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectAdministrativeGender[1]/urn:value[1]/@code</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionSSN</con:name>
						<con:sourceType>PDSSN</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:SSN[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionUniquePatientID</con:name>
						<con:sourceType>PDuniquePatientId</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:uniquePatientId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDAssignAuthId</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:authorOrPerformer[1]/urn:assignedDevice[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>PDQueryReqSubjectAssignAuthID</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectID</con:name>
						<con:sourceType>PDSubjectID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@extension</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:homeCommunityId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true" transferToAll="false">
						<con:name>AssertionHCIDDesc</con:name>
						<con:sourceType>LocalHCIDescription</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:description[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCIDname</con:name>
						<con:sourceType>LocalHCIDName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:name[1]</con:targetPath>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep name="MockResponse Property Transfer" type="transfer">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:PropertyTransfersStep">
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>MockGivenName</con:name>
						<con:sourceType>NoMatchGivenName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Response</con:targetType>
						<con:targetStep>NHINCProxyPatientDiscoveryMockResponse</con:targetStep>
						<con:targetPath>declare namespace ns3='urn:hl7-org:v3';
//ns3:PRPA_IN201306UV02[1]/ns3:controlActProcess[1]/ns3:subject[1]/ns3:registrationEvent[1]/ns3:subject1[1]/ns3:patient[1]/ns3:patientPerson[1]/ns3:name[1]/ns3:given[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>MockFamilyName</con:name>
						<con:sourceType>NoMatchFamilyName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Response</con:targetType>
						<con:targetStep>NHINCProxyPatientDiscoveryMockResponse</con:targetStep>
						<con:targetPath>declare namespace ns3='urn:hl7-org:v3';
//ns3:PRPA_IN201306UV02[1]/ns3:controlActProcess[1]/ns3:subject[1]/ns3:registrationEvent[1]/ns3:subject1[1]/ns3:patient[1]/ns3:patientPerson[1]/ns3:name[1]/ns3:family[1]</con:targetPath>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep name="Intialize Configurations" type="groovy">
				<con:settings/>
				<con:config>
					<script>FileUtils.InitializeNHINCProperties(context, log);
					</script>
				</con:config>
			</con:testStep>
			<con:testStep name="Set Response Mode" type="groovy">
				<con:settings/>
				<con:config>
					<script>def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destDir = dataSource.getPropertyValue( "NHINGatewayConfigDir" );

FileUtils.UpdateProperty(destDir, 'gateway.properties', 'patientDiscoveryResponseMode', 'Verify',context,log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="clear correlations table" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def host = dataSource.getPropertyValue( "SUT.PatientCorrelationHost" );
def port = dataSource.getPropertyValue( "SUT.PatientCorrelationPort" );
def db = dataSource.getPropertyValue( "SUT.PatientCorrelationDB" );
def user = dataSource.getPropertyValue( "SUT.PatientCorrelationUser" );
def pass = dataSource.getPropertyValue( "SUT.PatientCorrelationPass" );
def table = dataSource.getPropertyValue( "SUT.PatientCorrelationTable" );

DBFunctions.clearTable(host, port, db, user, pass, table);</script>
				</con:config>
			</con:testStep>
			<con:testStep name="ModifyInternalConnectionInfoUsingTestHelper" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destConfigFileLocation = dataSource.getPropertyValue("NHINGatewayConfigDir");
def NHINGatewayHost = dataSource.getPropertyValue("NHINGatewayHost");
def mockHost = dataSource.getPropertyValue("mockHost");
def patientdiscoveryURL = "https://" + NHINGatewayHost + ":8181/CONNECTGatewayTest/NhinPatientDiscoveryTestHelper";
def mockPatientDiscoveryURL = "http://" + mockHost + ":2222/EntityPatientDiscoveryMockResponse";
def LocalHCID = dataSource.getPropertyValue( "LocalHCID" );
def RemoteHCID = dataSource.getPropertyValue("PDRespondingHCID");

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "PatientDiscovery", patientdiscoveryURL, context, log)
FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "mockpatientdiscovery", mockPatientDiscoveryURL, context, log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscoveryRequest" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>EntityPatientDiscoveryBindingSoap</con:interface>
					<con:operation>RespondingGateway_PRPA_IN201305UV02</con:operation>
					<con:request name="EntityPatientDiscoveryRequest">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://localhost:8080/CONNECTGateway/EntityPatientDiscovery</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="I"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="2.2"/>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="1.1"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="1.1.2.16.840.1.113883.3.198"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.2" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="M"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="19630804" operator="I"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">Smith</urn:family>
                           <urn:given partType="GIV">Joe</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value root="1.1.2.16.840.1.113883.3.198" extension="1234" assigningAuthorityName="?"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:NhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>2.2</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Winslet</urn1:familyName>
               <urn1:givenName>Kate</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:purposeOfDisclosure>Mental</urn1:purposeOfDisclosure>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion disabled="true" type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="NHINCProxyPatientDiscoveryMockResponse" type="mockresponse">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" startStep="EntityPatientDiscoveryRequest" xsi:type="con:MockResponseStep">
					<con:interface>NhincProxyPatientDiscoveryBinding</con:interface>
					<con:operation>Proxy_PRPA_IN201305UV</con:operation>
					<con:path>/EntityPatientDiscoveryMockResponse</con:path>
					<con:port>2222</con:port>
					<con:timeout>30000</con:timeout>
					<con:response>
						<con:settings/>
						<con:responseContent><![CDATA[
							<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns3:PRPA_IN201306UV02 ITSVersion="XML_1.0" xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns3="urn:hl7-org:v3" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:patientcorrelationfacade">
         <ns3:id extension="4191797c:1259356875e:-7c2d" root="1.1.1"/>
         <ns3:creationTime value="2009121522276"/>
         <ns3:interactionId extension="PRPA_IN201306UV" root="2.16.840.1.113883.1.6"/>
         <ns3:processingCode code="P"/>
         <ns3:processingModeCode code="R"/>
         <ns3:acceptAckCode code="AL"/>
         <ns3:receiver typeCode="RCV">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:receiver>
         <ns3:sender typeCode="SND">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:sender>
         <ns3:acknowledgement>
            <ns3:typeId extension="PRPA_IN201305UV02" root="2.16.840.1.113883.1.6"/>
            <ns3:typeCode code="AA"/>
            <ns3:targetMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:acknowledgement>
         <ns3:controlActProcess moodCode="EVN" classCode="">
            <ns3:code codeSystem="2.16.840.1.113883.1.6" code="PRPA_TE201306UV"/>
            <ns3:subject typeCode="SUBJ">
               <ns3:registrationEvent moodCode="" classCode="">
                  <ns3:id nullFlavor="NA"/>
                  <ns3:statusCode code="active"/>
                  <ns3:subject1 typeCode="">
                     <ns3:patient classCode="PAT">
                        <ns3:id extension="1234" root="2.2.2"/>
                        <ns3:statusCode code="SD"/>
                        <ns3:patientPerson>
                           <ns3:name>
                              <ns3:family partType="FAM">Winslet</ns3:family>
                              <ns3:given partType="GIV">Kate</ns3:given>
                           </ns3:name>
                           <ns3:administrativeGenderCode code="M"/>
                           <ns3:birthTime value="19560301"/>
                           <ns3:addr>
                              <ns3:city>Orlando</ns3:city>
                              <ns3:state>FL</ns3:state>
                              <ns3:postalCode>98765</ns3:postalCode>
                           </ns3:addr>
                        </ns3:patientPerson>
                        <ns3:providerOrganization determinerCode="" classCode="">
                           <ns3:id root="2.2.2"/>
                           <ns3:contactParty xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        </ns3:providerOrganization>
                        <ns3:subjectOf1>
                           <ns3:queryMatchObservation moodCode="" classCode="">
                              <ns3:code code="IHE_PDQ"/>
                              <ns3:value xsi:type="ns3:INT" value="100" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                           </ns3:queryMatchObservation>
                        </ns3:subjectOf1>
                     </ns3:patient>
                  </ns3:subject1>
                  <ns3:custodian typeCode="">
                     <ns3:assignedEntity classCode="">
                        <ns3:id root="2.2.2"/>
                     </ns3:assignedEntity>
                  </ns3:custodian>
               </ns3:registrationEvent>
            </ns3:subject>
            <ns3:queryAck>
               <ns3:queryId extension="-abd3453dcd24wkkks545" root="1.1"/>
               <ns3:queryResponseCode code="OK"/>
               <ns3:resultTotalQuantity value="1"/>
               <ns3:resultCurrentQuantity value="1"/>
               <ns3:resultRemainingQuantity value="0"/>
            </ns3:queryAck>
            <ns3:queryByParameter xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:controlActProcess>
      </ns3:PRPA_IN201306UV02>
   </S:Body>
</S:Envelope>]]></con:responseContent>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
					</con:response>
					<con:host/>
				</con:config>
			</con:testStep>
			<con:testStep name="count correlations (0)" type="groovy">
				<con:settings/>
				<con:config>
					<script>import groovy.sql.Sql;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def host = dataSource.getPropertyValue( "SUT.PatientCorrelationHost" );
def port = dataSource.getPropertyValue( "SUT.PatientCorrelationPort" );
def db = dataSource.getPropertyValue( "SUT.PatientCorrelationDB" );
def user = dataSource.getPropertyValue( "SUT.PatientCorrelationUser" );
def pass = dataSource.getPropertyValue( "SUT.PatientCorrelationPass" );
def table = dataSource.getPropertyValue( "SUT.PatientCorrelationTable" );
def PatientId =  dataSource.getPropertyValue( "PDSubjectID" );



int countRows(host, port, dbName, user, password, table, patId) {

   def sqlConnect = 'jdbc:mysql://' + host + ':' + port + '/' + dbName;
   def sql = Sql.newInstance(sqlConnect, user, password, "com.mysql.jdbc.Driver");
   def count = 0;
   sql.eachRow("select count(*) from " + table + " where PatientId = '" + patId + "'") { row -&gt;
	count = row[0];
   }
   return count;
}

def count = countRows(host, port, db, user, pass, table, PatientId);
assert count == 0;</script>
				</con:config>
			</con:testStep>
			<con:properties/>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:testCase disabled="true" failOnError="true" failTestCaseOnErrors="true" id="2b99b171-307c-4c09-aeb2-a901198e9f07" keepSession="false" maxResults="0" name="PatientDiscoveryPassthroughModeMockResponseTest" searchProperties="true">
			<con:settings/>
			<con:testStep name="EntityPatientDiscovery Test Case Properties" type="properties">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" createMissingOnLoad="true" discardValuesOnSave="true" saveFirst="true" xsi:type="con:PropertiesStep">
					<con:source>C:/Projects/NHINC/Current/Product/SoapUI_Test/RegressionSuite/EntityPatientDiscovery.properties</con:source>
					<con:target/>
					<con:properties>
						<con:property>
							<con:name>LocalAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDescription</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PatientDiscoveryEndpoint</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSubjectID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDzipCode</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDpurposeOfDisclosure</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSSN</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdOB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDexpirationDate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDuniquePatientId</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstreetAddress</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDCity</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDcountry</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdateOfSignature</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCDesc</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectAdministrativeGender</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectBirthTime</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDAssignAuthID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayConfigDir</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PEReceivingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>mockHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPort</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationDB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationUser</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPass</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationTable</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscovery Property Transfer" type="transfer">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:PropertyTransfersStep">
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PatientDiscoveryEndPoint</con:name>
						<con:sourceType>PatientDiscoveryEndpoint</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Endpoint</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath/>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>LocalHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>ReceivingHCID</con:name>
						<con:sourceType>PDRespondingHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:receiver[1]/urn:device[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true" transferToAll="false">
						<con:name>PDQueryRequestHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectGivenName</con:name>
						<con:sourceType>SingleMatchGivenName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:given[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectFamName</con:name>
						<con:sourceType>SingleMatchFamilyName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:family[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectBirthTime</con:name>
						<con:sourceType>PDlivingSubjectBirthTime</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectBirthTime[1]/urn:value[1]/@value</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectGender</con:name>
						<con:sourceType>PDlivingSubjectAdministrativeGender</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectAdministrativeGender[1]/urn:value[1]/@code</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionSSN</con:name>
						<con:sourceType>PDSSN</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:SSN[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionUniquePatientID</con:name>
						<con:sourceType>PDuniquePatientId</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:uniquePatientId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDAssignAuthId</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:authorOrPerformer[1]/urn:assignedDevice[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>PDQueryReqSubjectAssignAuthID</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectID</con:name>
						<con:sourceType>PDSubjectID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@extension</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:homeCommunityId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true" transferToAll="false">
						<con:name>AssertionHCIDDesc</con:name>
						<con:sourceType>LocalHCIDescription</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:description[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCIDname</con:name>
						<con:sourceType>LocalHCIDName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:name[1]</con:targetPath>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep name="MockResponse Property Transfer" type="transfer">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:PropertyTransfersStep">
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>MockGivenName</con:name>
						<con:sourceType>NoMatchGivenName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Response</con:targetType>
						<con:targetStep>NHINCProxyPatientDiscoveryMockResponse</con:targetStep>
						<con:targetPath>declare namespace ns3='urn:hl7-org:v3';
//ns3:PRPA_IN201306UV02[1]/ns3:controlActProcess[1]/ns3:subject[1]/ns3:registrationEvent[1]/ns3:subject1[1]/ns3:patient[1]/ns3:patientPerson[1]/ns3:name[1]/ns3:given[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>MockFamilyName</con:name>
						<con:sourceType>NoMatchFamilyName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Response</con:targetType>
						<con:targetStep>NHINCProxyPatientDiscoveryMockResponse</con:targetStep>
						<con:targetPath>declare namespace ns3='urn:hl7-org:v3';
//ns3:PRPA_IN201306UV02[1]/ns3:controlActProcess[1]/ns3:subject[1]/ns3:registrationEvent[1]/ns3:subject1[1]/ns3:patient[1]/ns3:patientPerson[1]/ns3:name[1]/ns3:family[1]</con:targetPath>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep name="Intialize Configurations" type="groovy">
				<con:settings/>
				<con:config>
					<script>FileUtils.InitializeNHINCProperties(context, log);
					</script>
				</con:config>
			</con:testStep>
			<con:testStep name="Set Response Mode" type="groovy">
				<con:settings/>
				<con:config>
					<script>def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destDir = dataSource.getPropertyValue( "NHINGatewayConfigDir" );

FileUtils.UpdateProperty(destDir, 'gateway.properties', 'patientDiscoveryResponseMode', 'passthrough',context,log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="clear correlations table" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def host = dataSource.getPropertyValue( "SUT.PatientCorrelationHost" );
def port = dataSource.getPropertyValue( "SUT.PatientCorrelationPort" );
def db = dataSource.getPropertyValue( "SUT.PatientCorrelationDB" );
def user = dataSource.getPropertyValue( "SUT.PatientCorrelationUser" );
def pass = dataSource.getPropertyValue( "SUT.PatientCorrelationPass" );
def table = dataSource.getPropertyValue( "SUT.PatientCorrelationTable" );

DBFunctions.clearTable(host, port, db, user, pass, table);</script>
				</con:config>
			</con:testStep>
			<con:testStep name="ModifyInternalConnectionInfoUsingTestHelper" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destConfigFileLocation = dataSource.getPropertyValue("NHINGatewayConfigDir");
def NHINGatewayHost = dataSource.getPropertyValue("NHINGatewayHost");
def mockHost = dataSource.getPropertyValue("mockHost");
def patientdiscoveryURL = "https://" + NHINGatewayHost + ":8181/CONNECTGatewayTest/NhinPatientDiscoveryTestHelper";
def mockPatientDiscoveryURL = "http://" + mockHost + ":2222/EntityPatientDiscoveryMockResponse";
def LocalHCID = dataSource.getPropertyValue( "LocalHCID" );
def RemoteHCID = dataSource.getPropertyValue("PDRespondingHCID");

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "patientdiscovery", patientdiscoveryURL, context, log)
FileUtils.CreateOrUpdateConnection(destConfigFileLocation, LocalHCID, "mockpatientdiscovery", mockPatientDiscoveryURL, context, log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscoveryRequest" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>EntityPatientDiscoveryBindingSoap</con:interface>
					<con:operation>RespondingGateway_PRPA_IN201305UV02</con:operation>
					<con:request name="EntityPatientDiscoveryRequest">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>https://localhost:${HttpsDefaultPort}/NhinConnect/EntityPatientDiscovery</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="I"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="2.2"/>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="1.1"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="1.1.1"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.2" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="M"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="19630804" operator="I"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">Smith</urn:family>
                           <urn:given partType="GIV">Joe</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value root="1.1.1" extension="1111" assigningAuthorityName="?"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:NhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>2.2</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>19800516</urn1:dateOfBirth>
            <urn1:dateOfSignature>20080520</urn1:dateOfSignature>
            <urn1:expirationDate>20100520</urn1:expirationDate>
            <urn1:explanationNonClaimantSignature>NEEDED</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>true</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>true</urn1:haveSignature>
            <urn1:haveWitnessSignature>true</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Winslet</urn1:familyName>
               <urn1:givenName>Kate</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>FJ</urn1:secondNameOrInitials>
               <urn1:fullName>Joe Smith</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1234</urn1:extension>
               <urn1:localNumber>3456789</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:purposeOfDisclosure>Mental</urn1:purposeOfDisclosure>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Melbourne</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>123 Johnson Rd</urn1:streetAddress>
               <urn1:zipCode>12345</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Hughes</urn1:familyName>
               <urn1:givenName>Howie</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>HH</urn1:secondNameOrInitials>
               <urn1:fullName>Howie Hughes</urn1:fullName>
               <urn1:prefix>Dr</urn1:prefix>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>123</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>1546</urn1:extension>
               <urn1:localNumber>4567892</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>W</urn1:code>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <!--1 or more repetitions:-->
            <urn1:uniquePatientId>1111^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>W</urn1:code>
               </urn1:addressType>
               <urn1:city>Frankfort</urn1:city>
               <urn1:country>US</urn1:country>
               <urn1:state>MN</urn1:state>
               <urn1:streetAddress>432 Jackson St</urn1:streetAddress>
               <urn1:zipCode>65498</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Ugble</urn1:familyName>
               <urn1:givenName>Gary</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>G</urn1:code>
               </urn1:nameType>
               <urn1:secondNameOrInitials>GU</urn1:secondNameOrInitials>
               <urn1:fullName>Gary Ugble</urn1:fullName>
               <urn1:prefix>Mr</urn1:prefix>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>987</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>6549</urn1:extension>
               <urn1:localNumber>2222222</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>H</urn1:code>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Anderson</urn1:familyName>
                  <urn1:givenName>Wilma</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>G</urn1:code>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>WA</urn1:secondNameOrInitials>
                  <urn1:fullName>Wilma Anderson</urn1:fullName>
                  <urn1:prefix>Mrs</urn1:prefix>
               </urn1:personName>
               <urn1:userName>wanderson</urn1:userName>
               <urn1:role>nuse</urn1:role>
               <urn1:org>
                  <urn1:description>Test HCID1</urn1:description>
                  <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
                  <urn1:name>HCID1</urn1:name>
               </urn1:org>
               <!--Optional:-->
               <urn1:roleCoded>
                  <urn1:code>Code</urn1:code>
                  <urn1:codeSystem>CodeSystem</urn1:codeSystem>
                  <urn1:codeSystemName>CodeSystemName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>codeSystemVersion</urn1:codeSystemVersion>
                  <urn1:displayName>displayName</urn1:displayName>
                  <urn1:originalText>originalText</urn1:originalText>
                  <!--Zero or more repetitions:-->
                  <urn1:translation/>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>authorized</urn1:authorized>
            <!--Optional:-->
            <urn1:claimFormRef>claimFormRef</urn1:claimFormRef>
            <!--Optional:-->
            <urn1:claimFormRaw>cid:610957193055</urn1:claimFormRaw>
            <!--Optional:-->
            <urn1:samlAuthnStatement>
               <!--Optional:-->
               <urn1:authInstant>authInstant</urn1:authInstant>
               <!--Optional:-->
               <urn1:sessionIndex>sessionIndex</urn1:sessionIndex>
               <!--Optional:-->
               <urn1:authContextClassRef>authContextClassRef</urn1:authContextClassRef>
               <!--Optional:-->
               <urn1:subjectLocalityAddress>subjectLocalityAddress</urn1:subjectLocalityAddress>
               <!--Optional:-->
               <urn1:subjectLocalityDNSName>subjectLocalityDNSName</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <!--Optional:-->
            <urn1:samlAuthzDecisionStatement>
               <!--Optional:-->
               <urn1:decision>decision</urn1:decision>
               <!--Optional:-->
               <urn1:resource>resource</urn1:resource>
               <!--Optional:-->
               <urn1:action>action</urn1:action>
               <!--Optional:-->
               <urn1:evidence>
                  <!--Optional:-->
                  <urn1:assertion>
                     <!--Optional:-->
                     <urn1:id>5555</urn1:id>
                     <!--Optional:-->
                     <urn1:issueInstant>issueInstant</urn1:issueInstant>
                     <!--Optional:-->
                     <urn1:version>version</urn1:version>
                     <!--Optional:-->
                     <urn1:issuer>issuer</urn1:issuer>
                     <!--Optional:-->
                     <urn1:issuerFormat>issuerFormat</urn1:issuerFormat>
                     <!--Optional:-->
                     <urn1:conditions>
                        <!--Optional:-->
                        <urn1:notBefore>notBefore</urn1:notBefore>
                        <!--Optional:-->
                        <urn1:notOnOrAfter>notOnOrAfter</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <!--Optional:-->
                     <urn1:contentReference>contentReference</urn1:contentReference>
                     <!--Optional:-->
                     <urn1:contentType>contentType</urn1:contentType>
                     <!--Optional:-->
                     <urn1:content>cid:574777349023</urn1:content>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
            <!--Optional:-->
            <urn1:samlSignature>
               <!--Optional:-->
               <urn1:keyInfo>
                  <!--Optional:-->
                  <urn1:rsaKeyValueModulus>cid:1157111506023</urn1:rsaKeyValueModulus>
                  <!--Optional:-->
                  <urn1:rsaKeyValueExponent>cid:136268302631</urn1:rsaKeyValueExponent>
               </urn1:keyInfo>
               <!--Optional:-->
               <urn1:signatureValue>cid:880867232879</urn1:signatureValue>
            </urn1:samlSignature>
         </urn:assertion>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion disabled="true" type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="NHINCProxyPatientDiscoveryMockResponse" type="mockresponse">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" startStep="EntityPatientDiscoveryRequest" xsi:type="con:MockResponseStep">
					<con:interface>NhincProxyPatientDiscoveryBinding</con:interface>
					<con:operation>Proxy_PRPA_IN201305UV</con:operation>
					<con:path>/EntityPatientDiscoveryMockResponse</con:path>
					<con:port>2222</con:port>
					<con:timeout>30000</con:timeout>
					<con:response>
						<con:settings/>
						<con:responseContent><![CDATA[
							<S:Envelope xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <S:Body>
      <ns3:PRPA_IN201306UV02 ITSVersion="XML_1.0" xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns3="urn:hl7-org:v3" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:patientcorrelationfacade">
         <ns3:id extension="4191797c:1259356875e:-7c2d" root="1.1.1"/>
         <ns3:creationTime value="2009121522276"/>
         <ns3:interactionId extension="PRPA_IN201306UV" root="2.16.840.1.113883.1.6"/>
         <ns3:processingCode code="P"/>
         <ns3:processingModeCode code="R"/>
         <ns3:acceptAckCode code="AL"/>
         <ns3:receiver typeCode="RCV">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:receiver>
         <ns3:sender typeCode="SND">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:sender>
         <ns3:acknowledgement>
            <ns3:typeId extension="PRPA_IN201305UV02" root="2.16.840.1.113883.1.6"/>
            <ns3:typeCode code="AA"/>
            <ns3:targetMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:acknowledgement>
         <ns3:controlActProcess moodCode="EVN" classCode="">
            <ns3:code codeSystem="2.16.840.1.113883.1.6" code="PRPA_TE201306UV"/>
            <ns3:subject typeCode="SUBJ">
               <ns3:registrationEvent moodCode="" classCode="">
                  <ns3:id nullFlavor="NA"/>
                  <ns3:statusCode code="active"/>
                  <ns3:subject1 typeCode="">
                     <ns3:patient classCode="PAT">
                        <ns3:id extension="1234" root="2.2.2"/>
                        <ns3:statusCode code="SD"/>
                        <ns3:patientPerson>
                           <ns3:name>
                              <ns3:family partType="FAM">Winslet</ns3:family>
                              <ns3:given partType="GIV">Kate</ns3:given>
                           </ns3:name>
                           <ns3:administrativeGenderCode code="M"/>
                           <ns3:birthTime value="19560301"/>
                           <ns3:addr>
                              <ns3:city>Orlando</ns3:city>
                              <ns3:state>FL</ns3:state>
                              <ns3:postalCode>98765</ns3:postalCode>
                           </ns3:addr>
                        </ns3:patientPerson>
                        <ns3:providerOrganization determinerCode="" classCode="">
                           <ns3:id root="2.2.2"/>
                           <ns3:contactParty xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        </ns3:providerOrganization>
                        <ns3:subjectOf1>
                           <ns3:queryMatchObservation moodCode="" classCode="">
                              <ns3:code code="IHE_PDQ"/>
                              <ns3:value xsi:type="ns3:INT" value="100" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                           </ns3:queryMatchObservation>
                        </ns3:subjectOf1>
                     </ns3:patient>
                  </ns3:subject1>
                  <ns3:custodian typeCode="">
                     <ns3:assignedEntity classCode="">
                        <ns3:id root="1.1.2.16.840.1.113883.3.198"/>
                     </ns3:assignedEntity>
                  </ns3:custodian>
               </ns3:registrationEvent>
            </ns3:subject>
            <ns3:queryAck>
               <ns3:queryId extension="-abd3453dcd24wkkks545" root="1.1"/>
               <ns3:queryResponseCode code="OK"/>
               <ns3:resultTotalQuantity value="1"/>
               <ns3:resultCurrentQuantity value="1"/>
               <ns3:resultRemainingQuantity value="0"/>
            </ns3:queryAck>
            <ns3:queryByParameter xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:controlActProcess>
      </ns3:PRPA_IN201306UV02>
   </S:Body>
</S:Envelope>]]></con:responseContent>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
					</con:response>
					<con:host/>
				</con:config>
			</con:testStep>
			<con:testStep name="count correlations (0)" type="groovy">
				<con:settings/>
				<con:config>
					<script>import groovy.sql.Sql;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def host = dataSource.getPropertyValue( "SUT.PatientCorrelationHost" );
def port = dataSource.getPropertyValue( "SUT.PatientCorrelationPort" );
def db = dataSource.getPropertyValue( "SUT.PatientCorrelationDB" );
def user = dataSource.getPropertyValue( "SUT.PatientCorrelationUser" );
def pass = dataSource.getPropertyValue( "SUT.PatientCorrelationPass" );
def table = dataSource.getPropertyValue( "SUT.PatientCorrelationTable" );
def PatientId =  dataSource.getPropertyValue( "PDSubjectID" );



int countRows(host, port, dbName, user, password, table, patId) {

   def sqlConnect = 'jdbc:mysql://' + host + ':' + port + '/' + dbName;
   def sql = Sql.newInstance(sqlConnect, user, password, "com.mysql.jdbc.Driver");
   def count = 0;
   sql.eachRow("select count(*) from " + table + " where PatientId = '" + patId + "'") { row -&gt;
	count = row[0];
   }
   return count;
}

def count = countRows(host, port, db, user, pass, table, PatientId);
assert count == 0;</script>
				</con:config>
			</con:testStep>
			<con:properties/>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:testCase failOnError="true" failTestCaseOnErrors="true" id="622e64a4-3ec7-4f5c-ac94-1d976bc4be02" keepSession="false" maxResults="0" name="PatientDiscoveryAuditLogTest" searchProperties="true">
			<con:settings/>
			<con:testStep name="EntityPatientDiscovery Test Case Properties" type="properties">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" createMissingOnLoad="true" discardValuesOnSave="true" saveFirst="true" xsi:type="con:PropertiesStep">
					<con:source>C:/Projects/NHINC/Current/Product/SoapUI_Test/RegressionSuite/EntityPatientDiscovery.properties</con:source>
					<con:target/>
					<con:properties>
						<con:property>
							<con:name>LocalAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDescription</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PatientDiscoveryEndpoint</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSubjectID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDzipCode</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingAA</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDpurposeOfDisclosure</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDSSN</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdOB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDexpirationDate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDuniquePatientId</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstreetAddress</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDstate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDCity</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDcountry</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDdateOfSignature</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCDesc</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDRespondingHCName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectAdministrativeGender</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDlivingSubjectBirthTime</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>LocalHCIDName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PDAssignAuthID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayConfigDir</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NHINGatewayHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>PEReceivingHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>mockHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SingleMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationHost</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPort</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationDB</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationUser</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationPass</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>SUT.PatientCorrelationTable</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchPrefix</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchGivenName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFullName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>NoMatchFamilyName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep name="Audit check properties" type="properties">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" createMissingOnLoad="true" discardValuesOnSave="true" saveFirst="true" xsi:type="con:PropertiesStep">
					<con:source>C:/Projects/NHINC/Current/Product/SoapUI_Test/RegressionSuite/PatientDiscoveryAuditLogQueryProperties.properties</con:source>
					<con:target/>
					<con:properties>
						<con:property>
							<con:name>startDate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>endDate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>sigDate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>expireDate</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>AQUserID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>patientID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>targetHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>targetName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>OrgHCID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>OrgHCName</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>OrgHCDescription</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>endpointTransfer</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>UserId</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>FullPatientID</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
						<con:property>
							<con:name>targetDescription</con:name>
							<con:value xsi:nil="true"/>
						</con:property>
					</con:properties>
				</con:config>
			</con:testStep>
			<con:testStep name="clear audit table" type="groovy"><con:settings/><con:config><script>context.withSql('AuditDB') { sql -&gt; 
  sql.execute('delete from ' + context.findProperty('AuditTable'))
}</script></con:config></con:testStep><con:testStep name="Intialize Configurations" type="groovy">
				<con:settings/>
				<con:config>
					<script>FileUtils.InitializeNHINCProperties(context, log);
					</script>
				</con:config>
			</con:testStep>
			<con:testStep name="Set Response Mode" type="groovy">
				<con:settings/>
				<con:config>
					<script>def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destDir = dataSource.getPropertyValue( "NHINGatewayConfigDir" );

FileUtils.UpdateProperty(destDir, 'gateway.properties', 'patientDiscoveryResponseMode', 'Verify',context,log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="get Dates" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );

sdf = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
sdf.setTimeZone(TimeZone.getTimeZone("UTC"));

sdf2 = new java.text.SimpleDateFormat("MM/dd/yyyy' 'HH:mm:ss");
sdf2.setTimeZone(TimeZone.getTimeZone("UTC"));

Calendar cal = new GregorianCalendar();
nowDate = new Date();

cal.setTime(nowDate);
cal.add(Calendar.MINUTE, -5);
startDate = cal.getTime();
startDateStr = sdf.format(startDate);
sigDateStr = sdf2.format(startDate);

cal.setTime(nowDate);
cal.add(Calendar.MINUTE, 5);
endDate = cal.getTime();
endDateStr = sdf.format(endDate);

cal.setTime(nowDate);
cal.add(Calendar.DATE, 30);
expireDate = cal.getTime();
expireDateStr = sdf2.format(expireDate);

groovyUtils.setPropertyValue( "Audit check properties", "startDate", startDateStr);
groovyUtils.setPropertyValue( "Audit check properties", "endDate", endDateStr);
groovyUtils.setPropertyValue( "Audit check properties", "sigDate", sigDateStr);
groovyUtils.setPropertyValue( "Audit check properties", "expireDate", expireDateStr);
					</script>
				</con:config>
			</con:testStep>
			<con:testStep name="get Patient ID" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def propertyList = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def LocalAA = propertyList.getPropertyValue( "PDAssignAuthID" );
def PDPatientID = propertyList.getPropertyValue( "PDSubjectID" );

//fullPatientID = "'" + PDPatientID + "^^^&amp;" + LocalAA + "&amp;ISO'";
fullPatientID = PDPatientID + "^^^&amp;" + LocalAA + "&amp;ISO";
groovyUtils.setPropertyValue( "Audit check properties", "FullPatientID", fullPatientID);
log.info PDPatientID
log.info fullPatientID</script>
				</con:config>
			</con:testStep>
			<con:testStep name="get User ID" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def propertyList = testRunner.testCase.getTestStepByName( "Audit check properties" );
def AQUserID = propertyList.getPropertyValue( "AQUserID" );
def Date = propertyList.getPropertyValue( "startDate" );

nowDate = new Date();
UserId = AQUserID + nowDate;
groovyUtils.setPropertyValue( "Audit check properties", "UserId", UserId);
log.info UserId</script>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscovery Property Transfer" type="transfer">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:PropertyTransfersStep">
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PatientDiscoveryEndPoint</con:name>
						<con:sourceType>PatientDiscoveryEndpoint</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Endpoint</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath/>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>LocalHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>ReceivingHCID</con:name>
						<con:sourceType>PDRespondingHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:receiver[1]/urn:device[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true" transferToAll="false">
						<con:name>PDQueryRequestHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:sender[1]/urn:device[1]/urn:asAgent[1]/urn:representedOrganization[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>PDQueryRequestSubjectGivenName</con:name>
						<con:sourceType>NoMatchGivenName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:given[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectFamName</con:name>
						<con:sourceType>NoMatchFamilyName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectName[1]/urn:value[1]/urn:family[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectBirthTime</con:name>
						<con:sourceType>PDlivingSubjectBirthTime</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectBirthTime[1]/urn:value[1]/@value</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectGender</con:name>
						<con:sourceType>PDlivingSubjectAdministrativeGender</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectAdministrativeGender[1]/urn:value[1]/@code</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionSSN</con:name>
						<con:sourceType>PDSSN</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:SSN[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionUniquePatientID</con:name>
						<con:sourceType>PDuniquePatientId</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:uniquePatientId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDAssignAuthId</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:authorOrPerformer[1]/urn:assignedDevice[1]/urn:id[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>PDQueryReqSubjectAssignAuthID</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@root</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>PDQueryRequestSubjectID</con:name>
						<con:sourceType>PDSubjectID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:PRPA_IN201305UV02[1]/urn:controlActProcess[1]/urn:queryByParameter[1]/urn:parameterList[1]/urn:livingSubjectId[1]/urn:value[1]/@extension</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCID</con:name>
						<con:sourceType>LocalHCID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:homeCommunityId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" setNullOnMissingSource="true" transferTextContent="true" transferToAll="false">
						<con:name>AssertionHCIDDesc</con:name>
						<con:sourceType>LocalHCIDescription</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:description[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>AssertionHCIDname</con:name>
						<con:sourceType>LocalHCIDName</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:sourcePath xsi:nil="true"/>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:name[1]</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>AssertionUserID</con:name>
						<con:sourceType>UserId</con:sourceType>
						<con:sourceStep>Audit check properties</con:sourceStep>
						<con:targetType>Request</con:targetType>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
declare namespace urn='urn:hl7-org:v3';
//urn:RespondingGateway_PRPA_IN201305UV02Request[1]/urn:assertion[1]/urn1:userInfo[1]/urn1:userName[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>MockAA</con:name>
						<con:sourceType>PDAssignAuthID</con:sourceType>
						<con:sourceStep>EntityPatientDiscovery Test Case Properties</con:sourceStep>
						<con:targetType>Response</con:targetType>
						<con:targetStep>NHINCProxyPatientDiscoveryMockResponse</con:targetStep>
						<con:targetPath>declare namespace ns3='urn:hl7-org:v3';
//ns3:PRPA_IN201306UV02[1]/ns3:controlActProcess[1]/ns3:subject[1]/ns3:registrationEvent[1]/ns3:subject1[1]/ns3:patient[1]/ns3:id[1]/@root</con:targetPath>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep name="set audit log query properties" type="transfer">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:PropertyTransfersStep">
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>endpointTransfer</con:name>
						<con:sourceType>endpointTransfer</con:sourceType>
						<con:sourceStep>Audit check properties</con:sourceStep>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath/>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>userID</con:name>
						<con:sourceType>UserId</con:sourceType>
						<con:sourceStep>Audit check properties</con:sourceStep>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
declare namespace aud='http://nhinc.services.com/schema/auditmessage';
//urn:FindAuditEventsRequest[1]/aud:FindAuditEvents[1]/aud:userId[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>patientID</con:name>
						<con:sourceType>FullPatientID</con:sourceType>
						<con:sourceStep>Audit check properties</con:sourceStep>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
declare namespace aud='http://nhinc.services.com/schema/auditmessage';
//urn:FindAuditEventsRequest[1]/aud:FindAuditEvents[1]/aud:patientId[1]</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>beginDate</con:name>
						<con:sourceType>startDate</con:sourceType>
						<con:sourceStep>Audit check properties</con:sourceStep>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
declare namespace aud='http://nhinc.services.com/schema/auditmessage';
//urn:FindAuditEventsRequest[1]/aud:FindAuditEvents[1]/aud:beginDateTime[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>endDate</con:name>
						<con:sourceType>endDate</con:sourceType>
						<con:sourceStep>Audit check properties</con:sourceStep>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
declare namespace aud='http://nhinc.services.com/schema/auditmessage';
//urn:FindAuditEventsRequest[1]/aud:FindAuditEvents[1]/aud:endDateTime[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>targetHCID</con:name>
						<con:sourceType>targetHCID</con:sourceType>
						<con:sourceStep>Audit check properties</con:sourceStep>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
//urn:FindAuditEventsRequest[1]/urn:nhinTargetSystem[1]/urn1:homeCommunity[1]/urn1:homeCommunityId[1]</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>targetDescription</con:name>
						<con:sourceType>targetDescription</con:sourceType>
						<con:sourceStep>Audit check properties</con:sourceStep>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
//urn:FindAuditEventsRequest[1]/urn:nhinTargetSystem[1]/urn1:homeCommunity[1]/urn1:description[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>targetName</con:name>
						<con:sourceType>targetName</con:sourceType>
						<con:sourceStep>Audit check properties</con:sourceStep>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
//urn:FindAuditEventsRequest[1]/urn:nhinTargetSystem[1]/urn1:homeCommunity[1]/urn1:name[1]</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>assertionHCID</con:name>
						<con:sourceType>OrgHCID</con:sourceType>
						<con:sourceStep>Audit check properties</con:sourceStep>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
//urn:FindAuditEventsRequest[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:homeCommunityId[1]</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>assertionHCName</con:name>
						<con:sourceType>OrgHCName</con:sourceType>
						<con:sourceStep>Audit check properties</con:sourceStep>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
//urn:FindAuditEventsRequest[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:name[1]</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>assertionHCDescription</con:name>
						<con:sourceType>OrgHCDescription</con:sourceType>
						<con:sourceStep>Audit check properties</con:sourceStep>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
//urn:FindAuditEventsRequest[1]/urn:assertion[1]/urn1:homeCommunity[1]/urn1:description[1]</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>orgHCID</con:name>
						<con:sourceType>OrgHCID</con:sourceType>
						<con:sourceStep>Audit check properties</con:sourceStep>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
//urn:FindAuditEventsRequest[1]/urn:assertion[1]/urn1:userInfo[1]/urn1:org[1]/urn1:homeCommunityId[1]</con:targetPath>
					</con:transfers>
					<con:transfers failOnError="true" setNullOnMissingSource="true" transferTextContent="true">
						<con:name>orgHCName</con:name>
						<con:sourceType>OrgHCName</con:sourceType>
						<con:sourceStep>Audit check properties</con:sourceStep>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
//urn:FindAuditEventsRequest[1]/urn:assertion[1]/urn1:userInfo[1]/urn1:org[1]/urn1:name[1]</con:targetPath>
					</con:transfers>
					<con:transfers entitize="false" failOnError="true" ignoreEmpty="false" setNullOnMissingSource="true" transferChildNodes="false" transferTextContent="true" transferToAll="false" useXQuery="false">
						<con:name>orgHCDescription</con:name>
						<con:sourceType>OrgHCDescription</con:sourceType>
						<con:sourceStep>Audit check properties</con:sourceStep>
						<con:targetType xsi:nil="true"/>
						<con:targetStep>EntityPatientDiscoveryRequest</con:targetStep>
						<con:targetPath>declare namespace urn='urn:gov:hhs:fha:nhinc:common:nhinccommonproxy';
declare namespace urn1='urn:gov:hhs:fha:nhinc:common:nhinccommon';
//urn:FindAuditEventsRequest[1]/urn:assertion[1]/urn1:userInfo[1]/urn1:org[1]/urn1:description[1]</con:targetPath>
					</con:transfers>
				</con:config>
			</con:testStep>
			<con:testStep name="ModifyInternalConnectionInfoUsingTestHelper" type="groovy">
				<con:settings/>
				<con:config>
					<script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context );
def dataSource = testRunner.testCase.getTestStepByName( "EntityPatientDiscovery Test Case Properties" );
def destConfigFileLocation = dataSource.getPropertyValue("NHINGatewayConfigDir");
def NHINGatewayHost = dataSource.getPropertyValue("NHINGatewayHost");
def mockHost = dataSource.getPropertyValue("mockHost");
def patientdiscoveryURL = "https://" + NHINGatewayHost + ":8181/CONNECTGatewayTest/NhinPatientDiscoveryTestHelper";
def mockPatientDiscoveryURL = "http://" + mockHost + ":2222/EntityPatientDiscoveryMockResponse";
def LocalHCID = dataSource.getPropertyValue( "LocalHCID" );
def RemoteHCID = dataSource.getPropertyValue("PDRespondingHCID");

FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "PatientDiscovery", patientdiscoveryURL, context, log)
FileUtils.CreateOrUpdateConnection(destConfigFileLocation, RemoteHCID, "mockpatientdiscovery", mockPatientDiscoveryURL, context, log)</script>
				</con:config>
			</con:testStep>
			<con:testStep name="EntityPatientDiscoveryRequest" type="request">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="con:RequestStep">
					<con:interface>EntityPatientDiscoveryBindingSoap</con:interface>
					<con:operation>RespondingGateway_PRPA_IN201305UV02</con:operation>
					<con:request name="EntityPatientDiscoveryRequest">
						<con:settings/>
						<con:encoding>UTF-8</con:encoding>
						<con:endpoint>http://localhost:8080/CONNECTGateway/EntityPatientDiscovery</con:endpoint>
						<con:request><![CDATA[
							<soapenv:Envelope xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope" xmlns:urn="urn:hl7-org:v3" xmlns:urn1="urn:gov:hhs:fha:nhinc:common:nhinccommon">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:RespondingGateway_PRPA_IN201305UV02Request>
         <urn:PRPA_IN201305UV02 ITSVersion="XML_1.0">
            <urn:id root="1.1" extension="-5a3e95b1:11d1fa33d45:-7f9b"/>
            <urn:creationTime value="20091116084800"/>
            <urn:interactionId root="2.16.840.1.113883.1.6" extension="PRPA_IN201305UV02"/>
            <urn:processingCode code="T"/>
            <urn:processingModeCode code="I"/>
            <urn:acceptAckCode code="AL"/>
            <urn:receiver typeCode="RCV">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="2.2"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="2.2"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:receiver>
            <urn:sender typeCode="SND">
               <urn:device classCode="DEV" determinerCode="INSTANCE">
                  <urn:id root="1.2.345.678.999"/>
                  <urn:asAgent classCode="AGNT">
                     <urn:representedOrganization classCode="ORG" determinerCode="INSTANCE">
                        <urn:id root="1.1"/>
                     </urn:representedOrganization>
                  </urn:asAgent>
               </urn:device>
            </urn:sender>
            <urn:controlActProcess classCode="CACT" moodCode="EVN">
               <code code="PRPA_TE201305UV02" codeSystem="2.16.840.1.113883.1.6"/>
               <urn:authorOrPerformer typeCode="AUT">
                  <urn:assignedDevice>
                     <urn:id root="1.1.2.16.840.1.113883.3.198"/>
                  </urn:assignedDevice>
               </urn:authorOrPerformer>
               <urn:queryByParameter>
                  <urn:queryId root="2.2" extension="-abd3453dcd24wkkks545"/>
                  <urn:statusCode code="new"/>
                  <urn:responseModalityCode code="R"/>
                  <urn:responsePriorityCode code="I"/>
                  <urn:parameterList>
                     <urn:livingSubjectAdministrativeGender>
                        <urn:value code="M"/>
                        <urn:semanticsText representation="TXT">LivingSubject.administrativeGender</urn:semanticsText>
                     </urn:livingSubjectAdministrativeGender>
                     <urn:livingSubjectBirthTime>
                        <urn:value value="19630804" operator="I"/>
                        <urn:semanticsText representation="TXT">LivingSubject.birthTime</urn:semanticsText>
                     </urn:livingSubjectBirthTime>
                     <urn:livingSubjectName>
                        <urn:value>
                           <urn:family partType="FAM">Winslet</urn:family>
                           <urn:given partType="GIV">Kate</urn:given>
                        </urn:value>
                        <urn:semanticsText representation="TXT">LivingSubject.name</urn:semanticsText>
                     </urn:livingSubjectName>
                     <urn:livingSubjectId>
                        <urn:value root="1.1.2.16.840.1.113883.3.198" extension="1234" assigningAuthorityName="?"/>
                        <urn:semanticsText representation="TXT"/>
                     </urn:livingSubjectId>
                  </urn:parameterList>
               </urn:queryByParameter>
            </urn:controlActProcess>
         </urn:PRPA_IN201305UV02>
         <urn:NhinTargetCommunities>
            <urn1:nhinTargetCommunity>
               <urn1:homeCommunity>
                  <urn1:description>desc</urn1:description>
                  <urn1:homeCommunityId>2.2</urn1:homeCommunityId>
                  <urn1:name>Name</urn1:name>
               </urn1:homeCommunity>
               <urn1:list>List</urn1:list>
               <urn1:region>Region</urn1:region>
            </urn1:nhinTargetCommunity>
         </urn:NhinTargetCommunities>
         <urn:assertion>
            <urn1:address>
               <urn1:addressType>
                  <urn1:code>AddrCode</urn1:code>
                  <urn1:codeSystem>AddrCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>AddrCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>AddrCode</urn1:displayName>
                  <urn1:originalText>AddrCode</urn1:originalText>
               </urn1:addressType>
               <urn1:city>AddrCity</urn1:city>
               <urn1:country>AddrCountry</urn1:country>
               <urn1:state>AddrState</urn1:state>
               <urn1:streetAddress>AddrStreet</urn1:streetAddress>
               <urn1:zipCode>AddrZip</urn1:zipCode>
            </urn1:address>
            <urn1:dateOfBirth>06/04/1959 05:21:00</urn1:dateOfBirth>
            <urn1:explanationNonClaimantSignature>Electronic</urn1:explanationNonClaimantSignature>
            <urn1:haveSecondWitnessSignature>false</urn1:haveSecondWitnessSignature>
            <urn1:haveSignature>false</urn1:haveSignature>
            <urn1:haveWitnessSignature>false</urn1:haveWitnessSignature>
            <urn1:homeCommunity>
               <urn1:description>Test HCID1</urn1:description>
               <urn1:homeCommunityId>1.1</urn1:homeCommunityId>
               <urn1:name>HCID1</urn1:name>
            </urn1:homeCommunity>
            <urn1:personName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Sandy</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>nameCode</urn1:code>
                  <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>nameCode</urn1:displayName>
                  <urn1:originalText>nameCode</urn1:originalText>
               </urn1:nameType>
               <urn1:secondNameOrInitials>S</urn1:secondNameOrInitials>
               <urn1:fullName>Sandy S. Smith</urn1:fullName>
            </urn1:personName>
            <urn1:phoneNumber>
               <urn1:areaCode>321</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>5436</urn1:extension>
               <urn1:localNumber>253-6849</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>phoneCode</urn1:code>
                  <urn1:codeSystem>phoneCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>phoneCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>phoneCode</urn1:displayName>
                  <urn1:originalText>phoneCode</urn1:originalText>
               </urn1:phoneNumberType>
            </urn1:phoneNumber>
            <urn1:secondWitnessAddress>
               <urn1:addressType>
                  <urn1:code>AddrCode</urn1:code>
                  <urn1:codeSystem>AddrCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>AddrCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>AddrCode</urn1:displayName>
                  <urn1:originalText>AddrCode</urn1:originalText>
               </urn1:addressType>
               <urn1:city>Addr2City</urn1:city>
               <urn1:country>Addr2Country</urn1:country>
               <urn1:state>Addr2State</urn1:state>
               <urn1:streetAddress>Addr2Street</urn1:streetAddress>
               <urn1:zipCode>Addr2Zip</urn1:zipCode>
            </urn1:secondWitnessAddress>
            <urn1:secondWitnessName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Sammy</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>nameCode</urn1:code>
                  <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>nameCode</urn1:displayName>
                  <urn1:originalText>nameCode</urn1:originalText>
               </urn1:nameType>
               <urn1:secondNameOrInitials>s</urn1:secondNameOrInitials>
               <urn1:fullName>Sammy S. Smith</urn1:fullName>
            </urn1:secondWitnessName>
            <urn1:secondWitnessPhone>
               <urn1:areaCode>321</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>5424</urn1:extension>
               <urn1:localNumber>542-6823</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>phoneCode</urn1:code>
                  <urn1:codeSystem>phoneCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>phoneCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>phoneCode</urn1:displayName>
                  <urn1:originalText>phoneCode</urn1:originalText>
               </urn1:phoneNumberType>
            </urn1:secondWitnessPhone>
            <urn1:SSN>123456789</urn1:SSN>
            <urn1:uniquePatientId>1234^^^&amp;amp;1.1&amp;amp;ISO</urn1:uniquePatientId>
            <urn1:witnessAddress>
               <urn1:addressType>
                  <urn1:code>addrCode</urn1:code>
                  <urn1:codeSystem>addrCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>addrCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>addrCode</urn1:displayName>
                  <urn1:originalText>addrCode</urn1:originalText>
               </urn1:addressType>
               <urn1:city>Burnell</urn1:city>
               <urn1:country>USA</urn1:country>
               <urn1:state>FL</urn1:state>
               <urn1:streetAddress>825 North</urn1:streetAddress>
               <urn1:zipCode>32184</urn1:zipCode>
            </urn1:witnessAddress>
            <urn1:witnessName>
               <urn1:familyName>Smith</urn1:familyName>
               <urn1:givenName>Scott</urn1:givenName>
               <urn1:nameType>
                  <urn1:code>nameCode</urn1:code>
                  <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>nameCode</urn1:displayName>
                  <urn1:originalText>nameCode</urn1:originalText>
               </urn1:nameType>
               <urn1:secondNameOrInitials>S.</urn1:secondNameOrInitials>
               <urn1:fullName>Scott S. Smith</urn1:fullName>
            </urn1:witnessName>
            <urn1:witnessPhone>
               <urn1:areaCode>321</urn1:areaCode>
               <urn1:countryCode>1</urn1:countryCode>
               <urn1:extension>8432</urn1:extension>
               <urn1:localNumber>985-2239</urn1:localNumber>
               <urn1:phoneNumberType>
                  <urn1:code>phoneCode</urn1:code>
                  <urn1:codeSystem>phoneCodeSyst</urn1:codeSystem>
                  <urn1:codeSystemName>phoneCodeSystName</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>phoneCode</urn1:displayName>
                  <urn1:originalText>phoneCode</urn1:originalText>
               </urn1:phoneNumberType>
            </urn1:witnessPhone>
            <urn1:userInfo>
               <urn1:personName>
                  <urn1:familyName>Skagerberg</urn1:familyName>
                  <urn1:givenName>Karl</urn1:givenName>
                  <urn1:nameType>
                     <urn1:code>nameCode</urn1:code>
                     <urn1:codeSystem>nameCodeSyst</urn1:codeSystem>
                     <urn1:codeSystemName>nameCodeSystName</urn1:codeSystemName>
                     <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                     <urn1:displayName>nameCode</urn1:displayName>
                     <urn1:originalText>nameCode</urn1:originalText>
                  </urn1:nameType>
                  <urn1:secondNameOrInitials>S</urn1:secondNameOrInitials>
                  <urn1:fullName>Kasrl S. Skagerberg</urn1:fullName>
               </urn1:personName>
               <urn1:userName>PDUserMon Jun 21 12:49:49 EDT 2010</urn1:userName>
               <urn1:org>
                  <urn1:description>InternalSelfTest2</urn1:description>
                  <urn1:homeCommunityId>2.2</urn1:homeCommunityId>
                  <urn1:name>InternalSelfTest2</urn1:name>
               </urn1:org>
               <urn1:roleCoded>
                  <urn1:code>307969004</urn1:code>
                  <urn1:codeSystem>2.16.840.1.113883.6.96</urn1:codeSystem>
                  <urn1:codeSystemName>SNOMED_CT</urn1:codeSystemName>
                  <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
                  <urn1:displayName>Public Health</urn1:displayName>
                  <urn1:originalText>Public Health</urn1:originalText>
               </urn1:roleCoded>
            </urn1:userInfo>
            <urn1:authorized>true</urn1:authorized>
            <urn1:purposeOfDisclosureCoded>
               <urn1:code>PUBLICHEALTH</urn1:code>
               <urn1:codeSystem>2.16.840.1.113883.3.18.7.1</urn1:codeSystem>
               <urn1:codeSystemName>nhin-purpose</urn1:codeSystemName>
               <urn1:codeSystemVersion>1.0</urn1:codeSystemVersion>
               <urn1:displayName>Use or disclosure of Psychotherapy Notes</urn1:displayName>
               <urn1:originalText>Use or disclosure of Psychotherapy Notes</urn1:originalText>
            </urn1:purposeOfDisclosureCoded>
            <urn1:samlAuthnStatement>
               <urn1:authInstant>2009-04-16T13:15:39Z</urn1:authInstant>
               <urn1:sessionIndex>987</urn1:sessionIndex>
               <urn1:authContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:X509</urn1:authContextClassRef>
               <urn1:subjectLocalityAddress>158.147.185.168</urn1:subjectLocalityAddress>
               <urn1:subjectLocalityDNSName>cs.myharris.net</urn1:subjectLocalityDNSName>
            </urn1:samlAuthnStatement>
            <urn1:samlAuthzDecisionStatement>
               <urn1:decision>Permit</urn1:decision>
               <urn1:resource>https://158.147.185.168:8181/SamlReceiveService/SamlProcessWS</urn1:resource>
               <urn1:action>TestSaml</urn1:action>
               <urn1:evidence>
                  <urn1:assertion>
                     <urn1:id>40df7c0a-ff3e-4b26-baeb-f2910f6d05a9</urn1:id>
                     <urn1:issueInstant>2009-04-16T13:10:39.093Z</urn1:issueInstant>
                     <urn1:version>2.0</urn1:version>
                     <urn1:issuerFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName</urn1:issuerFormat>
                     <urn1:issuer>CN=SAML User,OU=Harris,O=HITS,L=Melbourne,ST=FL,C=US</urn1:issuer>
                     <urn1:conditions>
                        <urn1:notBefore>2009-04-16T13:10:39.093Z</urn1:notBefore>
                        <urn1:notOnOrAfter>2009-12-31T12:00:00.000Z</urn1:notOnOrAfter>
                     </urn1:conditions>
                     <urn1:accessConsentPolicy>urn:oid:1.2.3.4</urn1:accessConsentPolicy>
                     <urn1:instanceAccessConsentPolicy>urn:oid:1.2.3.4.123456789</urn1:instanceAccessConsentPolicy>
                  </urn1:assertion>
               </urn1:evidence>
            </urn1:samlAuthzDecisionStatement>
         </urn:assertion>
      </urn:RespondingGateway_PRPA_IN201305UV02Request>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
						<con:assertion type="SOAP Response"/>
						<con:assertion disabled="true" type="Schema Compliance">
							<con:configuration/>
						</con:assertion>
						<con:assertion type="SOAP Fault Assertion"/>
						<con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508"/>
						<con:wsrmConfig version="1.2"/>
					</con:request>
				</con:config>
			</con:testStep>
			<con:testStep name="NHINCProxyPatientDiscoveryMockResponse" type="mockresponse">
				<con:settings/>
				<con:config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" startStep="EntityPatientDiscoveryRequest" xsi:type="con:MockResponseStep">
					<con:interface>NhincProxyPatientDiscoveryBinding</con:interface>
					<con:operation>Proxy_PRPA_IN201305UV</con:operation>
					<con:path>/EntityPatientDiscoveryMockResponse</con:path>
					<con:port>2222</con:port>
					<con:timeout>30000</con:timeout>
					<con:response>
						<con:settings/>
						<con:responseContent><![CDATA[
							<S:Envelope xmlns:S="http://www.w3.org/2003/05/soap-envelope">
   <S:Body>
      <ns3:PRPA_IN201306UV02 ITSVersion="XML_1.0" xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:ns2="urn:gov:hhs:fha:nhinc:common:nhinccommon" xmlns:ns3="urn:hl7-org:v3" xmlns:ns4="urn:gov:hhs:fha:nhinc:common:patientcorrelationfacade">
         <ns3:id extension="4191797c:1259356875e:-7c2d" root="1.1.1"/>
         <ns3:creationTime value="2009121522276"/>
         <ns3:interactionId extension="PRPA_IN201306UV" root="2.16.840.1.113883.1.6"/>
         <ns3:processingCode code="P"/>
         <ns3:processingModeCode code="R"/>
         <ns3:acceptAckCode code="AL"/>
         <ns3:receiver typeCode="RCV">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:receiver>
         <ns3:sender typeCode="SND">
            <ns3:device determinerCode="INSTANCE" classCode="">
               <ns3:id root="1.2.345.678.999"/>
               <ns3:asAgent classCode="AGNT">
                  <ns3:representedOrganization determinerCode="INSTANCE" classCode="ORG">
                     <ns3:id/>
                  </ns3:representedOrganization>
               </ns3:asAgent>
            </ns3:device>
         </ns3:sender>
         <ns3:acknowledgement>
            <ns3:typeId extension="PRPA_IN201305UV02" root="2.16.840.1.113883.1.6"/>
            <ns3:typeCode code="AA"/>
            <ns3:targetMessage xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:acknowledgement>
         <ns3:controlActProcess moodCode="EVN" classCode="">
            <ns3:code codeSystem="2.16.840.1.113883.1.6" code="PRPA_TE201306UV"/>
            <ns3:subject typeCode="SUBJ">
               <ns3:registrationEvent moodCode="" classCode="">
                  <ns3:id nullFlavor="NA"/>
                  <ns3:statusCode code="active"/>
                  <ns3:subject1 typeCode="">
                     <ns3:patient classCode="PAT">
                        <ns3:id extension="1234" root="1.1.2.16.840.1.113883.3.198"/>
                        <ns3:statusCode code="SD"/>
                        <ns3:patientPerson>
                           <ns3:name>
                              <ns3:family partType="FAM">Smith</ns3:family>
                              <ns3:given partType="GIV">Joe</ns3:given>
                           </ns3:name>
                           <ns3:administrativeGenderCode code="M"/>
                           <ns3:birthTime value="19560301"/>
                           <ns3:addr>
                              <ns3:city>Orlando</ns3:city>
                              <ns3:state>FL</ns3:state>
                              <ns3:postalCode>98765</ns3:postalCode>
                           </ns3:addr>
                        </ns3:patientPerson>
                        <ns3:providerOrganization determinerCode="" classCode="">
                           <ns3:id root="2.2.2"/>
                           <ns3:contactParty xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                        </ns3:providerOrganization>
                        <ns3:subjectOf1>
                           <ns3:queryMatchObservation moodCode="" classCode="">
                              <ns3:code code="IHE_PDQ"/>
                              <ns3:value xsi:type="ns3:INT" value="100" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                           </ns3:queryMatchObservation>
                        </ns3:subjectOf1>
                     </ns3:patient>
                  </ns3:subject1>
                  <ns3:custodian typeCode="">
                     <ns3:assignedEntity classCode="">
                        <ns3:id root="2.2.2"/>
                     </ns3:assignedEntity>
                  </ns3:custodian>
               </ns3:registrationEvent>
            </ns3:subject>
            <ns3:queryAck>
               <ns3:queryId extension="-abd3453dcd24wkkks545" root="1.1"/>
               <ns3:queryResponseCode code="OK"/>
               <ns3:resultTotalQuantity value="1"/>
               <ns3:resultCurrentQuantity value="1"/>
               <ns3:resultRemainingQuantity value="0"/>
            </ns3:queryAck>
            <ns3:queryByParameter xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns3:controlActProcess>
      </ns3:PRPA_IN201306UV02>
   </S:Body>
</S:Envelope>]]></con:responseContent>
						<con:wsaConfig mustUnderstand="NONE" version="200508"/>
					</con:response>
					<con:host/>
				</con:config>
			</con:testStep>
			
			<con:testStep name="verify audit events" type="groovy"><con:settings/><con:config><script>def count = context.withSql('AuditDB') { sql -&gt; 
	sql.firstRow('select count(*) from ' + context.findProperty('AuditTable')).'count(*)'
}
//log.info "Count: " + count;
assert (count &gt; 0);</script></con:config></con:testStep><con:properties/>
			<con:reportParameters/>
			<con:tearDownScript>FileUtils.restoreToMasterConfiguration(context, log);</con:tearDownScript>
		</con:testCase>
		<con:properties/>
		<con:reportParameters/>
	</con:testSuite>
	<con:requirements/>
	<con:properties><con:property><con:name>AuditDB</con:name><con:value>auditrepo</con:value></con:property><con:property><con:name>AuditTable</con:name><con:value>auditrepository</con:value></con:property><con:property><con:name>EntityPatientDiscoveryAsyncReqQueueEndpoint</con:name><con:value>http://localhost:8080/CONNECTGateway/EntityService/EntityPatientDiscoveryDeferredReqQueueUnsecured</con:value></con:property><con:property><con:name>LocalAA</con:name><con:value>1.1</con:value></con:property><con:property><con:name>LocalHCID</con:name><con:value>1.1</con:value></con:property><con:property><con:name>LocalHCIDescription</con:name><con:value>Test HCID1</con:value></con:property><con:property><con:name>LocalHCIDName</con:name><con:value>HCID1</con:value></con:property><con:property><con:name>mockHost</con:name><con:value>localhost</con:value></con:property><con:property><con:name>NHINGatewayConfigDir</con:name><con:value>c:/sun/appserver/domains/domain1/config/nhin</con:value></con:property><con:property><con:name>NHINGatewayHost</con:name><con:value>localhost</con:value></con:property><con:property><con:name>NoMatchFamilyName</con:name><con:value>Winslet</con:value></con:property><con:property><con:name>NoMatchFullName</con:name><con:value>Kate Winslet</con:value></con:property><con:property><con:name>NoMatchGivenName</con:name><con:value>Kate</con:value></con:property><con:property><con:name>NoMatchPrefix</con:name><con:value>Ms.</con:value></con:property><con:property><con:name>PatientDiscoveryEndpoint</con:name><con:value>http://localhost:8080/Gateway/PatientDiscovery/1_0/EntityPatientDiscovery</con:value></con:property><con:property><con:name>PDAssignAuthID</con:name><con:value>1.1.2.16.840.1.113883.3.198</con:value></con:property><con:property><con:name>PDCity</con:name><con:value>Melbourne</con:value></con:property><con:property><con:name>PDcountry</con:name><con:value>US</con:value></con:property><con:property><con:name>PDdateOfSignature</con:name><con:value>20080520</con:value></con:property><con:property><con:name>PDdOB</con:name><con:value>19800516</con:value></con:property><con:property><con:name>PDexpirationDate</con:name><con:value>20100520</con:value></con:property><con:property><con:name>PDlivingSubjectAdministrativeGender</con:name><con:value>M</con:value></con:property><con:property><con:name>PDlivingSubjectBirthTime</con:name><con:value>19630804</con:value></con:property><con:property><con:name>PDpurposeOfDisclosure</con:name><con:value>Mental</con:value></con:property><con:property><con:name>PDRespondingAA</con:name><con:value>2.2</con:value></con:property><con:property><con:name>PDRespondingHCDesc</con:name><con:value>Test HCID2</con:value></con:property><con:property><con:name>PDRespondingHCID</con:name><con:value>2.2</con:value></con:property><con:property><con:name>PDRespondingHCName</con:name><con:value>HCID2</con:value></con:property><con:property><con:name>PDSSN</con:name><con:value>123456789</con:value></con:property><con:property><con:name>PDstate</con:name><con:value>FL</con:value></con:property><con:property><con:name>PDstreetAddress</con:name><con:value>123 Johnson Rd</con:value></con:property><con:property><con:name>PDSubjectID</con:name><con:value>1234</con:value></con:property><con:property><con:name>PDuniquePatientId</con:name><con:value>1234^^^&amp;amp;1.1&amp;amp;ISO</con:value></con:property><con:property><con:name>PDzipCode</con:name><con:value>12345</con:value></con:property><con:property><con:name>PEReceivingHCID</con:name><con:value>2.2</con:value></con:property><con:property><con:name>SingleMatchFamilyName</con:name><con:value>Smith</con:value></con:property><con:property><con:name>SingleMatchFullName</con:name><con:value>Joe Smith</con:value></con:property><con:property><con:name>SingleMatchGivenName</con:name><con:value>Joe</con:value></con:property><con:property><con:name>SingleMatchPrefix</con:name><con:value>Mr.</con:value></con:property><con:property><con:name>SUT.PatientCorrelationDB</con:name><con:value>patientcorrelationdb</con:value></con:property><con:property><con:name>SUT.PatientCorrelationHost</con:name><con:value>localhost</con:value></con:property><con:property><con:name>SUT.PatientCorrelationPass</con:name><con:value>nhincpass</con:value></con:property><con:property><con:name>SUT.PatientCorrelationPort</con:name><con:value>3306</con:value></con:property><con:property><con:name>SUT.PatientCorrelationTable</con:name><con:value>correlatedidentifiers</con:value></con:property><con:property><con:name>SUT.PatientCorrelationUser</con:name><con:value>nhincuser</con:value></con:property></con:properties>
	<con:afterLoadScript>def propertiesFile = new File(new File(project.path).parent, 'EntityPatientDiscoveryAsyncReqQueue-soapui-project.properties')
if (propertiesFile.exists()) {
	def props = new Properties()
	props.load(new FileReader(propertiesFile))
	props.each { key, value -&gt;
	    project.setPropertyValue(key, value)
	}
}

TimeZone.setDefault(TimeZone.getTimeZone("UTC"))
def testRunListener = [
  afterRun: { testRunner, runContext -&gt; },
  afterStep: { testRunner, runContext, result -&gt; },
  beforeStep: { testRunner, runContext -&gt; },
  beforeStep: { testRunner, runContext, testStep -&gt; },
  beforeRun: { testRunner, runContext -&gt; 
    use (org.codehaus.groovy.runtime.TimeCategory) {
      def startDate = 5.minutes.ago
      def endDate = 5.minutes.from.now
      def expireDate = 30.days.from.now

      def df = "yyyy-MM-dd'T'HH:mm:ss'Z'"
      def dfSig = "MM/dd/yyyy' 'HH:mm:ss"

      runContext.testCase.setPropertyValue("startDate", startDate.format(df))
      runContext.testCase.setPropertyValue("endDate", endDate.format(df))
      runContext.testCase.setPropertyValue("sigDate", startDate.format(dfSig))
      runContext.testCase.setPropertyValue("expireDate", expireDate.format(df))
    }
  }   
] as com.eviware.soapui.model.testsuite.TestRunListener

project.testSuiteList*.testCaseList.flatten()*.addTestRunListener(testRunListener)

com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.findProperty = { propertyName -&gt;
    return delegate.getProperty(propertyName) ?:
                delegate.testCase.getPropertyValue(propertyName) ?:
                delegate.testCase.testSuite.getPropertyValue(propertyName) ?:
                delegate.testCase.testSuite.project.getPropertyValue(propertyName)
}

com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext.metaClass.withSql = { dbOrPropertyName, block -&gt;
  def dbName = delegate.findProperty(dbOrPropertyName) ?: dbOrPropertyName
  def host = delegate.findProperty('DBHost')
  def port = delegate.findProperty('DBPort')
  def user = delegate.findProperty('DBUser')
  def pass = delegate.findProperty('DBPass')
  
  def connectString = "jdbc:mysql://${host}:${port}/${dbName}"
  def sql = groovy.sql.Sql.newInstance(connectString, user, pass, "com.mysql.jdbc.Driver");
  try {
     block(sql)
  } finally {
    sql.close()
  }
}</con:afterLoadScript><con:wssContainer/>
	<con:databaseConnectionContainer/>
	<con:reporting>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:xmlTemplates/>
		<con:parameters/>
	</con:reporting>
	<con:eventHandlers name="TestSuiteRunListener.beforeTestCase" type="TestSuiteRunListener.beforeTestCase">
		<con:script>FileUtils.backupConfiguration(context, log);</con:script>
	</con:eventHandlers>
	<con:eventHandlers name="TestSuiteRunListener.afterTestCase" type="TestSuiteRunListener.afterTestCase">
		<con:script>FileUtils.restoreConfiguration(context, log)</con:script>
	</con:eventHandlers>
</con:soapui-project>