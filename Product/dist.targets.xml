<project name="dist.targets">
    <tstamp>
        <format pattern="MMddyyyy_hhmm" property="snapshot_tstamp" />
    </tstamp>
    <if>
        <not>
            <isset property="released.version.name" />
        </not>
        <then>
            <property name="released.version.name" value="CONNECT_snapshot_${snapshot_tstamp}" />
        </then>
    </if>

    <property name="dist.zip.filename" value="CONNECT_Binaries_${released.version.name}.zip" />
    <property name="dist.artifact.dir" value="../target" />
    <property name="dbscripts.dir.name" value="DBScripts" />
    <property name="dbscripts.dir" value="${root.project.directory.path}/${dbscripts.dir.name}" />
    <property name="install.scripts.dir" value="${root.project.directory.path}/Install" />
    <property name="install.scripts.staging.dir" value="${dist.artifact.dir}/.script_staging" />
    <property name="production.dir" value="${root.project.directory.path}/Production" />
    <property name="thirdparty.dir" value="${root.project.directory.path}/../ThirdParty" />

    <!--
    This target should build **all** externally released artifacts from scratch.

    Originally modeled off of the target 'Build.PublishZip.Release.Installer' in /Build/Custom.Build.xml
    -->
    <target name="dist" depends="init, binary_dist" />

    <!-- ***** BEGIN INTERNAL TARGETS *********************** -->

    <target name="init">
        <delete dir="${dist.artifact.dir}" failonerror="false" />
        <delete dir="${deployment.dir}" failonerror="false" />
        <mkdir dir="${deployment.dir}" />
        <mkdir dir="${dist.artifact.dir}" />
    </target>

    <target name="binary_dist" depends="clean,
                   package.create,
                   copy.deployable.artifacts,
                   just.binary_dist" />


    <target name="just.binary_dist">
        <tempfile property="release.info.tempfile" />
        <copy todir="${install.scripts.staging.dir}">
            <fileset dir="${install.scripts.dir}">
                <include name="**\*" />
                <exclude name="**\*.zip" />
            </fileset>
            <fileset dir="${root.project.directory.path}/build/package" />
        </copy>
        <copy todir="${install.scripts.staging.dir}/package">
            <fileset dir="${root.project.directory.path}/build/package" />
        </copy>
        <replace file="${install.scripts.staging.dir}/build.xml" token="default=&quot;install&quot;" value="default=&quot;install-binary&quot;" />
        <replace file="${install.scripts.staging.dir}/build.xml" token="../DBScripts/nhincdb" value="DBScripts/nhincdb" />
        <replace file="${install.scripts.staging.dir}/build.xml" token="../../ThirdParty" value="ThirdParty" />
        <replace file="${install.scripts.staging.dir}/ear.libs.properties.xml" token="../../ThirdParty" value="ThirdParty" />
        <replace file="${install.scripts.staging.dir}/deploy.xml" token="../../ThirdParty" value="ThirdParty" />
        <replace file="${install.scripts.staging.dir}/deploy.xml" token="../Production/Common/Properties/Dev" value="Dev" />
        <replace file="${install.scripts.staging.dir}/deploy.xml" token="../build/package" value="package" />
        <replace file="${install.scripts.staging.dir}/package/package.targets.xml" token="../../Install/ear.libs.properties.xml" value="../ear.libs.properties.xml" />
        <echo file="${release.info.tempfile}">${released.version.name}, ${snapshot_tstamp}</echo>
        <zip zipfile="${dist.artifact.dir}/${dist.zip.filename}">
            <zipfileset dir="${root.project.directory.path}">
                <include name="application.template.xml" />
                <include name="projects.xml" />
            </zipfileset>
            <zipfileset dir="${deployment.dir}">
                <include name="**\*" />
            </zipfileset>
            <zipfileset dir="${install.scripts.staging.dir}">
                <include name="**\*" />
            </zipfileset>
            <zipfileset dir="${dbscripts.dir}" prefix="${dbscripts.dir.name}">
                <include name="**\*" />
            </zipfileset>
            <zipfileset file="${release.info.tempfile}" fullpath="ReleaseInfo.txt" />
            <zipfileset dir="${thirdparty.dir}/C3PO" prefix="ThirdParty/C3PO">
                <include name="*.jar" />
            </zipfileset>
            <zipfileset dir="${thirdparty.dir}/HibernateLibraries" prefix="ThirdParty/HibernateLibraries">
                <include name="*.jar" />
            </zipfileset>
            <zipfileset dir="${thirdparty.dir}/log4j" prefix="ThirdParty/log4j">
                <include name="*.jar" />
            </zipfileset>
            <zipfileset dir="${thirdparty.dir}/MySQLDB" prefix="ThirdParty/MySQLDB">
                <include name="*.jar" />
            </zipfileset>
            <zipfileset dir="${thirdparty.dir}/OpenSSO" prefix="ThirdParty/OpenSSO">
                <include name="*.jar" />
            </zipfileset>
            <zipfileset dir="${thirdparty.dir}/SpringFramework" prefix="ThirdParty/SpringFramework">
                <include name="*.jar" />
            </zipfileset>
            <zipfileset dir="${thirdparty.dir}/Xerces" prefix="ThirdParty/Xerces">
                <include name="*.jar" />
            </zipfileset>
            <zipfileset dir="${thirdparty.dir}/XStream" prefix="ThirdParty/XStream">
                <include name="*.jar" />
            </zipfileset>
            <zipfileset dir="${thirdparty.dir}/CXF" prefix="ThirdParty/CXF">
                <include name="*.jar" />
            </zipfileset>
            <zipfileset dir="${thirdparty.dir}/AntExtraLibs" prefix="ThirdParty/AntExtraLibs">
                <include name="*.jar" />
            </zipfileset>
            <zipfileset dir="${root.project.directory.path}/SoapUI_Test/RegressionSuite" prefix="RegressionSuite">
                <include name="*.*"/>
            </zipfileset>
        </zip>
        <delete file="${release.info.tempfile}" />
        <delete dir="${install.scripts.staging.dir}" />
    </target>

</project>
